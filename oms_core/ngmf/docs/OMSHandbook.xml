<?xml version="1.0" encoding="UTF-8"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Object Modeling System v3</title>

    <subtitle>Developer and User Handbook</subtitle>

    <author>
      <personname><firstname>Olaf</firstname><surname>David
       </surname></personname>

      <affiliation>
        <orgname>Colorado State University</orgname>
      </affiliation>
    </author>

    <author>
      <personname><firstname>Jack</firstname><surname>R. Carlson
       </surname></personname>

      <affiliation>
        <orgname>USDA - Natural Resources Conservation Service</orgname>
      </affiliation>
    </author>

    <author>
      <personname><firstname>George H. Leavesley</firstname></personname>

      <affiliation>
        <orgname>Colorado State University</orgname>
      </affiliation>
    </author>

    <author>
      <personname><firstname>James</firstname><surname>C. Ascough II
       </surname></personname>

      <affiliation>
        <orgname>USDA - Agricultural Research Service</orgname>
      </affiliation>
    </author>

    <author>
      <personname><firstname>Frank</firstname><surname>W. Geter
       </surname></personname>

      <affiliation>
        <orgname>USDA - Natural Resources Conservation Service</orgname>
      </affiliation>
    </author>

    <author>
      <personname><firstname>Kenneth</firstname><surname>W. Rojas
       </surname></personname>

      <affiliation>
        <orgname>USDA - Natural Resources Conservation Service</orgname>
      </affiliation>
    </author>

    <author>
      <personname><firstname>Lajpat R. Ahuja</firstname><surname>
      </surname></personname>

      <affiliation>
        <orgname>USDA - Agricultural Research Service</orgname>
      </affiliation>
    </author>

    <pubdate>Aug 31, 2010</pubdate>

    <abstract>
      <para>OMS is a framework for ago-environmental model development, data
      provisioning, testing, validation, and deployment. It provides a bridge
      for transferring technology from the research organization to the
      program delivery agency. The framework provides a consistent and
      efficient way to create science components, build models, calibrate and
      test them, modify and adjust as the science advances, and re-purpose for
      emerging customer requirements. OMS was first released in 2004, and
      subsequently integrated into the USDA Natural Resources Conservation
      Service technical architecture in 2008.</para>

      <para>This Handbook targets the model developer, integrator, and user.
      It provides a comprehensive overview and reference about developing,
      integrating, running and deploying environmental simulation models using
      this framework. It explains the steps required to create its fundamental
      building blocks, the components, and integrate them into a more complex
      model. Model execution is demonstrated for testing, calibration, and
      uncertainty analysis, illustrating the flexible options available once
      the model is within the framework.</para>

      <para>With OMS 3.0, framework invasiveness to the model has been
      minimized, improving portability, adaptability and infrastructure
      integration. The emphasis with this release was focused on (i)
      simplifying component integration, (ii) implicit auto-scaling of
      simulation models in multi-core and multi-processor environments, (iii)
      providing for modeling simulation traceability and integrity, and (iv)
      auto-documentation of models and simulations.</para>

      <para>An annotation standard was developed for those features. That
      standard promotes straightforward integration of simulation code written
      in various programming languages with a low impact on the developer. The
      framework was also designed with strong support for multi-threading, the
      concurrent processing of multiple simulation tasks. The modeler and
      integrator does not have to know parallel programming knowledge is
      required to build parallelized models. OMS3 enables seamless
      transitioning from multi-core modeling on a desktop to a clustered
      processors in a computing cloud.</para>

      <para>The framework addresses traceability requirements of agencies with
      program tracking and financial management responsibilities. Agencies
      running simulation models can leverage OMS to create auditable
      simulation trails, based on Secure Hash Algorithms, a Federal
      Information Processing (FIP) Standard. A related features is the
      capability to auto-document a model and simulation structure into an
      open document standard such as Docbook5+.</para>

      <para>In summary, the OMS framework supports a work flow to develop and
      deliver agro-environmental models to user organizations with the
      following primary steps: (1) develop components, (2) integrate
      components into models, (3) develop simulations, and (4) deploy and run
      simulations. The final step of running simulations is integrated into
      the business work flow of the user organization.</para>
    </abstract>
  </info>

  <preface>
    <title>Introduction</title>

    <para>The Object Modeling System (OMS) is an integrated environmental
    modeling framework. Frameworks in general are helping to create and use
    software applications by providing common and reoccurring functionality.
    Web frameworks, user interface frameworks, or frameworks for database
    integration are examples for successful framework implementations within
    general software applications. They deal with complicated, mostly
    infrastructure aspects by abstracting it to a level that is appealing for
    the non-specialist.</para>

    <para>What characterizes <emphasis role="bold">modeling</emphasis>
    frameworks? They are expected to support the modeling process, for
    example, straightforward model code development, seamless model access to
    data, and data analysis and visualization. Some modeling frameworks also
    focus on high performance computing and are specifically tailored for
    particular modeling domains such as climate modeling.</para>

    <para>Driving forces for framework adoption within the modeling community
    are (1) saving time and reducing costs, (2) providing quality assurance
    and control, (3) re-purposing model solutions for new business needs, (4)
    ensuring consistency and traceability of model results, and (5) mastering
    computing scalability to solve complex modeling problems. At the bottom
    line the model developer should be able to efficiently develop and deliver
    a simulation model. As pointed out in <xref linkend="Rizzoli2005" />, the
    modeler should experience an immediate return on investment by adopting a
    framework designed to increase modeling productivity.</para>

    <para>The Object Modeling System (OMS) is a integrated modeling framework
    designed to support the delivery of science relating to agricultural and
    natural resource management in programs administered by the U.S.
    Department of Agriculture (USDA). The OMS architecture has been designed
    so that it can inter operate with other frameworks supporting
    agro-environmental modeling in Europe, Australia, North America, and
    elsewhere. Its principle architecture is shown in <xref
    linkend="Fig_PrAr" />. It very much assembles the generic architecture for
    environmental integrated modeling frameworks as described in <xref
    linkend="Rizzoli2008" />.</para>

    <para></para>

    <para><figure>
        <title xml:id="Fig_PrAr">OMS3 Principle Architecture</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Handbook/Slide11.PNG"
                       scale="75"></imagedata>
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>There are four foundations identified for OMS3 (<xref
    linkend="Fig_PrAr" />): <emphasis role="bold">modeling
    resources</emphasis>, the system <emphasis role="bold">knowledge
    base,</emphasis> <emphasis role="bold">development tools</emphasis>, and
    the <emphasis role="bold">modeling products</emphasis>. OMS3 core consists
    of an internal knowledge base and development tools for model and
    simulation creations. The system derives information out of various
    modeling resources, such as data bases, services, version control systems,
    or other repositories, transforms it into a framework knowledge bases that
    the OMS3 development tools use to create modeling products. Products
    include model applications; simulations that support calibration,
    optimization, and parameter sensitivity analysis; output analyses; audit
    trails; and documentation</para>

    <para>Implementing this architecture may require a commitment to a
    structured model and simulation development process, such as the use of a
    <emphasis>version control system</emphasis> for model source code
    management, or a simulation run database database to store audit trails.
    Such features are important for institutionalized implementation of the
    framework, however, a single modeler may not be required to adhere to
    it.</para>

    <section>
      <title>Basic Concepts</title>

      <para>There are a few simple concepts to master in order to create and
      use models in OMS3. Like other modeling frameworks such as OpenMI <xref
      linkend="Gregersen2007" />, CCA <xref linkend="Bernholdt2006" />, ESMF
      <xref linkend="Collins2005" />, and CMP <xref linkend="Moore2007" />,
      OMS3 adheres to the notion of <emphasis role="bold">objects</emphasis>
      as the fundamental building blocks for a model and to the principles of
      component based software engineering for the model development
      process.</para>

      <para><emphasis>Component-based software engineering</emphasis> (CBSE)
      has existed in one form or another for a number of years. The advantages
      of constructing <emphasis>modular</emphasis> software are well known
      within the software community. Modularity is a general concept which
      applies to the development of software in a fashion which allows
      individual modules to be developed, often with a standardized interface
      to allow modules to communicate. In fact, the kind of
      <emphasis>separation of concerns</emphasis> between objects in an
      object-oriented language is much the same concept as for modules, but on
      a larger scale. Typically, partitioning a system into modules helps
      minimize coupling, which should lead to 'easier-to-maintain'
      code.</para>

      <para>Initially, software components were viewed almost exclusively as
      source code modules. In recent years, however, the popular use of the
      term software component has been with reference to so-called “binary”
      components. Binary component are individual software artifacts that
      exist in compiled form, and are typically ready for distribution. A wide
      variety of technologies have been developed to support the packaging of
      binary components.</para>

      <para>OMS3 as a framework is object-oriented, the models within the
      framework are objects or components as understood in CBSE. However the
      design of OMS3 is unique in one important aspect. It is considered
      <emphasis>non-invasive</emphasis> and sees models and components as
      plain objects with meta data by means of annotations. Modelers do not
      have to learn an extensive object-oriented Application Programming
      Interface (API), nor do they have to comprehend complex design patterns.
      Instead OMS3 plain objects are perfect fits as modeling components as
      long as they communicate the location of their (i) processing logic, and
      (ii) data flow. Annotations do this in a descriptive, non-invasive way.
      Non-invasive lightweight frameworks principles based on plain objects
      have proven successful in other application fields <xref
      linkend="Richardson2006" /> and are expected to pay dividends for
      agro-environmental modeling.</para>

      <para>Why is a non-invasive approach important?</para>

      <itemizedlist>
        <listitem>
          <para>Most agro-environmental modelers, at least early in the
          development life cycle, are natural resource scientists with
          experience in programming (often self-taught), but not software
          architecture and design. Most modeling projects do not have the
          luxury employing an experienced software engineer or computer
          scientist. Software engineers understand and apply complex design
          patterns, UML diagrams, advanced object-oriented techniques such as
          parameterized types, or higher level data structures and
          composition. A hydrologist or other natural resource scientist
          usually lacks these skills.</para>

          <para>The targeted use of object-oriented analysis and design
          principles for modeling could be productive for a specific model
          having limited expectation for reuse and extensibility. However, for
          a framework, the extensive use of object-oriented features for
          models is questionable since it puts an undesirable burden on the
          scientist.</para>
        </listitem>

        <listitem>
          <para>The agro-environmental modeling community maintains a large
          number of legacy models. Some methods and equations still in use
          were developed as long as 60 years ago. What has changed and will
          continue to change is the infrastructure around them that delivers
          the output from these models. Smart phones and computing clouds are
          emerging technologies, to which lightweight, non-invasive frameworks
          can easily adapt.</para>
        </listitem>

        <listitem>
          <para>A lightweight framework adjusts to an existing design as
          opposed to define its own specification or API. The learning curve
          small, as there is no complex API to learn or new data types to
          manage. This has some very practical implications for a modeler,
          since there is no major paradigm shift in using existing modeling
          code and libraries. Committing to a non-invasive framework is more
          likely than for the more heavyweight counterparts, since the
          component integrated in the lightweight framework can still have a
          'life' outside on other platforms, and can keep evolving
          there.</para>
        </listitem>
      </itemizedlist>

      <para>Object-oriented techniques were promoted over the last decade to
      be the solution for natural resource modeling. Well designed
      object-oriented models are hard to design if the expected outcome is
      expected to contain all the promises of reuse, extensibility, and
      flexibility. Design of complex systems requires experience, anticipation
      of future use cases, freedom to discard a dead-end design, and most of
      all: time and resources. In addition environmental modeling
      perspectives, concepts, and approaches vary, which is hard to capture in
      a single object-oriented design.</para>

      <para>Since OMS3 is a non-invasive modeling framework, the modeler does
      not need an extensive knowledge of object-oriented principles to make
      the model-framework integration happen. Creating a modeling object is
      very easy. There are no interfaces to implement, no classes to extend
      and polymorphic methods to overwrite, no framework-specific data types
      to replace common native language data types<footnote>
          <para>It was widely observed in framework implementation including
          OMS 2.x and before, that component interoperability can only
          achieved by using framework supplied data types that usually are
          redundant equivalences to native language types. Such a requirement
          leads to even more undesired coupling between the model and
          application and results in a framework lock-in.</para>
        </footnote> etc. Instead OMS3 uses meta data by means of Annotations
      to specify and describe "points of interest" for existing data fields
      and methods for the framework. Annotations are explained in detail in
      Appendix B. Chapters 2, 3, and 4 show their use within a model. Within a
      modeling object any complex internal object-oriented design can be used
      as needed, however, the framework does not depend on any object-oriented
      contract.</para>

      <para></para>

      <section>
        <title>Model Components</title>

        <para><emphasis role="bold">Components</emphasis> are the main
        building blocks of simulation models in OMS. Traditionally, scientific
        applications are designed as large blocks as hand-crafted code, which
        usually results in a monolithic application. Such model applications
        are not designed to have parts of them easily re-purposed if a related
        application will be required in the future. A major disadvantage of
        building monolithic simulation models is that conceptual boundaries
        within the model are not captured or not there at all.</para>

        <para>In this handbook we refer to a <emphasis
        role="bold">Component</emphasis> as a modeling entity, that implements
        one conceptual modeling concept, is implemented as a plain (Java)
        object that comes along with annotations. A component can be
        hierarchical, it may contains other, finer grained components
        contributing to the larger goal. It is a black-box that exposes its
        framework relevant aspects via meta data.</para>

        <para>The component represents a sufficient level of complexity so
        that someone can use it in an executable simulation is called a
        <emphasis role="bold">Model</emphasis>. Therefor each component can
        become a model. The model is usually the top level component within a
        component hierarchy.</para>

        <figure>
          <title xml:id="Fig_PrCo">Principle Component Structure</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/Handbook/Slide19.PNG"
                         scale="75"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para><xref linkend="Fig_PrCo" /> shows the principle design of a
        component in OMS3. Like all modeling frameworks OMS3 provides for the
        same features: Isolating a computational aspect in a component,
        facilitating directed data flow (slots, or exchange items) and manage
        various execution phases of a component. As pointed out in <xref
        linkend="Peckham2008" />, an "Initialize →Run →Finalize" (IRF) is a
        common life cycle for almost all simulation models. OMS3 offers only
        annotations to allow a user to specify those framework required
        aspects on top of plain object.</para>

        <para>The term <emphasis role="bold">Component</emphasis> refers to a
        concept in software development which extends the re usability of code
        from the source level to the executable. Components are software units
        that are context-independent both in the conceptual and technical
        domain. A component is a self contained software unit that is well
        separated from its environment.</para>

        <para>The component approach takes object-oriented designs to the next
        level. While object-oriented design methods focus on abstraction,
        encapsulation, and localization of data and methods, they can also
        lead to simulation systems where objects are highly co-dependent. To
        remove this limitation, a more structured process was introduced in
        model development and applied to OMS3: component-oriented modeling. It
        emphasizes the component as object-oriented software which can be
        developed and tested independently, and delivered as a unit. It
        provides its services through well defined interfaces.</para>

        <para>Component implementations in general have proven to support
        reuse in a more efficient way than just using object-oriented methods.
        There are some general benefits of using components for building
        complex systems.</para>

        <itemizedlist>
          <listitem>
            <para>Components are designed with a <emphasis
            role="bold">standard, well defined interface</emphasis> in mind.
            Such a published interface hides the implementation of the
            component logic and forces an abstraction level which separates
            the offered contract for communication from its
            implementation.</para>
          </listitem>

          <listitem>
            <para>Components are <emphasis role="bold">self contained
            units</emphasis> from the conceptual and technical perspective.
            They can be developed and tested individually. Finally they are
            packaged and are delivered to be used in several
            applications.</para>
          </listitem>

          <listitem>
            <para>The use of components <emphasis role="bold">simplifies the
            construction of complex systems</emphasis> since they change the
            way these are built. As opposed to programming the entire model,
            it can be composed using components. Some parts of a model may
            originate from legacy code sources, and some may be new code. A
            component approach facilitates the integration of legacy and new
            code.</para>
          </listitem>
        </itemizedlist>

        <para>The use of components helps face the challenge building complex
        simulation models by reducing model software complexity and overcome
        the limitations of monolithic, highly coupled model
        implementations.</para>

        <section>
          <title>Model Component Base</title>

          <para>OMS3 also introduces the concept of a model base, considered
          to contain two or more instances of a model designed to address the
          modeling needs of a customer. For example, the customer may require
          a model apply to business scenarios across diverse regions.
          Therefore the solution could involve several instances of the model,
          each modified, configured, and validated for a particular
          region.</para>

          <para>Likewise, the customer may require a model be used in
          different contexts within a business function, and the solution may
          involve model instances that fit into the various business work
          flows. Knowing these requirements up front is important for
          architecting the model and deploying as instances aligned with
          business needs. The model instances should be managed as a model
          base. Model base components (including the model and its instances)
          should be managed within an OMS3 modeling project and stored in the
          OMS3 Component Library.</para>
        </section>
      </section>

      <section>
        <title>Simulations</title>

        <para>The other fundamental concept in OMS3 are <emphasis
        role="bold">Simulations</emphasis>. Simulations are giving a model a
        purpose, they are the model applications. Usually a simulation
        consists of the</para>

        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">Model</emphasis> that is to be used
            which is in most cases the top level component.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Location and time sensitive input
            data</emphasis> such as parameter files or climate data
            sets</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Output management</emphasis> and
            analysis such as model efficiencies, statistical summaries,
            graphs, and plots.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Type of execution</emphasis>, such as
            single execution, parameter sampling execution, an uncertainty
            analysis, or a forecast execution using synthetic input,
            etc.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Execution environment</emphasis> such
            as the local computer, a remote box, or a cluster of computer at a
            remote location.</para>
          </listitem>
        </itemizedlist>

        <para>OMS3 defines a set of various simulation types that are
        discussed in Chapter ???. <xref linkend="Fig_PrSi" /> shows the
        concept of a simulation.</para>

        <figure xml:id="Fig_PrSi">
          <title>Principle Simulation</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/Handbook/Slide20.PNG"
                         scale="75"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>How to create a simulation? OMS3 employs a simple but powerful
        concept called <emphasis role="bold">Domain Specific
        Language</emphasis> (DSL) to provide for a concise, robust, and
        flexible representation of simulations. A DSL in general is a
        mini-language aiming at representing constructs for a given domain.
        Our domain is modeling, therefore the vocabulary of this DSL very much
        reflects modeling concepts.A DSL is really a language extension
        dealing with a design pattern such as building a hierarchy of objects
        in a simple, descriptive way.</para>

        <para>With a DSL, simulations can be created and executed from
        different tools such as IDEs, the OMS3 modeling console, the command
        line, or any application that embeds a OMS3 runtime.</para>

        <para>The use of DSLs over other approaches such as XML for a
        structured setup of simulations and meta data has many advantages. XML
        tends to be verbose when supported by a schema, parsing XML does not
        account for programming languages data types, or conversions. DSLs
        instead offer an elegant and concise construction of simulations while
        providing for implicit data types. The specification of the modeling
        DSL elements is part of this handbook.</para>
      </section>
    </section>

    <section>
      <title>Audience</title>

      <para>Modeling in general is a complex process that refers to many
      activities such as data management, coding, output analysis, etc. This
      defines the type of use for a framework such as OMS3. Scientist may
      developing an operational model with a software engineer, a technician
      is preparing data to be used in the simulation by changing its format, a
      technical service provider might perform model calibrations to obtain a
      fitting parameter set, or a stakeholder is using a canned model
      simulation to get some answers to a problem. Also, a third party company
      might want to include the framework into their own application suite and
      needs to integrate it very low level.</para>

      <para>OMS3 can support many of those common activities. The table below
      shows different kinds of audiences specific in context to OMS as a
      framework supporting various modeling aspects. Other classifications
      exist <xref linkend="Rizzoli2008" />, Good Modeling practice).</para>

      <table>
        <title>Framework Audience</title>

        <tgroup cols="6">
          <thead>
            <row>
              <entry align="center">Framework User</entry>

              <entry align="center">Description</entry>

              <entry align="center">Expertise  </entry>

              <entry align="center">Activities</entry>

              <entry align="center">Product</entry>

              <entry align="center">Example</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><emphasis role="bold">System
              Integrator</emphasis></entry>

              <entry>integrates a model or modeling framework into a larger
              business application</entry>

              <entry>IT Infrastructure architectures, system design, OMS3
              Framework integration API</entry>

              <entry>Integrating the framework into large scale application
              using IDEs</entry>

              <entry>e.g. a web service that employs the framework</entry>

              <entry>software engineer, system integrator</entry>
            </row>

            <row>
              <entry><emphasis role="bold">Model Component
              Developer</emphasis></entry>

              <entry>developing software code</entry>

              <entry>OMS3 Annotations and component integration API</entry>

              <entry>Coding using an IDE and related build/test and version
              control tools</entry>

              <entry>Model/component executable</entry>

              <entry>Research scientist, software engineer, Domain
              expert</entry>
            </row>

            <row>
              <entry><emphasis role="bold">Simulation
              Developer</emphasis></entry>

              <entry>setting up a simulation for a specific use</entry>

              <entry>OMS simulation definitions, Model parameterization, data
              formats,</entry>

              <entry>Using simulation definitions for data provisioning and
              setup, calibration, uncertainty analysis and
              optimization</entry>

              <entry>A runnable simulation (e.g. calibrated parameter and data
              set) for a given area and problem.</entry>

              <entry>Research scientist, Technical Service Provider,</entry>
            </row>

            <row>
              <entry><emphasis role="bold">Simulation User</emphasis></entry>

              <entry>using a simulation to get an answer to a problem</entry>

              <entry>knowledge about the proper use of a simulation within a
              provided domain context</entry>

              <entry>Using the simulation with an application and selecting
              data sets / parameter to be used</entry>

              <entry>An quantitative answer to a problem</entry>

              <entry>Consultant, Farmer, Manager</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The are most likely overlaps of activities, since a framework user
      is usually involved in many activities.</para>
    </section>

    <section>
      <title>OMS 3.0 Feature Summary</title>

      <para>This handbook describes the most recent incarnation of OMS version
      3.0 (referred as OMS3). This version differs from previous versions in
      that the support for framework-based model development has widened in
      several respects. The modifications and enhancements respond to
      experience from the user community.</para>

      <para>What are the summarized features, improvements and characteristics
      of OMS3?</para>

      <orderedlist>
        <listitem>
          <para>OMS modeling is <emphasis
          role="bold">component-based</emphasis>.</para>

          <para>It aims for only minimal requirements to call a plain Java
          object a OMS3 component. Existing legacy classes are allowed to keep
          their identity, which means that once a component has been
          introduces into OMS3 it is still usable outside of OMS3. OMS 3.0 is
          <emphasis role="bold">non-invasive</emphasis>. It minimizes the
          burden on a component/model developer to build code into the
          framework by not imposing an API. There is almost no learning curve
          as existing Java/Fortran/C/C++ code does not have to be changed. The
          modeler does not have to learn and use framework data types, and
          does not have to comprehend communication patterns to parallelize
          the model. Most if not all previous modeling frameworks have
          contained these intrusive features, and OMS 3.0 represents a
          fundamental step to remove them.</para>
        </listitem>

        <listitem>
          <para>OMS is based on the <emphasis role="bold">Java
          platform</emphasis>.</para>

          <para>However it is inter operable with C,C++, and FORTRAN on all
          major operating systems and architectures. <emphasis
          role="bold">Language interoperability</emphasis>. OMS 3.0 moves from
          a source centric Java Native Interface (JNI) strategy focused on
          FORTRAN to a DLL centric Java Native Access (JNA) integration that
          now supports all versions of FORTRAN, C, and C++ on all major
          architectures in 32 and 64 bit. FORTRAN and C/C++ programmers can
          continue to use their respective tools to create components and then
          use one of the Java IDEs to annotate and assemble components into a
          model, create simulations for testing and validation, and package
          model instances for deployment.</para>
        </listitem>

        <listitem>
          <para>Components always execute <emphasis
          role="bold">multi-threaded</emphasis>.</para>

          <para>The default execution is multi-threaded. Sequential execution
          is just a specific case of multi-threaded execution where the data
          flow requires the sequential execution of components. If data flow
          allows it, components are being executed in parallel. No explicit
          thread coding is needed to make this happen. OMS models are
          <emphasis role="bold">data flow driven</emphasis>. The execution of
          components is driven by data flow dependencies. There is no
          explicit/manual control of an execution sequence of
          components.</para>
        </listitem>

        <listitem>
          <para>Simulations as defined as <emphasis
          role="bold">DSLs</emphasis>.</para>

          <para>OMS 3.0 adds a new tool set for model calibration, sensitivity
          and uncertainty analysis (such as GLUE, SCE, MOCOM, and others) to
          the package suite. A consistent user experience in simulations is
          provided also for existing types such as Ensemble Streamflow
          Prediction (ESP) and LUCA calibration.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Runtime flexibility</emphasis> for
          simulation execution</para>

          <para>Models can now be executed in different environments that
          scale from a notebook to a computing cluster or even a cloud such as
          Amazon’s Elastic Computing Cloud (EC2).</para>
        </listitem>

        <listitem>
          <para>Wide range of <emphasis role="bold">System
          Integration</emphasis> options and <emphasis role="bold">development
          flexibility</emphasis>.</para>

          <para>OMS3 can be integrated into almost any infrastructure at
          different framework integration levels. Models can now be developed
          with any Integrated Development Environment (IDE), that supports at
          least Java. The constraint to use the custom OMS IDE platform (with
          version 2.2) has been removed. Models can now be developed using all
          major Java IDEs such as Netbeans, Eclipse, or IntelliJ.</para>
        </listitem>
      </orderedlist>

      <para>How does is compare to its previous version OMS 2.2? It is easier
      to integrate OMS3 into an existing development process, it scales into
      multi-core, multiprocessor environments, it makes model development easy
      by its non-invasive nature. It lowers the burden for a modeler to take
      advantage of a modeling framework.</para>

      <para></para>
    </section>

    <section>
      <title>"Hello Modeler" - A first example</title>

      <para>Let's create a very simple model that demonstrates all the basics
      involved with OMS3. It simulates nothing numerically (we get to this
      later), it is rather the modeler’s variant of the usual "<code>Hello
      World</code>" example, which we will call “Hello Modeler.” Later, the
      examples will become more comprehensive. This example shows the two
      fundamental parts of modeling in OMS: Creating a</para>

      <orderedlist>
        <listitem>
          <para><emphasis role="bold">component and therefor a
          model</emphasis> and the executable code, and</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">a simulation</emphasis>, combining the
          model with input data sets and performing a simulation.</para>
        </listitem>
      </orderedlist>

      <section>
        <title>A First Model Component</title>

        <para>For the Java modelers components are developed as Java classes
        (For FORTRAN and C/C++ modelers, Section ???).</para>

        <para>We create a new Java class named <code>Component</code> and save
        it as <code>Component.java</code>. The source file needs to be
        compiled with <code>javac</code> using an IDE or just the command line
        compiler. Section ??? explains the details for setting up a
        development environment and the <code>classpath</code>. Now, we have
        created the model source code and have compiled it.</para>

        <para>As seen here, a component is a piece of plain Java code that is
        annotated with OMS specific meta data. Meta data annotations (shown in
        bold) are a very easy to add and turn plain objects into components to
        be used within the modeling framework.</para>

        <para><example>
            <title>First Component (Component.java)</title>

            <para><blockquote>
                <programlisting> package helloworld;

 import <emphasis role="bold">oms3.annotations.*</emphasis>;              // 1.

 /**
  * First component 
  */
 public class Component {

    <emphasis role="bold">@Role(Role.PARAMETER)</emphasis>                // 2.
    <emphasis role="bold">@In </emphasis>public String message;           // 3.

    <emphasis role="bold">@Execute</emphasis>                             // 4.
    public void run() {
        System.out.println(message);
    }
 }
</programlisting>

                <para><orderedlist>
                    <listitem>
                      <para>Adding the <code>oms3.annotation</code> package to
                      the component associates it with the OMS framework. This
                      package defines OMS annotation types.</para>
                    </listitem>

                    <listitem>
                      <para>The <code>@Role</code> annotation gives its
                      following field declaration the 'Parameter'
                      identity.</para>
                    </listitem>

                    <listitem>
                      <para>The OMS <code>oms3.annotations</code> package
                      defined <code>@In</code> annotation tags the field, that
                      provides input to the component, a message as a plain
                      String in the case above. Note that the field needs to
                      be public like the class.</para>
                    </listitem>

                    <listitem>
                      <para>The annotation <code>@Execute</code> indicates the
                      entry point for model execution. The run method now gets
                      called when OMS will execute the component. The method
                      name is irrelevant here, the annotation
                      <code>@Execute</code> points to it.</para>
                    </listitem>
                  </orderedlist></para>
              </blockquote></para>
          </example>The rest of the class is plain Java code. The class has to
        be public as shown above.</para>
      </section>

      <section>
        <title>A First Simulation</title>

        <para>As a next step we need to create the simulation to parameterize
        and run the just created model. Create a text file called
        <code>hello.sim</code> with the following content. We define all the
        resource elements for the simulation, which are assembled in a
        hierarchical way.</para>

        <para><example>
            <title>First Simulation (hello.sim)</title>

            <para><blockquote>
                <programlisting> sim(name:"Hello") {                            // 1.

    resource "$work/dist/*.jar"                 // 2.

    model(classname:"helloworld.Component") {   // 3.

       parameter {                              // 4.

             message " Hello Modeler ..."       // 5.

       }
    }
 }
</programlisting>

                <para><orderedlist>
                    <listitem>
                      <para>The element <code>sim</code> defines a simple
                      simulation that runs a model in a single run. It has the
                      name '<code>Hello</code>" as shown. In curly brackets
                      there are all the resources for this simulation.</para>
                    </listitem>

                    <listitem>
                      <para>First, the <code>resource</code> element lists all
                      files, belonging to this simulation, all
                      <code>jar</code> files in the dist folder in the work
                      directory. The value of work might be passed as a system
                      property. The jar files listed here by wild card
                      expansion will be put into the model's
                      <code>classpath</code>.</para>
                    </listitem>

                    <listitem>
                      <para>The model resource element specifies the class
                      that represents the top level component. The class name
                      is full qualified, it must include the package name. The
                      class <code>helloworld.Component</code> was developed in
                      the previous section.</para>
                    </listitem>

                    <listitem>
                      <para>The model contains the <code>parameter</code>,
                      which should be passed from the simulation to the model
                      on startup. In out example the <code>@In</code> field
                      <code>message</code> gets the value <code>" Hello
                      Modeler ..."</code> as input. The name as listed here in
                      this simulation must exactly match the name of the field
                      in the model.</para>
                    </listitem>
                  </orderedlist></para>

                <para></para>
              </blockquote></para>
          </example></para>

        <para>The <code>sim</code> element is a part of the OMS3 DSL for
        modeling. This DSL provides a simple descriptive syntax for
        constructing model applications for different model to calibrate
        parameters, evaluate uncertainty and parameter sensitivity, run model
        ensembles in a (cloud) cluster, or just simply execute.</para>

        <para>With the simulation developed, we are ready to run the model.
        The OMS3 console provides the easiest way to load the simulation,
        execute it and look at the result. The following chapters and sections
        will discuss more options to run a simulation.</para>

        <para>Start the console by clicking the <inlinemediaobject>
            <imageobject>
              <imagedata fileref="images/launch.gif"></imagedata>
            </imageobject>
          </inlinemediaobject> button as it provided at</para>

        <para><blockquote>
            <para><sidebar>
                <para><code> http://oms.javaforge.com</code></para>
              </sidebar><note>
                <para>You need to have some recent Java 1.6 Runtime
                Environment installed to launch the application. Download it
                from <link
                xlink:href="http://java.sun.com/javase/downloads">http://java.sun.com/javase/downloads</link>.</para>
              </note></para>
          </blockquote>With the console running, open the file
        <code>hello.sim</code> (you can also use it to write and create it in
        the first place). It shows as tab in the upper part of the
        screen.</para>

        <para><figure>
            <title>Running the Simulation 'Greeting' using the OMS3
            Console</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/Handbook/Slide1.PNG"
                           scale="75"></imagedata>
              </imageobject>
            </mediaobject>
          </figure></para>

        <para>Now hit the Run button to execute the simulation. The expected
        output appears in the lower part of the screen. The string
        '<code>Hello Modeler</code>' is passed from the simulation to the
        model component and is printed out at the lower part of the
        console.</para>

        <para>Congratulations, the first model and simulation in OMS3 is
        implemented.</para>

        <para></para>

        <bibliography>
          <bibliomixed xml:id="Argent2004">Argent, R.M. An overview of model
          integration for environmental applications—components, frameworks
          and semantics Environmental Modelling &amp; Software, Volume 19,
          Issue 3, Pages 219-234, Mar 2004</bibliomixed>

          <bibliomixed xml:id="Bernholdt2006">Bernholdt D.E. and Allan B.A.
          and Armstrong R. and Bertrand F. and Chiu K. and Dahlgren T.L. and
          Damevski K. and Ewasif W.R. and Epperly T.G.W and Govindaraju M. and
          Katz D.S. and Kohl J.A. and Krishnan M. and Kumfert G. and Larson
          J.W. and Lefantzi S. and Lewis M.J. and Malony A.D. and McInnes L.C.
          and Nieplocha J. and Norris B. and Parker S.G. and Ray, J. Shende
          and S. Windus, T.L. and Zhou, S. "A Component Architecture for High
          Performance Scientific Computing", Journal of High Performance
          Computing Applications, ACTS Collection Special Issue, May
          2006</bibliomixed>

          <bibliomixed xml:id="Collins2005">Collins, N., G. Theurich, C.
          DeLuca, M. Suarez, A. Trayanov, V. Balaji, P. Li, W. Yang, C. Hill,
          and A. da Silva. Design and Implementation of Components in the
          Earth System Modeling Framework. International Journal of High
          Performance Computing Applications, Volume 19, Number 3, pp.
          341-350. 2005</bibliomixed>

          <bibliomixed xml:id="David2002">David O., S.L. Markstrom, K.W.
          Rojas, L.R. Ahuja and I.W. Schneider, The Object Modeling System.
          In: L.R. Ahuja, L. Ma and T.A. Howell, Editors, Agricultural System
          Models in Field Research and Technology Transfer, Lewis Publishers,
          Boca Raton (2002), pp. 317–330.</bibliomixed>

          <bibliomixed xml:id="Gregersen2007">Gregersen, J.B., Gijsbers,
          P.J.A., and Westen, S.J.P., (2007). Open Modelling Interface.
          Journal of Hydroinformatics, 9 (3), 175-191. 2007</bibliomixed>

          <bibliomixed xml:id="Moore2007">Moore, A.D., D.P. Holzworth, N.I.
          Herrmann, N.I. Huth, M.J. Robertson, The Common Modelling Protocol:
          A hierarchical framework for simulation of agricultural and
          environmental systems. Agricultural Systems, Volume 95, Issues 1-3,
          Dec 2007, Pages 37-48</bibliomixed>

          <bibliomixed xml:id="Peckham2008">Peckham, S: CSDMS Handbook of
          Concepts and Protocols: A Guide for Code Contributors,
          http://csdms.colorado.edu/wiki/Help:Tools_CSDMS_Handbook,
          2008</bibliomixed>

          <bibliomixed xml:id="Richardson2006">Richardson, C: POJOs In Action.
          Manning Publications. Jan 2006</bibliomixed>

          <bibliomixed xml:id="Rizzoli2008">Rizzoli, A.E., Leavesley, G.H.,
          Ascough II, J.C., Argent, R.M. Athanasiadis, I.N., Brilhante, V.C.,
          Claeys, F.H., David, O., Donatelli, M., Gijsbers, P., Havlik, D.,
          Kassahun, A., Krause, P., Quinn, N.W., Scholten, H., Sojda, R.S.,
          and Villa, F. 2008. Chap. 7: Integrated modelling frameworks for
          environmental assessment and decision support. In: Environmental
          Modelling and Software and Decision Support – Developments in
          Integrated Environmental Assessment (DIEA), Vol. 3, A.J. Jakeman,
          A.A. Voinov, A.E. Rizzoli, and S.H. Chen (Eds.), pp. 101-118.
          Elsevier, The Netherlands.</bibliomixed>

          <bibliomixed xml:id="Rizzoli2005">Rizzoli, A.E., Svensson, M.G.E.,
          Rowe, E.C., Donatelli, M., Muetzelfeldt, R., van der Wal, T., van
          Evert, F.K., Villa, F.:Modelling Framework (SeamFrame) requirements.
          SEAMLESS report no. 6, Dec 2005</bibliomixed>
        </bibliography>
      </section>
    </section>
  </preface>

  <chapter>
    <title>Installation and Setup</title>

    <para>OMS3 is based on the Java Platform, therefor it is usable in all
    major operating systems. Examples are Windows, Linux, and MacOS, or
    OpenSolaris. Any environment supporting Java 1.6 can run OMS3. Different
    Java versions are available for 32 and 64 bit architectures and processor
    types. All of those Java versions are suitable to run OMS3 and its models.
    Please be aware that models using native systems components from a DLL or
    shared object are not binary compatible across platforms, however pure
    Java models are.</para>

    <section>
      <title>Required Software</title>

      <para>Download and install Java 1.6. The JDK 6 (Java SE Development Kit)
      is required for OMS3 model development, the Java 1.6 Runtime Environment
      is sufficient. To obtain latest JDK, download it from:</para>

      <blockquote>
        <sidebar>
          <para><code>http://java.sun.com/javase/downloads</code></para>
        </sidebar>
      </blockquote>

      <para>Follow the installation instructions for your operating system
      during installation. Make sure the commands <code>java</code> and
      <code>javac</code> are accessible in the PATH when using the command
      line interface.</para>
    </section>

    <section>
      <title>Install and Setup OMS3</title>

      <para>There are different options for installing OMS3 which are very
      much driven by its use case scenario. The OMS Console allows to run en
      existing model, but does not support model development like an IDE.
      However an IDE will give you the option to develop components by
      editing, compiling and packaging them.</para>

      <section>
        <title>Modeling Console</title>

        <para>Install the JRE or JDK, launch the OMS3 Console
        <inlinemediaobject>
            <imageobject>
              <imagedata fileref="images/launch.gif"></imagedata>
            </imageobject>
          </inlinemediaobject> from:</para>

        <para><blockquote>
            <sidebar>
              <para><code>http://oms.javaforge.com</code></para>
            </sidebar>
          </blockquote></para>

        <para>You can test the successful installation of all the packages by
        executing this line in the OMS 3 Console:</para>

        <para><figure>
            <title>Modeling Console</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/Handbook/Slide21.PNG" role=""
                           scale="75"></imagedata>
              </imageobject>
            </mediaobject>
          </figure></para>

        <para>The <code>oms3.SimBuilder</code> class has the method
        <code>checkInstall()</code> that verifies the presence and correct
        version of required software such as Java. In the OMS3 Console, add
        the same command above and hit <code>Ctrl+R</code> (Run).</para>

        <para></para>
      </section>

      <section>
        <title>Integrated Development Environments (IDE)</title>

        <para>You may also download a free Java IDE such as the Netbeans IDE,
        Eclipse or IntelliJ. Those IDEs might also bundle Groovy language
        support out of the box (check the IDE, and download Groovy from
        http://groovy.codehaus.org. Any environment that supports Java at
        least will do it.</para>

        <para>For any IDE configuration, the OMS jar needs to be downloaded.
        It is available as a zip file, containing the oms library
        (<code>oms3-all.jar</code>), the sources and the API documentation
        .</para>

        <para>Download the OMS3 distribution file
        <filename>oms-3.x.zip</filename></para>

        <blockquote>
          <sidebar>
            <para><code> http://oms.javaforge.com/downloads/oms3</code></para>
          </sidebar>
        </blockquote>

        <para>To use OMS, you need to add the file
        <filename>oms3.x-all.jar</filename> to your IDEs
        <code>CLASSPATH</code>. There are different ways to do this depending
        on the development tool you are using. Please follow the IDE
        instructions on how to add external libraries to a development
        project.</para>
      </section>

      <section>
        <title>Command Line Interface (CLI)</title>

        <para>The OMS3 command line interface allows the execution of a
        simulation at the command line. It is part of the
        <code>oms3-all.jar</code> and can be easily accessed by executing the
        jar file itself:</para>

        <para><blockquote>
            <para><programlisting>$ java -jar oms-all.jar
usage: java -jar oms-all.jar [-r|-e|-d|-a|-s] &lt;simfile&gt;
 CLI access to simulations.
           -r   run the simfile
           -e   edit parameter in simfile
           -d   document the simfile
           -a   run the simfile analysis
           -s   create SHA digest
$ </programlisting></para>
          </blockquote></para>

        <para><note>
            <para>The command line executes <code>oms-all.jar</code>, located
            in the same directory. Also, the library
            <code>groovy-all-1.6.x.jar</code> needs to be in the same
            directory (download the groovy binary distribution from <link
            xlink:href="http://groovy.codehaus.org">http://groovy.codehaus.org</link>,
            the <code>embeddable</code> directory contains this library)
            .</para>
          </note>To run a simulation use a command such as:</para>

        <blockquote>
          <para><programlisting>$java -jar oms-all.jar -Dwork="/tmp/prms2008" -r efc.sim</programlisting></para>
        </blockquote>

        <para>It is also possible to specify the CLI class directly to account
        for different versions of the libraries:</para>

        <blockquote>
          <para><programlisting>$java -cp "oms-all.jar;groovy-all-1.6.5.jar" oms3.CLI -r efc.sim</programlisting></para>
        </blockquote>

        <para>By providing the<code> -D</code> argument to the Java command
        line, system properties can be set for the simulation as shown
        above.</para>
      </section>
    </section>

    <section>
      <title>References</title>

      <itemizedlist>
        <listitem>
          <para>Java Development Kit version 6
          [http://java.sun.com/javase]</para>
        </listitem>

        <listitem>
          <para>Netbeans IDE [http://netbeans.org]</para>
        </listitem>

        <listitem>
          <para>Eclipse IDE [http://eclipse.org]</para>
        </listitem>

        <listitem>
          <para>Groovy language specification and Development Kit
          [http://groovy.codehaus.org]</para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter>
    <title>Developing Components</title>

    <para>This chapter is designed as a step by step tutorial. It guides a
    user through the process of creating and testing of components, their
    integration into more complex components (models), the data provisioning
    of models, and finally their deployment into various environments.</para>

    <figure>
      <title>General Component Schematic</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/Handbook/Slide5.PNG"
                     scale="75"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>A component representing a certain conceptual function in a
    simulation is the foundation for each model. A hydrological model for
    example usually needs components for (1) handling input/output, (2)
    representing processes of a hydrological system such as precipitation,
    interception and runoff, and (3) realizing general data processing
    functions such as reading climate data or parameter sets. Ideally, the key
    to a proper model design based on components is a clean "separation of
    concerns" in a model. Modeling in OMS and most other frameworks must
    answer the question: “what qualifies a part of a model to become a
    component?”</para>

    <itemizedlist>
      <listitem>
        <para>A component realizes a certain and mostly <emphasis
        role="bold">one conceptual function</emphasis> in a model. It
        represents a physical process, a management action, a data gathering
        step, or the presentation of results to the user interface. Such
        functions need to be identified and separated from each other. Each of
        these will result in a component.</para>
      </listitem>

      <listitem>
        <para>An identified component <emphasis role="bold">can be fully
        described</emphasis> regarding its function, data requirements and
        data offerings. Therefore, the specification and later implementation
        of a component will be done with respect to its anticipated simulation
        context, but a tight dependency to this context should be avoided.
        Later during development, the component will be tested standalone
        using a test harness to validate the design specification.</para>
      </listitem>

      <listitem>
        <para>Components that model important functions and processes that
        recur across models and modeling projects should be <emphasis
        role="bold">designed for portability and re-use</emphasis>. Some
        additional investment is required to produce this design, but payoff
        can be substantial. Widely used components would be similar to widely
        referenced science in technical papers.</para>
      </listitem>

      <listitem>
        <para>Conceptually, models and sub-models (or modules) are <emphasis
        role="bold">aggregated components</emphasis>, and conversely
        components often are models in some form. Therefore modeling
        architecture is a question of granularity and depends on the business
        needs of the customer. The model can be large, designed to address
        many business requirements comprehensively, or it can be small, a
        relatively simple service deployed as part of a business application
        work flow.</para>
      </listitem>
    </itemizedlist>

    <para>A model also should be architected so that new science can be
    incorporated through time. This is best achieved by architecting the model
    to contain well documented components that can be removed and replaced
    with updated science. This also is a question of granularity. Sometimes it
    will be necessary to replace a module, other times a simple component. And
    the design should take into account that models often should be built with
    a common code base that permits contributions and updates from several
    modelers.</para>

    <para>By analyzing simulation models a classification of potential
    components can be made.</para>

    <variablelist>
      <varlistentry>
        <term><emphasis role="bold">Scientific components</emphasis></term>

        <listitem>
          <para>... Implement methods and equations to estimate some physical
          phenomenon. Examples would be a component estimating amount of water
          evaporated from a certain land cover into, a component predicting
          the soil loss due to wind erosion, etc. Such components usually
          apply some mathematical function.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis role="bold">Scientific utility
        components</emphasis></term>

        <listitem>
          <para>... Support the analysis of models by providing statistical
          analysis methods such as descriptive statistics, frequency analysis,
          etc. Distribution generator components are used to provide data to
          scientific components.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis role="bold">Control components</emphasis></term>

        <listitem>
          <para>... Are responsible for managing the execution of a model. A
          Runge-Kutta Integration component, a Time management, or a
          Convergence criteria component are examples for this.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis role="bold">Data Input/Output
        Components</emphasis></term>

        <listitem>
          <para>... Are providing data to other components in a simulation
          model. Such components could handle data transfer from databases or
          files to the model. Visualization components like graphs or
          spreadsheets are also falling under this category.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Components are the basic building blocks of models in OMS.
    Components can be simple or very complex, depending on the scope and the
    problem domain. The Figure below shows different paths to create a
    component the can be used within a OMS model.</para>

    <figure>
      <title>Component Development</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/Handbook/Slide2.PNG"
                     scale="75"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>There are 4 identified phases of development that might not all
    apply in real world. It depends on the existence or quality of the
    existing code, the skills of the developer, and the available tools to
    support and automate this process.</para>

    <para>The first two phases (Identify and Refactor) focus on the
    identification and improvement of existing code, where as the two last
    steps adjust the code to OMS.od/projects/oms3.prj.</para>

    <variablelist>
      <varlistentry>
        <term>1) Identify needed simulation approaches.</term>

        <listitem>
          <para>In this first step the simulation code should be
          identified.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>2) Refactor existing code or prototype new solutions as
        needed.</term>

        <listitem>
          <para>Refactoring refers to the concept of improving the design of
          existing code without changing its behavior. Refactoring addresses
          the fact that code is (usually) written without extensive reuse
          outside of its original scope in mind. There are recommendations,
          methods and tools available to support such a process.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>3) Modularize the code.</term>

        <listitem>
          <para>This step closely follows the previous one but aims at
          creation of self contained modules or software units. The result the
          of the process is a generic component free from hidden
          dependencies.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>4) Annotate the code.</term>

        <listitem>
          <para>Finally the modeler annotates the component, the final step to
          making it OMS-compliant. Annotation provides the modeler, the
          modeling team, and external users meta data about the component to
          aid in the modeling process. Annotations also become important when
          the component or model is used in customer business applications
          that require validation and certification of the science.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>At the end of this process you have produced a component that can be
    used within OMS, and other frameworks.</para>

    <note>
      <para>All native components remain intact, and still can be used in
      their original context (if refactored right).</para>
    </note>

    <para></para>

    <para>The next sections will introduce component development of Java
    components step by step. Section ??? will demonstrate adjusting existing
    legacy components so that they can be used with OMS.</para>

    <section>
      <title>Example: Developing Components for a Monthly Water Balance
      Model</title>

      <para>Monthly water-balance models have been used as a means to examine
      the various components of the hydrological cycle (for example,
      precipitation, evapotranspiration, and runoff). Such models have been
      used to estimate the global water balance to develop climate
      classifications to estimate soil-moisture storage, runoff, and
      irrigation demand ; and to evaluate the hydrological effects of climate
      change <xref linkend="McCabe2007" />.</para>

      <para>The model, referred to as the Thornthwaite water-balance program,
      can be used as a research tool, an assessment tool, and as a tool for
      classroom instruction.</para>

      <para>The water-balance model (<xref linkend="Fig_WBM" />) analyses the
      allocation of water among various components of the hydrological system
      using a monthly accounting procedure based on the methodology originally
      presented by Thornthwaite <xref linkend="Thornthwaite1948" />,<xref
      linkend="Mather1978" />. Inputs to the model are mean monthly
      temperature (T, in degrees Celsius), monthly total precipitation (P, in
      millimeters), and the latitude (in decimal degrees) of the location of
      interest. The latitude of the location is used for the computation of
      day length, which is needed for the computation of potential
      evapotranspiration (PET). The model is referred to as the Thornthwaite
      model. A discussion of the individual process components of the water
      balance can be found in <xref linkend="McCabe2007" /></para>

      <figure>
        <title xml:id="Fig_WBM">Thornthwaite Monthly Water Balance Model
        Schematic</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Handbook/Slide3.PNG"
                       scale="75"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>This model may serve as an example to create an component based
      implementation. The processes are simple and straightforward, however
      its structure and general setup is typical for many hydrological and
      environmental models. The following sections will explain the component
      creation of based on the processes, their integration into a full model,
      and finally the provisioning of data, simulation setup and output
      analysis.</para>
    </section>

    <section>
      <title>Developing a PET Java Component</title>

      <para>The very basic building block of a simulation model is a component
      as stated earlier. It implements usually one purpose within a larger
      model. The concepts are already stated as physical processes of the
      model. Hence, monthly PET computation should be implemented as a
      component.</para>

      <para>Monthly PET is estimated from mean monthly temperature (T) and is
      defined as the water loss from a large, homogeneous, vegetation-covered
      area that never lacks water <xref linkend="Thornthwaite1948" />,<xref
      linkend="Mather1978" /> . Thus, PET represents the climatic demand for
      water relative to the available energy. In this water balance, PET is
      calculated by using the Hamon equation <xref
      linkend="Hamon1961" />:</para>

      <equation>
        <title>Potential Evapotranspiration (Hamon)</title>

        <m:math display="block">
          <m:mrow>
            <m:msub>
              <m:mi>PET</m:mi>

              <m:mi>Hamon</m:mi>
            </m:msub>

            <m:mo>=</m:mo>

            <m:mrow>
              <m:mi>13.97</m:mi>

              <m:mo>×</m:mo>

              <m:mrow>
                <m:mi>d</m:mi>

                <m:mo>×</m:mo>

                <m:mrow>
                  <m:msup>
                    <m:mi>D</m:mi>

                    <m:mi>2</m:mi>
                  </m:msup>

                  <m:mo>×</m:mo>

                  <m:msub>
                    <m:mi>W</m:mi>

                    <m:mi>t</m:mi>
                  </m:msub>
                </m:mrow>
              </m:mrow>
            </m:mrow>
          </m:mrow>
        </m:math>
      </equation>

      <para>where PET<subscript>Hamon</subscript> is PET in millimeters per
      month, <emphasis>d</emphasis> is the number of days in a month,
      <emphasis>D</emphasis> is the mean monthly hours of daylight in units of
      12 hours, and
      <emphasis>W</emphasis><emphasis><subscript>t</subscript></emphasis> is a
      saturated water vapor density term:</para>

      <equation>
        <title>Saturated Water Vapor Density</title>

        <m:math display="block">
          <m:mrow>
            <m:msub>
              <m:mi>W</m:mi>

              <m:mi>t</m:mi>
            </m:msub>

            <m:mo>=</m:mo>

            <m:mfrac>
              <m:mrow>
                <m:mi>4.95</m:mi>

                <m:mo>×</m:mo>

                <m:msup>
                  <m:mi>e</m:mi>

                  <m:mrow>
                    <m:mi>0.062</m:mi>

                    <m:mo>×</m:mo>

                    <m:mi>T</m:mi>
                  </m:mrow>
                </m:msup>
              </m:mrow>

              <m:mi>100</m:mi>
            </m:mfrac>
          </m:mrow>
        </m:math>
      </equation>

      <para>where <emphasis>T</emphasis> is the mean monthly temperature in
      degree Celsius <xref linkend="Hamon1961" />.</para>

      <para></para>

      <para><emphasis role="bold">Step 1: Coding the
      Equation</emphasis></para>

      <para>As a first task the core equation code necessary for the
      computation of <code>pet</code> is created. The equations above are
      translated into valid JAVA statements. All variables that are either
      required as input or provided as output are shown in bold.</para>

      <para><example>
          <title>Hamon equations (code fragment)</title>

          <para><blockquote>
              <programlisting>   ...
   int[] DAYS = {
        31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31        // 1.
   };

   ...
   double Wt = 4.95 * Math.exp(0.062 * <emphasis role="bold">temp</emphasis>) / 100.0;         // 2.
   double D2 = (<emphasis role="bold">daylen</emphasis> / 12.0) * (<emphasis
                  role="bold">daylen</emphasis> / 12.0);             // 3.
   double d = DAYS[<emphasis role="bold">month</emphasis>]
   double <emphasis role="bold">pet</emphasis> = 13.97 * d * D2 * Wt;                          // 4.
   ...

</programlisting>

              <orderedlist>
                <listitem>
                  <para>An int array holds the number of days per month, used
                  in 3.</para>
                </listitem>

                <listitem>
                  <para>Compute <code>Wt</code>, the <code>Math</code> class
                  provides the <code>exp()</code> method.</para>
                </listitem>

                <listitem>
                  <para>Compute <code>daylen</code> input in units of 12
                  hours.</para>
                </listitem>

                <listitem>
                  <para>The final <code>pet</code> calculation.</para>
                </listitem>
              </orderedlist>

              <para>Note that the data type <code>double</code> is a 8-byte
              floating point data type in Java</para>
            </blockquote></para>
        </example>The code above is valid Java code implementing the needed
      equations for Hamon, however is has to be structured as valid JAVA
      source code.</para>

      <para><emphasis role="bold">Step 2: Creating the Class</emphasis></para>

      <para>A JAVA class has to be created, its content is shown below. Use a
      Java IDE or a text editor to create this source. Note that the class
      <code>HamonET</code> has to be stored in a file
      <code>HamonET.java</code> within the folder <code>thornthwaie</code>
      (package name) according to the Java language specification. Common Java
      IDE provide very good support for handing those tasks.</para>

      <para><example>
          <title>HamonET Class (HamonET.java)</title>

          <para><blockquote>
              <programlisting> <emphasis role="bold">package</emphasis> thorthwaite;                                      // 1.

 <emphasis role="bold">import</emphasis> java.util.Calendar;                                // 2.
 import java.lang.Math;

 <emphasis role="bold">public class HamonET</emphasis> {                                    // 3.         
    
    <emphasis role="bold">static final </emphasis>int[] DAYS = {                            // 4.
        31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    };
    
    public double temp;                                    // 5.
    public double daylen;
    public <emphasis role="bold">Calendar</emphasis> time; 
                                     
    public double pet;

    <emphasis role="bold">public void compute() </emphasis>{                                // 6.
        if (temp &lt;= -1.0) {
            pet = 0.0;
            return;
        }
        int month = time.get(Calendar.MONTH);              // 7.
        double Wt = 4.95 * Math.exp(0.062 * temp) / 100.;
        double D2 = (daylen / 12.0) * (daylen / 12.0);
        pet = 13.97 * DAYS[month] * D2 * Wt;
        if (pet &lt; 0.0) {
            pet = 0.0;
        }
    }
 }</programlisting>

              <orderedlist>
                <listitem>
                  <para>The package <code>thornthwaite</code> provides a 'name
                  space' for this class. A name space is an arbitrary named
                  container providing for related classes. An alternative name
                  could be '<code>et</code>' to hold related
                  evapotranspiration classes.</para>
                </listitem>

                <listitem>
                  <para>The <code>import</code> statements are introducing
                  core Java utility classes into HamonET.</para>
                </listitem>

                <listitem>
                  <para>The <code>class</code> declaration defines the HamonET
                  class, which has to be <code>public</code>.</para>
                </listitem>

                <listitem>
                  <para>The <code>DAYS</code> array is declared within the
                  class as '<code>static final</code>' which makes its content
                  not modifiable and visible for all instances of
                  <code>HamonET</code>.</para>
                </listitem>

                <listitem>
                  <para>The field declaration section of the class lists the
                  Input/Output fields. Note that time is declared as a
                  <code>Calendar</code> object, a class provided by the Java
                  API.</para>
                </listitem>

                <listitem>
                  <para>The method compute encapsulated the Hamon equations.
                  It is declared <code>public</code> and <code>void</code>,
                  which means no return type. There are also no arguments for
                  this method.</para>
                </listitem>

                <listitem>
                  <para>The actual month is obtained from the time object.
                  Note that the return value is zero-based, which makes
                  <code>month</code> usable as index for the <code>DAYS</code>
                  array.</para>
                </listitem>
              </orderedlist>
            </blockquote></para>
        </example>Up to this point we have created a class that is a valid
      Java class. This is also being referred as a POJO (Plain old Java
      Object).</para>

      <para><emphasis role="bold">Step 3: Creating the OMS3
      Component</emphasis></para>

      <para>Just a very little work is required, to turn the
      <code>HamonET</code> Java class into an OMS3 component. For a developer
      it mainly means that the existing elements that are important for (i)
      data flow and (ii) code processing as developed in the previous step
      have to be <emphasis>annotated</emphasis>. No other changes are required
      in this example. Annotations are provided by the OMS3 core
      library.</para>

      <para><example>
          <title>Annotated Component for Execution (HamonET.java)</title>

          <para><blockquote>
              <programlisting>package thornthwaite;

<emphasis role="bold">import oms3.annotations.*;</emphasis>                                     // 1.
import java.util.Calendar;
import java.lang.Math;

 public class HamonET {
    // number of days per months
    final static int[] DAYS = {
        31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    };
    
    <emphasis role="bold">@In</emphasis> public double temp;                                    // 2.
    <emphasis role="bold">@In</emphasis> public double daylen;
    <emphasis role="bold">@In</emphasis> public Calendar time;

    <emphasis role="bold">@Out</emphasis> public double pet;                                    // 3.

    <emphasis role="bold">@Execute</emphasis>                                                   // 4.
    public void compute() {
         if (temp &lt;= -1.0) {
            pet = 0.0;
            return;
        }
        int month = time.get(Calendar.MONTH);              
        double Wt = 4.95 * Math.exp(0.062 * temp) / 100.;
        double D2 = (daylen / 12.0) * (daylen / 12.0);
        pet = 13.97 * DAYS[month] * D2 * Wt;
        if (pet &lt; 0.0) {
            pet = 0.0;
        }
    }
 }
</programlisting>

              <orderedlist>
                <listitem>
                  <para>Add the import statement for including all OMS3
                  annotations into this class. The package
                  <code>oms3.annotations</code> contains them all. Section ???
                  discusses them in detail.</para>
                </listitem>

                <listitem>
                  <para>Annotate the fields which serve as input to all
                  equations in HamonET with <code>@In</code>. Each field has
                  to have its own annotation which preceded the field. Note
                  that the field can be declared public, however it is not
                  required.</para>
                </listitem>

                <listitem>
                  <para>Annotate the fields which serve as output to all
                  equations in HamonET with <code>@Out</code>.</para>
                </listitem>

                <listitem>
                  <para>Annotate the main computational method of this class
                  with <code>@Execute</code>. As a requirement, this method
                  must have no arguments, must be public, and no
                  arguments.</para>
                </listitem>
              </orderedlist>
            </blockquote></para>
        </example>Now we turned the <code>HamonET</code> class into a OMS3
      component. It is in fact still a POJO that still can be used as such
      outside of the framework, as long as the OMS3 annotations are put into
      the <code>CLASSPATH</code>.</para>

      <para>The conceptual schematic of the HamonET component shows Figure
      ???</para>

      <figure>
        <title>HamonET Component Schematic</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Handbook/Slide4.PNG"
                       scale="75"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The component is now fully functional in OMS3 and ready to go into
      a model for execution. However, OMS3 offers more annotations that enrich
      the component for</para>

      <orderedlist>
        <listitem>
          <para>Documentation and archival,</para>
        </listitem>

        <listitem>
          <para>Robustness improvement due to data verification, and</para>
        </listitem>

        <listitem>
          <para>Later Traceability of simulation results.</para>
        </listitem>
      </orderedlist>

      <para>The following adds the annotations for those aspects.</para>

      <para><emphasis role="bold">Step 4: Improving the OMS3
      Component</emphasis></para>

      <para>The <code>oms3.annotations</code> package contains a rich set of
      annotations that are optional for core component execution but should be
      good practice in order to provide for a well rounded set of context
      information. Since annotations are being used, this context information
      is very much attached to the source code. Therefore, it will be always
      in sync with the source.</para>

      <para>Context information can be attached to the (i) whole component and
      (ii) the <code>In/Out</code> fields as shown below.</para>

      <para><example>
          <title>Complete Annotated Component (HamonET.java)</title>

          <para><blockquote>
              <programlisting> package thornthwaite;

 import oms3.annotations.*;                                     
 import java.util.Calendar;
 import java.lang.Math;

<emphasis role="bold"> @Description                                                        // 1.
    ("Hamon Potential Evapotranspiration." +
    "Climatic demand for water relative to the available energy," +
    " after Hamon.")
 @Author
    (name= "Jo Scientist", contact= "jos@research-org.edu")
 @Keywords
    ("Hydrology, Potential Evapotranspiration")
 @Bibliography
    ("Hamon, W.R., 1961, Estimating potential evapotranspiration. " +
     "Journal of the Hydraulics Division, " +
     "Proceedings of the American Society of Civil Engineers, "
     "v.87, p.107–120.")
 @SourceInfo
    ("$HeadURL: http://svn.javaforge.com/svn/oms/branches/ +
          oms3.prj.thornthwaite/src/tw/HamonET.java $")
 @Status
    (Status.DRAFT)
 @VersionInfo
    ("$Id: HamonET.java 319 2009-08-20 17:34:32Z odavid $")
 @License
    ("http://www.gnu.org/licenses/gpl-2.0.html")
</emphasis>
 public class HamonET {
    // number of days per months
    final static int[] DAYS = {
        31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    };

    <emphasis role="bold">@Description("Temperature")                                    // 2.
    @Unit("C")</emphasis>
    @In double temp;                                           
    
    <emphasis role="bold">@Description("Day length in hours.")
    @Range(min=9, max=15)</emphasis>
    @In double daylen;

    <emphasis role="bold">@Description("Current time")</emphasis>
    @In Calendar time;

    <emphasis role="bold">@Description("Potential ET")
    @Unit("mm/month")
    @Range(min=0.0)</emphasis>
    @Out public double pet;                                    

    @Execute                                                   
    public void compute() {
         if (temp &lt;= -1.0) {
            pet = 0.0;
            return;
        }
        int month = time.get(Calendar.MONTH);              
        double Wt = 4.95 * Math.exp(0.062 * temp) / 100.;
        double D2 = (daylen / 12.0) * (daylen / 12.0);
        pet = 13.97 * DAYS[month] * D2 * Wt;
        if (pet &lt; 0.0) {
            pet = 0.0;
        }
    }
 }
</programlisting>

              <orderedlist>
                <listitem>
                  <para>Component annotations for documentation, source code
                  repository references, literature references, development
                  status information and licensing.</para>
                </listitem>

                <listitem>
                  <para>Field annotations for documentation, unit
                  specification and range constraints.</para>

                  <para>All annotations are explained in detail in Appendix
                  ???.</para>
                </listitem>
              </orderedlist>
            </blockquote></para>
        </example>The component as shown in Step 4 is very well annotated. All
      code and meta information resides in one source file. This has the great
      advantage that a metadata/documentation context is always directly
      attached to the source code. Such an approach is always preferred. I
      some cases it is necessary to separate the metadata/documentation aspect
      from the component source. If the component is only available in its
      compiled form (as POJO), no source code is available, it can still be
      annotated and used as a OMS3 component.</para>

      <para>Lets suppose we have the Java class as shown in step 2 only
      available as compiled <code>.class</code> or <code>.jar</code> file
      (executable binary format). By creating an additional class named
      <code>HamonETCompInfo.java</code>, the compiled
      <code>HamonET.class</code> file can be annotated too. (the
      <code>CompInfo</code> file name suffix indicates the annotation
      extension of the same class without this suffix). The class
      <code>HamonETCompInfo.java</code> is referred as <emphasis
      role="bold">Annotation Component</emphasis> (Figure ???).</para>

      <para><figure>
          <title>Annotation Component</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/Handbook/Slide8.PNG"
                         scale="75"></imagedata>
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>The annotation component class must be an abstract Java class. It
      includes only the language constructs from the component, that are
      relevant to the framework, such as only the <code>In</code> and
      <code>Out</code> fields and the tagged methods. Those methods must be
      declared <code>abstract</code> too, hence they do have no implementation
      body.</para>

      <para><example>
          <title>Pure Annotation Component (HamoETCompInfo.java)</title>

          <para><blockquote>
              <programlisting> package thornthwaite;

 import oms3.annotations.*;                                     
 import java.util.Calendar;
 import java.lang.Math;

 @Description                                                                    
    ("Hamon Potential Evapotranspiration." +
    "Climatic demand for water relative to the available energy, "+ 
    "after Hamon.")
 @Author
    (name= "Jo Scientist", contact= "jos@research-org.edu")
 @Keywords
    ("Hydrology, Potential Evapotranspiration")
 @Bibliography
    ("Hamon, W.R., 1961, Estimating potential evapotranspiration. " +
     "Journal of the Hydraulics Division, " +
     "Proceedings of the American Society of Civil Engineers, " +
     "v.87, p.107–120.")
 @SourceInfo
    ("$HeadURL: http://svn.javaforge.com/svn/oms/branches/" +
         oms3.prj.thornthwaite/src/tw/HamonET.java $")
 @Status
    (Status.DRAFT)
 @VersionInfo
    ("$Id: HamonET.java 319 2009-08-20 17:34:32Z odavid $")
 @License
    ("http://www.gnu.org/licenses/gpl-2.0.html")

 public <emphasis role="bold">abstract</emphasis> class HamonET<emphasis
                  role="bold">CompInfo</emphasis> {                             // 1.

    @Description("Temperature")                                                 
    @Unit("C")
    @In double temp;                                           
    
    @Description("Day length in hours.")
    @Range(min=9, max=15)
    @In double daylen;

    @Description("Current time")
    @In Calendar time;

    @Description("Potential ET")
    @Unit("mm/month")
    @Range(min=0.0)
    @Out public double pet;                                    

    @Execute                                                   
    public <emphasis role="bold">abstract</emphasis> void compute();                                        HamonETCompInfo  // 2.

 }
</programlisting>

              <orderedlist>
                <listitem>
                  <para>The Annotation Component is declared
                  <code>abstract</code> and its name is prefixed with
                  <code>CompInfo</code>.</para>
                </listitem>

                <listitem>
                  <para>The compute method is also declared
                  <code>abstract</code>, no implementation.</para>
                </listitem>
              </orderedlist>
            </blockquote></para>
        </example></para>

      <para>The Component Annotation approach has the advantage to keep the
      Component 100% as a POJO component with no dependency to the framework
      annotations. However, it means an additional burden to the developer to
      keep POJO Component and Annotation Component in sync during
      development.</para>

      <para></para>

      <bibliography>
        <bibliomixed xml:id="McCabe2007">McCabe, G.J., and Markstrom, S.L.,
        2007, A monthly water-balance model driven by a graphical user
        interface: U.S. Geological Survey Open-File report 2007-1088, 6
        p.</bibliomixed>

        <bibliomixed xml:id="Hamon1961">Hamon, W.R., 1961, Estimating
        potential evapotranspiration: Journal of the Hydraulics Division,
        Proceedings of the American Society of Civil Engineers, v. 87, p.
        107–120.</bibliomixed>

        <bibliomixed xml:id="Mather1978">Mather, J.R., 1978, The climatic
        water balance in environmental analysis: Lexington, Mass., D.C. Heath
        and Company, 239 p.</bibliomixed>

        <bibliomixed xml:id="Thornthwaite1948">Thornthwaite, C.W., 1948, An
        approach toward a rational classification of climate: Geographical
        Review, v. 38, p. 55–94.</bibliomixed>
      </bibliography>
    </section>

    <section>
      <title>A FORTRAN PET Component</title>

      <para>Up to this point we discussed the creation of components in the
      Java programming language. It is possible, however, to create components
      that originate from languages such as C, C++, and FORTRAN, popular and
      widely used native languages within the scientific community.</para>

      <para>The concept of embedding native code is derived from JNA (Java
      Native Architecture), an open source library that tremendously
      simplifies the use of native code by providing a transparent and easy
      access to Dynamically Linked Libraries (DLL) under Windows or Shared
      Libraries under Linux/UNIX/MAC OS X. The term DLL refers to those type
      which represent the same concept. Appendix ??? discusses all details of
      DLL creation, integration, and use for the C,C++, and FORTRAN
      programming languages.</para>

      <para>In general OMS3 can directly interact with DLLs on all major
      platforms directly without the need of creating any glue source code
      between Java and a DLL.</para>

      <figure>
        <title>Native HamonET Component</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Handbook/Slide9.PNG"
                       scale="75"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>As an example, the <code>HamonET</code> component now gets
      implemented using the FORTRAN programming language. Figure ??? shows the
      involved software units. The component accesses the the DLL
      (<code>ETLib.dll</code>), that is being created from the FORTRAN source
      code <code>hamon.f90</code>. It should be noted that this example used
      the annotation component approach, the POJO and annotation component can
      be combined too for native components.</para>

      <para><example>
          <title>FORTRAN Component (hamon.f90)</title>

          <para><blockquote>
              <programlisting> ! File:   hamon.f90
 ! Author: od
 !
 FUNCTION potET(daylen, temp, days) <emphasis role="bold">BIND(C, name='hamon')</emphasis>        ! 1.
  <emphasis role="bold"> REAL*8,VALUE :: daylen,temp                                   ! 2.
   INTEGER*4,VALUE :: days</emphasis>
   REAL*8 :: potET
   REAL*8 :: Wt,D2
   
   Wt = 4.95 * exp(0.062 * temp) / 100.0
   D2 = (daylen / 12.0) * (daylen / 12.0)
   potET = 0.55 * days * D2 * Wt
   if (potET &lt;= 0.0) then
       potET = 0.0
   endif
   if (temp &lt;= -1.0) then 
       potET = 0.0
   endif
   potET = potET * 25.4
 END
</programlisting>

              <para>The FORTRAN 90 source as shown above contains some F2003
              enhancements which simplify the language interoperability,
              mostly C interoperability. Most compilers support those
              features</para>

              <orderedlist>
                <listitem>
                  <para>The function declaration ends with the
                  <code>BIND()</code> construct, providing for easier C
                  interoperability, mostly taking care of the name
                  underscoring inconsistencies within object files and DLLs
                  across compilers. It allows to define an name alias for
                  other programs to calling this function. In the case above,
                  the FORTRAN function <code>potET</code> can be called as
                  <code>hamon</code>.</para>
                </listitem>

                <listitem>
                  <para>The function parameter are declared as 'value
                  parameter', again a F2003 extension supporting C calling
                  conventions.</para>
                </listitem>
              </orderedlist>
            </blockquote></para>
        </example></para>

      <para>The rest of the function is just plain FORTRAN implementation if
      the Hamon equations. As a next step, the file hamon.f90 will be compiled
      and linked into a DLL, <code>ETLib.dll</code> on Windows, and
      <code>libETLib.so</code> on Linux/Unix. The instructions for different
      compilers on different operations systems can be found in the Appendix
      ???.</para>

      <para>Now the <code>HamonET</code> component gets created to use the
      DLL. Note that if you use a DLL, a developer still needs to create a
      Java component containing the annotation meta data in order to provide
      execution and data flow information.</para>

      <para><example>
          <title>Component Binding of a DLL</title>

          <para><blockquote>
              <programlisting> package thorthwaite;                                      

 import java.util.Calendar;                                
 <emphasis role="bold">import oms3.util.Libraries;                                          // 1.
</emphasis>
 public class HamonET {           

    <emphasis role="bold">@DLL("ETLib")                                                     // 2.
    interface Et extends com.sun.jna.Library {                        // 3.
        Et lib = Libraries.bind(Et.class);                            // 4.

        double hamon(double daylen, double temp, int days);           // 5.
    }</emphasis>                                  
    
    static final int[] DAYS = {                            
        31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    };
    
    public double temp;                                    
    public double daylen;
    public Calendar time; 
                                     
    public double pet;

    public void compute() {        
        int month = time.get(Calendar.MONTH);                        
        <emphasis role="bold">pet = Et.lib.hamon(daylen, temp, DAYS[month]);</emphasis>                // 6.
    }
 }</programlisting>

              <orderedlist>
                <listitem>
                  <para>OMS contains a support library for handling DLLs. Its
                  a part of the <code>util</code> package.</para>
                </listitem>

                <listitem>
                  <para>The <code>@DLL</code> annotation refers to the
                  external DLL name in its argument. It has to annotate the
                  interface that follows the following line.</para>
                </listitem>

                <listitem>
                  <para>The interface <code>Et</code> extends the JNA Library
                  interface.</para>
                </listitem>

                <listitem>
                  <para>the <code>Libraries.bind()</code> call binds the DLL
                  <code>ETLib.dll</code> to the interface <code>ET_FTN</code>.
                  The static variable lib will reference an an instance which
                  is bound to the native DLL.</para>
                </listitem>

                <listitem>
                  <para>The <code>hamon</code> method listed here is a Java
                  surrogate for the FORTRAN <code>hamon</code> method in the
                  DLL. A call to this method would result in calling the
                  FORTRAN function. Note that the name, argument types and
                  return type have to match in order to map.</para>
                </listitem>

                <listitem>
                  <para>The call performed in compute used the lib reference
                  within <code>Et</code> to pass in the actual arguments as
                  Java variables witch are at the receiving end arrive as
                  FORTRAN objects.</para>
                </listitem>
              </orderedlist>
            </blockquote></para>
        </example>At model runtime the it has to be ensured, that the DLL is
      accessible with the environment path, or a system property
      <code>jna_library_path</code> has to be to point to the DLL's directory.
      See for details in Appendix ???</para>
    </section>

    <section>
      <title>C/C++ Components</title>

      <para>The same PET component can also be implemented in C or C++, as the
      program listing shows below. Default C calling conventions for function
      arguments and function naming are being used, Also, type names are
      similar to Java and show somehow the origins of the Java programming
      language.</para>

      <para><example>
          <title>C Component (hamonc.c)</title>

          <para><blockquote>
              <programlisting> /* 
  * File:   hamonc.c
  */
 double hamon(double daylen, double temp, int days) {
    double Wt = 4.95 * exp(0.062 * temp) / 100.;
    double D2 = (daylen / 12.0) * (daylen / 12.0);
    double potET = 0.55 * days * D2 * Wt;
    if (potET &lt;= 0.0) {
        potET = 0.0;
    }
    if (temp &lt;= -1.0) {
        potET = 0.0;
    }
    potET *= 25.4;
    return potET;
 }
</programlisting>
            </blockquote></para>
        </example></para>

      <para>The code above (hamonc.c) should be compiled into a DLL or shared
      library using a C or C++ compiler. Its use in a OMS3 component is
      identical to its FORTRAN counterpart as described in the previous
      section. The only change might be the DLL name as specified in the
      <code>@DLL</code> annotation.</para>
    </section>

    <section>
      <title>Component Method Annotation</title>

      <para>As seen in the developed example, the <code>compute()</code>
      method was annotated with <code>@Execute</code> annotation to point the
      framework to the entry method for a component's execution. This method
      provides the core purpose and equations of the Hamon class. For the
      framework the name of this entry method is irrelevant, as long as it has
      the expected method signature. The method has to be <code>public</code>,
      <code>void</code> return type and no arguments, the method name does not
      matter.</para>

      <para>All together there are three types of annotations that indicate
      execution entry points of a component:</para>

      <variablelist>
        <varlistentry>
          <term><code>@Initialize</code></term>

          <listitem>
            <para>Annotates a component's method that initializes the
            component. Some components need to setup and handle an internal
            state in order to allow for their execution. <emphasis
            role="bold">Note that no input to the component (<code>@In</code>)
            can be used during initialization</emphasis>. Those values are not
            present at initialization time. The initialization method gets
            called only once on model startup. It is also called after
            instantiation and before this and any other component's execute
            method. Examples might be allocation of memory, opening of data
            base connections, file handles, or the creation of a user
            interface element. This annotation is optional.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>@Execute</code></term>

          <listitem>
            <para>This annotation annotates the method implementing the core
            functionality of the component. This method is required. Within
            this method usually all <code>@In</code> tagged fields are
            accessed, equations are applied and <code>@Out</code> fields are
            being assigned to results. It can be safely assumed that all
            <code>@In</code> tagged fields contain valid values.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>@Finalize</code></term>

          <listitem>
            <para>Finalize is called after the last <code>@Execute</code> of
            this and any other component in the model. It should be used to
            gracefully end the model run by cleaning up resources, such as
            closing open file streams or data base connections, deallocation
            of memory if native code is involved. This annotation is
            optional.<footnote>
                <para>Because Java performs internal garbage collecting, Java
                memory allocated using the <code>new</code> operator get
                deallocated if not used anymore, no manual memory management
                is needed.</para>
              </footnote></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>All of the annotated methods must have the same signature:
      <code>public void &lt;name&gt;()</code>. Any other signature is invalid.
      The methods can also declare Exceptions being thrown. A component must
      have at least the <code>@Execute</code> annotation.</para>

      <para>The example below shows the use of the method annotations in
      detail.</para>

      <para><example>
          <title>Unconditional Initialization</title>

          <para><blockquote>
              <programlisting> public class ClimateInput {
    
    DBConnection db;
    Iterator&lt;String[]&gt; inp;
    
    @Out public double temp;
    @Out public double precip;
    @Out public boolean moreData;

    <emphasis role="bold">@Initialize</emphasis>
    public void init() throws Exception {
        db.open(System.getProperty("db.connect");
        inp = db.iterator();
    }

    <emphasis role="bold">@Execute</emphasis>
    public void exec() throws Exception {
        if (inp.hasNext()) {
            String[] row = inp.next();
            temp = Double.parseDouble(row[2]);
            precip = Double.parseDouble(row[3]);
        }
        moreData = inp.hasNext();
    }
   
   <emphasis role="bold"> @Finalize</emphasis>
    public void done() {
        db.close();
    }
}</programlisting>
            </blockquote></para>
        </example>The Climate input example above used all three method
      annotations. A data base connection gets established during
      initialization, within execute data is fetched from it row by row on
      each call. At the end of execution the database connection is
      closed.</para>

      <para>The connect information is provided as a static system property in
      this case. Since the initialization does not depend on any state
      variable of the component this method is called <emphasis>unconditional
      initialization</emphasis></para>

      <section>
        <title>Conditional Initialization</title>

        <para>Another practical method for component initialization is shown
        in the example listing below. Unlike unconditional initialization, the
        <emphasis>conditional initialization</emphasis> can take input values
        of the component into account. Hence, it has to be called from within
        <code>@Execute</code>, since it needs valid <code>@In</code> values.
        The <code>@Initialize</code> tagging is not needed, the
        <code>@Ininit()</code> method can be declared private, since it only
        called from within this component (1).</para>

        <example>
          <title>Conditional Initialization</title>

          <para><blockquote>
              <programlisting> public class Climate {

    @In  public File climateInput;
    @Out public double temp;
    @Out public double precip;
    @Out public boolean moreData;
    @Out public Calendar time = new GregorianCalendar();
    
    /** Row Input iterator*/
    Iterator&lt;String[]&gt; inp;
    /** data formatter */
    private SimpleDateFormat f;

    private void <emphasis role="bold">init()</emphasis> throws Exception {         <emphasis
                  role="bold">// 1.</emphasis>
        CSTable table = DataIO.table(climateInput, "Climate");
        f = new SimpleDateFormat(table.getColumnInfo(1).get("Format"));
        inp = table.rows().iterator();
    }

    <emphasis role="bold">@Execute</emphasis>
    public void execute() throws Exception {
        <emphasis role="bold">if (inp == null) {                         // 2.
            init();
        }</emphasis>
        if (inp.hasNext()) {
            String[] row = inp.next();
            time.setTime(f.parse(row[1]));
            temp = Double.parseDouble(row[2]);
            precip = Double.parseDouble(row[3]);
        }
        moreData = inp.hasNext();
    }
   
   <emphasis role="bold"> @Finalize</emphasis>
    public void done() {
        DataIO.dispose(inp);
    }
}</programlisting>
            </blockquote>This methodology provides more flexibility, because
          it is more dynamic within the execution. However, an checking on an
          internal variable is usually required to indicate the need for the
          <code>init()</code> call, hence called conditional initialization
          (2).</para>
        </example>

        <para></para>

        <para></para>
      </section>
    </section>

    <section>
      <title>References</title>

      <itemizedlist>
        <listitem>
          <para>Java Native Architecture (https://jna.dev.java.net)</para>
        </listitem>

        <listitem>
          <para>GCC (http://gcc.gnu.org)</para>
        </listitem>

        <listitem>
          <para>Intel Compiler
          (http://software.intel.com/en-us/intel-compilers)</para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter>
    <title>Component Integration</title>

    <para>So far, we talked about individual components, their internal
    structure, annotated elements such as fields and methods, and meta data
    annotations for components. In this chapter we will explain the assembly
    of multiple components into coarser grained components, that becomes
    eventually the model.</para>

    <section>
      <title>Component vs. Model</title>

      <para>[tbd]</para>

      <para></para>
    </section>

    <section>
      <title>Compound Java Components</title>

      <para>A Compound is an aggregate of simple components. It can be viewed
      as a facade for its internal components that are usually considered
      simpler. Figure ??? shows the schematic of a geometry compound
      component, that contains three internal components. They are connected
      to provide data for computing the surface area of a cylinder. They are
      also connected to the compounds Input and Output. If the internals of
      the <code>CylinderCompound</code> would be omitted, it would look like a
      simple component with height and radius as input and surface as output.
      It can certainly be used this way in another compound.</para>

      <para>[tbd]</para>

      <section>
        <title>Connecting Components</title>

        <para>The <code>connect()</code> method allows to connect the output
        field of a component (tagged as <code>@Out</code>) with an input field
        of another component (tagged with <code>@In</code>). Both components
        are internal to this compound. Their field types have to be
        compatible.</para>

        <para><blockquote>
            <programlisting> public void out2in(Object from, String c1Out, Object to, String c2In);</programlisting>
          </blockquote></para>

        <blockquote>
          <para><code>from</code> - component1 c2</para>

          <para><code>c1Out</code> – output field name of component 1</para>

          <para><code>to</code> – component 2</para>

          <para><code>c2In</code> – input field name of component 2</para>

          <para></para>
        </blockquote>

        <para>If c1Out and c2In are the same name, a shortcut can be
        used:</para>

        <para><blockquote>
            <programlisting> public void out2in(Object c1, String c1Out, Object ... c2);</programlisting>
          </blockquote></para>

        <blockquote>
          <para><code>c1</code> - component1 c2</para>

          <para><code>c1Out</code> – output field name of component 1</para>

          <para><code>c2</code> – component 2</para>

          <para></para>
        </blockquote>
      </section>

      <section>
        <title>Input and Output mapping</title>

        <para>The mapIn() method connects a compounds @In field with an
        internal component’s @In field. The mapOut() methods works similar for
        <code>@Out</code> fields. Unlike the connect() method above, the
        map???() methods require both field to have the same data flow tag.
        The types of those fields have to be compatible.</para>

        <para></para>

        <para><blockquote>
            <programlisting> public void in2in(String in, Object c2, String c2In)</programlisting>
          </blockquote></para>

        <para><blockquote>
            <para><code>in</code> - in field of this component</para>

            <para><code>c1Out</code> – output field name of component 1</para>

            <para><code>c2</code> – component 2</para>

            <para></para>
          </blockquote></para>

        <para>If both input fiels do have the same name a shortcut can be
        used:</para>

        <para><blockquote>
            <programlisting> public void in2in(String in, Object ... c)</programlisting>
          </blockquote></para>

        <blockquote>
          <para><code>in</code> - in field of this component</para>

          <para><code>c</code> – internal components to map in to</para>

          <para></para>
        </blockquote>

        <para></para>
      </section>
    </section>

    <section>
      <title>Temporal Iterations</title>

      <para>[tbd]</para>
    </section>

    <section>
      <title>Spatial Iterations</title>

      <para>[tbd]</para>
    </section>
  </chapter>

  <chapter>
    <title>Simulations</title>

    <para>In this chapter the structure, setup, and execution of model
    simulations are discussed.</para>

    <para>A simulation within OMS is defined as the application of a model (or
    component) with a concrete data set to predict the actual behavior of a
    system or the environment. A developed model component is needed as well
    as a dataset providing input data for the model. Input data can be
    supplied directly to the model.</para>

    <section>
      <title>Basic Concepts</title>

      <para>This Section introduces the concepts and common elements of
      simulations in OMS.</para>

      <section>
        <title>Conventions</title>

        <para><emphasis role="bold">Common Simulation Element
        Structure</emphasis></para>

        <para>All simulations adhere to the same formal structure as used in
        the first simulation:</para>

        <para><blockquote>
            <programlisting>// comment
&lt;element&gt;(&lt;key:value&gt;, &lt;key:value&gt;, ...) {   

   &lt;element&gt;(&lt;properties like above&gt;) {
      // more sublements..
   }

   &lt;element&gt;(&lt;properties like above&gt;) {
      // more sublements or just elements with value
      &lt;element&gt; &lt;value&gt;
   }

   &lt;element&gt;(&lt;properties like above&gt;) 

   &lt;element&gt; {
      &lt;element ..
   }
   // more subelements
 }
</programlisting>
          </blockquote></para>

        <itemizedlist>
          <listitem>
            <para>Comments can be single lined ('<code>// ...</code>') or can
            span multiple lines ("<code>/* ... */</code>") such as in C++,
            Java, or Groovy.</para>
          </listitem>

          <listitem>
            <para>There is one root element that is usually the
            simulation.</para>
          </listitem>

          <listitem>
            <para>Elements might have properties, provided in parenthesis
            after the element name. If there are no properties the parenthesis
            can be omitted.</para>
          </listitem>

          <listitem>
            <para>Properties are a list of comma separated tuple of
            <code>&lt;key:value&gt;</code> pairs.</para>
          </listitem>

          <listitem>
            <para>Elements might have sub elements within curly brackets. If
            there are no sub elements, the curly brackets can be
            omitted.</para>
          </listitem>

          <listitem>
            <para>Elements can have just a value following the element name
            separated by space .</para>
          </listitem>
        </itemizedlist>

        <para></para>

        <para></para>

        <para></para>

        <para></para>

        <para></para>

        <table>
          <title>Type Information</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry align="center">Type</entry>

                <entry align="center">Description</entry>

                <entry align="center">Example Value</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>string</entry>

                <entry>quoted alphanumerical content</entry>

                <entry>'ET Model'</entry>
              </row>

              <row>
                <entry>decimal</entry>

                <entry>decimal number</entry>

                <entry>200</entry>
              </row>

              <row>
                <entry>float</entry>

                <entry>floating point (real) number</entry>

                <entry>3.145</entry>
              </row>

              <row>
                <entry>boolean</entry>

                <entry>binary (or logical) value</entry>

                <entry>true, false</entry>
              </row>

              <row>
                <entry>closure</entry>

                <entry>a code block, Java/Groovy code embedded in curly
                brackets</entry>

                <entry>{ println it }</entry>
              </row>

              <row>
                <entry>array of &lt;type&gt;</entry>

                <entry>enumerated, comma separated &lt;type&gt; elements,
                embedded in brackets</entry>

                <entry>[ 1, 2, 3, 4 ]</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para></para>

        <table>
          <title>Occurrences Information</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry align="center">Occurrence</entry>

                <entry align="center">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>1</entry>

                <entry>Exact '1' occurrence, (required value)</entry>
              </row>

              <row>
                <entry>?</entry>

                <entry>'0' or '1' occurrences, (optional value)</entry>
              </row>

              <row>
                <entry>*</entry>

                <entry>'0' or many occurrences</entry>
              </row>

              <row>
                <entry>+</entry>

                <entry>'1' or many occurrences</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para></para>

        <para></para>

        <para></para>
      </section>

      <section>
        <title>Running Simulations on the command line</title>

        <para></para>

        <para>The implemented simulation concept leverages the concept of
        Domain Specific Languages (DSL) as introduced in the Groovy language.
        Introducing groovy and DSL is outside of the scope of this handbook,
        only the implementation for simulation building will be discussed.
        There is no need to master groovy beyond the described concepts. There
        are some general technical requirements for developing
        simulations.</para>

        <itemizedlist>
          <listitem>
            <para>In order create a new or run an existing simulation the jar
            file <code>groovy-all.jar</code> has to be in the CLASSPATH of
            your IDE or other runtime environment or you just install the
            Groovy package (http://groovy.codehaus.net).</para>
          </listitem>

          <listitem>
            <para>The simulation file, which will be explained in detail below
            has to have the extension <code>*.groovy</code>.</para>
          </listitem>
        </itemizedlist>

        <para>At least, a simulation can be executed using the command line
        like:</para>

        <para><blockquote>
            <programlisting> $ java -cp "./mycomponents.jar" sim.groovy</programlisting>
          </blockquote></para>

        <para></para>
      </section>
    </section>

    <section>
      <title>Basic Simulation (<code>sim</code>)</title>

      <para>A basic simulation is the standard method to setup and run a
      model. It is being created using the <code>sim</code> element of the
      <code>SimBuilder</code> class. Define the package name and list imported
      packages as shown below first. The package <code>oms3</code> contains
      <code>SimBuilder</code> and needs to be imported at a minimum
      (1).</para>

      <para><blockquote>
          <programlisting> <emphasis role="bold">si<emphasis role="bold">m</emphasis>(name:"SimpleTWModel for EF")</emphasis> {
    // define the model
    model(classname:"tw.Thornthwaite") {
        // add parameter
        parameter {
            climateFile  "c:/od/projects/ngmf.models/src/tw/climate.cst"
            outputFile   "output.csv"
            runoffFactor 0.5
            latitude     35.0
            smcap        200.0
        }
    }
 }</programlisting>
        </blockquote></para>

      <para></para>

      <para>Line (2) creates the <code>SimBuilder</code> object that is being
      used in (3) to construct the simulation type. (Other simulations as
      described in the following sections are using different names here. The
      <code>sim</code> object has the property <code>name</code> to identify
      it and its purpose. In general properties are key/value pairs, separated
      by colons. Multiple properties are separated by comma, all properties
      are embedded in parenthesis following the model.</para>

      <para><indexterm>
          <primary>Simulation Element</primary>

          <secondary>sim{}</secondary>
        </indexterm><emphasis role="bold">Element sim{}</emphasis></para>

      <para><variablelist>
          <varlistentry>
            <term>Name</term>

            <listitem>
              <para><code>sim</code> - Defines a basic simulation.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Properties</term>

            <listitem>
              <para><informaltable>
                  <tgroup cols="4">
                    <thead>
                      <row>
                        <entry align="center"> Name</entry>

                        <entry align="center"> Description</entry>

                        <entry align="center">Type</entry>

                        <entry align="center">Occurrences</entry>
                      </row>
                    </thead>

                    <tbody>
                      <row>
                        <entry><code>name</code></entry>

                        <entry>name of the simulation</entry>

                        <entry>string</entry>

                        <entry>?</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Sub elements</term>

            <listitem>
              <para><informaltable>
                  <tgroup cols="2">
                    <thead>
                      <row>
                        <entry align="center"> Name</entry>

                        <entry align="center">Occurrences</entry>
                      </row>
                    </thead>

                    <tbody>
                      <row>
                        <entry><code>model{}</code></entry>

                        <entry>1</entry>
                      </row>

                      <row>
                        <entry><code>outputstrategy{}</code></entry>

                        <entry>?</entry>
                      </row>

                      <row>
                        <entry><code>resource</code></entry>

                        <entry>+</entry>
                      </row>

                      <row>
                        <entry><code>efficiency{}</code></entry>

                        <entry>*</entry>
                      </row>

                      <row>
                        <entry><code>summary{}</code></entry>

                        <entry>*</entry>
                      </row>

                      <row>
                        <entry><code>analysis{}</code></entry>

                        <entry>*</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Notes</term>

            <listitem>
              <para></para>

              <para></para>
            </listitem>
          </varlistentry>
        </variablelist></para>

      <para></para>

      <section>
        <title>Model (<code>model</code>)</title>

        <para>The model element is a part of every simulation and describes a
        model/component to be used. It is really top component class that is
        represented here. The component can be any Class that has at least the
        <code>@Execute</code> annotation indicating the execution entry
        point.</para>

        <para>The example below defines a model by using the class
        "<code>tw.Thornthwaite</code>".</para>

        <para><blockquote>
            <programlisting><emphasis role="bold"> model(classname:"tw.Thornthwaite") {</emphasis>
     // optional parameter definitions
<emphasis role="bold"> }</emphasis>
</programlisting>
          </blockquote>The model might have optional parameter subelements. If
        no parameter should be defined, the subelement body can be
        omitted:</para>

        <para><blockquote>
            <programlisting><emphasis role="bold"> model(classname:"tw.Thornthwaite")</emphasis>
</programlisting>
          </blockquote></para>

        <para><emphasis role="bold"></emphasis></para>

        <para><emphasis role="bold"><emphasis role="bold"><indexterm>
            <primary>Simulation Element</primary>

            <secondary>model{}</secondary>
          </indexterm></emphasis><emphasis role="bold">Element
        model{}</emphasis></emphasis></para>

        <para><emphasis role="bold">Specification</emphasis></para>

        <para><variablelist>
            <varlistentry>
              <term>Name</term>

              <listitem>
                <para><code>model</code> - specifies a model for a
                simulation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Properties</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="4">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Required</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>classname</code></entry>

                          <entry>the classname of the model.</entry>

                          <entry>String</entry>

                          <entry>Y</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>

                <note>
                  <para>The classpath of the simulation should include all
                  required classes for the model.</para>
                </note>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Subelements</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="5">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Default</entry>

                          <entry align="center">Occurrences 1)</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>parameter</code></entry>

                          <entry>the model parameter set</entry>

                          <entry>-</entry>

                          <entry>-</entry>

                          <entry>*</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Parent(s)</term>

              <listitem>
                <para>all simulation types</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Notes</term>

              <listitem>
                <itemizedlist>
                  <listitem>
                    <para>1) Occurrences: 1 - exact one time; + - one or more
                    time; ? - zero or one time; * - zero or more time</para>
                  </listitem>

                  <listitem>
                    <para>The class as specified in <code>classname</code> and
                    every other class has to be found in the classpath of a
                    simulation. Setting the classpath can be done using
                    command line arguments on simulation execution, using
                    environment variables, or other methods.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para></para>

        <section>
          <title>Parameter (<code>parameter</code>)</title>

          <para>The model parameter element allows the specification of input
          values for a model. It can reference a external file (csd) that
          contains the model parameter as specified in Section ???. This
          element also allows the direct specification of parameter as
          sub-element. An example:</para>

          <para><blockquote>
              <programlisting> model(classname:"tw.Thornthwaite") {
    // parameter
    <emphasis role="bold">parameter(file:"params.csd") {
        climateFile  "c:/od/projects/ngmf.models/src/tw/climate.cst"
        outputFile   "output.csv"
        runoffFactor 0.5
        latitude     35.0
        smcap        200.0
    }</emphasis>
 }
</programlisting>
            </blockquote>the parameter 'file' property takes a file name. Note
          that this file can be an absolute file path or a relative one, that
          will relate to the base directory of the simulation. The parameter
          element can also have the parameter names/values as sub-elements as
          shown above. Names are matching the <code>@In</code> tagged fields
          of the model that is named in the surrounding model element. Values
          are space separated from their keys and have valid Java/Groovy data
          types such as Strings, Numbers, Files, etc. Those data types have to
          match the data type of the corresponding <code>@In</code> field in
          the model. However, the system will convert the values into the
          proper field data type, if the value is provided as String. (The
          <code>climateFile</code> value in the example above is of type
          <code>File</code>, but for convenience purposes it is provided as
          String.</para>

          <para>If both, the <code>file</code> property is provided and there
          are also parameter values given, and both the file and the
          subsection specifies the same parameter, then the sub element will
          overwrite the file specified parameter.</para>

          <para>The following use of the parameter element is possible.
          Multiple parameter elements can help splitting parameter sets in
          groups and allow for redefinition.</para>

          <para><blockquote>
              <programlisting> model(classname:"my.model") {
    // parameter defintion
    <emphasis role="bold">parameter(file:"params.csv")          // parameterfile only
    <emphasis role="bold">parameter(file:"params-dates.csv")    // parameterfile only
</emphasis>    <emphasis role="bold">parameter(file:"params-files.csv") {  // parameterfile and explicit
        testdir "/tmp/test"
    }
    <emphasis role="bold">parameter {                           // only explicit parameter
        coeff 2.34
    }
</emphasis></emphasis></emphasis> }
</programlisting>
            </blockquote></para>

          <para>More general about parameter value reading and setting order:
          A parameter at a higher line number will overwrite the same one at a
          lower line number. It is not relevant if it comes from a file or is
          specified explicitly.</para>

          <para><emphasis role="bold"><indexterm>
              <primary>Simulation Element</primary>

              <secondary>parameter{}</secondary>
            </indexterm><emphasis role="bold">Element
          parameter{}</emphasis></emphasis></para>

          <para><variablelist>
              <varlistentry>
                <term>Name</term>

                <listitem>
                  <para><code>parameter</code> - describes a model
                  parameter</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Properties</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="4">
                        <thead>
                          <row>
                            <entry align="center"> Name</entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Type</entry>

                            <entry align="center">Required</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>file</code></entry>

                            <entry>the parameter file</entry>

                            <entry>String (csd - file)</entry>

                            <entry>N</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Sub elements</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="5">
                        <thead>
                          <row>
                            <entry align="center"> Name</entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Type</entry>

                            <entry align="center">Default</entry>

                            <entry align="center">Occurrences</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>&lt;pname&gt;
                            &lt;pvalue&gt;</code></entry>

                            <entry>single model parameter</entry>

                            <entry>&lt;component field type&gt;</entry>

                            <entry>-</entry>

                            <entry>*</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Parent(s)</term>

                <listitem>
                  <para><code>model</code></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Notes</term>

                <listitem>
                  <itemizedlist>
                    <listitem>
                      <para>A parameter element must have either a file
                      property or at least one single parameter sub-element or
                      both, but cannot have non of both.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </section>

        <section>
          <title>Resources (<code>resource</code>)</title>

          <para>Every simulation has to manage resources such as a model
          executable, DLLs, parameter files, climate data input,
          documentation, etc. The <code>resource</code> element allows the
          listing of those resources. There are several uses for the resource
          listings in a simulation.</para>

          <itemizedlist>
            <listitem>
              <para>All jar files listed in a resource element are added to
              the <code>classpath</code> for JAVA model execution. Jar files
              can be referenced as local files or URLs, if the model should be
              loaded from a remote location. If no Jar files are present, the
              model will use the default class path for the
              application.</para>
            </listitem>

            <listitem>
              <para>All files regardless of which type are used for digest
              computation to ensure comprehensive hashing of all simulation
              resources.</para>
            </listitem>

            <listitem>
              <para>Other tools for remote execution within a cluster can use
              the resource listing to copy thiose files to other
              machines.</para>
            </listitem>
          </itemizedlist>

          <para>A <code>resource</code> section of a simulation might look
          like:</para>

          <para><blockquote>
              <programlisting>work = "home/prj"
sim(name:"ceap") {
    //
   <emphasis role="bold"> resource "$work/dist/oms3.prj.ceap.jar"
    resource "$work/dist/oms3.prj.ceap-lib.jar"
    resource "$work/input/climate.csv"</emphasis>
} 

</programlisting>
            </blockquote>The <code>resource</code> values always follow the
          resource keyword. It also shows the use of string replacement in
          order to reference a common root directory. Alternatively the files
          above can be provided as a list to one resource element. (Note the
          required brackets and parenthesis). Both notations do have the same
          semantics.<blockquote>
              <programlisting> ...
 resource (<emphasis role="bold">["$work/dist/oms3.prj.ceap.jar",
             "$work/dist/oms3.prj.ceap-lib.jar",
             "$work/input/climate.csv"]</emphasis>)
 ...
</programlisting>
            </blockquote><indexterm>
              <primary>Simulation Element</primary>

              <secondary>resource{}</secondary>
            </indexterm><emphasis role="bold">Element
          resource{}</emphasis></para>

          <para><variablelist>
              <varlistentry>
                <term>Name</term>

                <listitem>
                  <para><code>resource</code> - list all relevant simulation
                  resource files</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Value</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="4">
                        <thead>
                          <row>
                            <entry align="center"> </entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Type</entry>

                            <entry align="center">Required</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>&lt;single file&gt;</code></entry>

                            <entry>a file belonging to this simulation</entry>

                            <entry>String (file or URL)</entry>

                            <entry>y</entry>
                          </row>

                          <row>
                            <entry><code>&lt;file list&gt;</code></entry>

                            <entry>all file belonging to this simulation</entry>

                            <entry>List of Strings (file or URL)</entry>

                            <entry>y</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Parent(s)</term>

                <listitem>
                  <para><code>sim, model</code></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Notes</term>

                <listitem>
                  <itemizedlist>
                    <listitem>
                      <para>A <code>resource</code> element must have either
                      have a single file value or a list of files.</para>
                    </listitem>

                    <listitem>
                      <para>The <code>resource</code> element should at least
                      list all <code>.jar</code>, <code>.exe</code>,
                      <code>.dll</code> files that are needed for
                      execution.</para>
                    </listitem>

                    <listitem>
                      <para>Listed files should provide the full path.</para>
                    </listitem>

                    <listitem>
                      <para>The resource element of a <code>sim</code> element
                      and a <code>model</code> element are shared.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para></para>
        </section>

        <section>
          <title>Logging (<code>logging</code>)</title>

          <para>The logging sub-element is an optional part of a model
          element. It controls the logging levels for single components or for
          the whole model. In order to use the logging feature, components
          have to obtain and use a logger accordingly.</para>

          <para>A logger is an object that allows output handling based on
          logging levels. Such levels usually indicate the severeness of a
          message. The Java logging infrastructure supports per default 7 log
          levels, ranging from <code>FINEST</code> (the lowest priority or
          importance) to <code>SEVERE</code> (the highest importance). In
          addition there is a level <code>OFF</code> to turn off logging at
          all. If a log level is provided, all log message of the same or
          higher priority are passed to the system and printed out.</para>

          <para>The examples below shows the use of the logging. The logging
          element is part of the model element. It lists the component class
          names and their associated log levels for a simulation run.
          <blockquote>
              <programlisting> model(classname:"my.model") {
    // logging definition
<emphasis role="bold"><emphasis role="bold"><emphasis role="bold">    logging {                           
        "StreamFlow" "INFO"
        "GwFlow"     "CONFIG"
    }
</emphasis></emphasis></emphasis> }
</programlisting>
            </blockquote>The component <code>StreamFlow</code> in
          '<code>my.model</code>' is assigned the Log level <code>INFO</code>,
          the <code>GwFlow</code> component will have a finer grained
          <code>CONFIG</code> log level. The default log level for all other
          components in the model is <code>WARNING</code>.</para>

          <blockquote>
            <programlisting> model(classname:"my.model") {
    <emphasis role="bold"><emphasis role="bold"><emphasis role="bold">logging (all:"INFO"){                           
        "StreamFlow" "FINEST"
    }
</emphasis></emphasis></emphasis> }
</programlisting>
          </blockquote>

          <para>Now the default log level for all model components is set to
          INFO, StreamFlow has the most verbose log level.</para>

          <blockquote>
            <programlisting> model(classname:"my.model") {
   <emphasis role="bold"><emphasis role="bold"><emphasis role="bold"> logging (all:"OFF")                          
</emphasis></emphasis></emphasis> }
</programlisting>
          </blockquote>

          <para>The logging element above turns off all logging for the whole
          model. In such a configuration, even severe problems within
          components are not reported. This statement should be used with
          care.</para>

          <para></para>

          <para><indexterm>
              <primary>Simulation Element</primary>

              <secondary>logging{}</secondary>
            </indexterm><emphasis role="bold">Element
          logging{}</emphasis></para>

          <para><variablelist>
              <varlistentry>
                <term>Name</term>

                <listitem>
                  <para><code>logging</code> - assigns log levels to
                  components</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Properties</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="4">
                        <thead>
                          <row>
                            <entry align="center"> Name</entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Value</entry>

                            <entry align="center">Required</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>all</code></entry>

                            <entry>The base log level for all components in the
                            model.</entry>

                            <entry><code>'OFF', 'SEVERE', 'WARNING', 'INFO',
                            'CONFIG', 'FINE', 'FINER', 'FINEST'</code></entry>

                            <entry>N (default: <code>WARNING</code>)</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Sub-elements</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="5">
                        <thead>
                          <row>
                            <entry align="center"> Name</entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Type</entry>

                            <entry align="center">Default</entry>

                            <entry align="center">Occurrences</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>&lt;comp name&gt; &lt;log
                            level&gt;</code></entry>

                            <entry>single component log level</entry>

                            <entry><code>&lt;String&gt; ['OFF', 'SEVERE',
                            'WARNING', 'INFO', 'CONFIG', 'FINE', 'FINER',
                            'FINEST']</code></entry>

                            <entry>-</entry>

                            <entry>*</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Parent(s)</term>

                <listitem>
                  <para><code>model</code></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Notes</term>

                <listitem>
                  <itemizedlist>
                    <listitem>
                      <para>If there is no logging element with a model
                      element, all components will default to the
                      <code>WARNING</code> level.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para></para>

          <section>
            <title>Setting up logging in a component</title>

            <para>To use the logging features within a simulation as described
            in the previous section, the component has to be setup properly.
            It has to obtain and use a logger object:</para>

            <para>Usually, the logger object is obtained as a static reference
            somewhere in the declaration part of a component:</para>

            <para></para>

            <blockquote>
              <programlisting> <emphasis role="bold">import java.util.logging.*;</emphasis>                 // 1.
 ...
 public class Ddsolrad {

 <emphasis role="bold">static final Logger log = 
    Logger.getLogger("oms3.model." + Ddsolrad.class.getSimpleName());</emphasis> //2.
 ...

  @Execute
  public void exec() {
    ...

     <emphasis role="bold">if (log.isLoggable(Level.INFO)) {           // 3.
         log.info("Solrad " + basin_potsw);      // 4.
     }    </emphasis>
  }
 ...
}
</programlisting>
            </blockquote>

            <orderedlist>
              <listitem>
                <para>Import the logging classes from the
                <code>java.util</code> package.</para>
              </listitem>

              <listitem>
                <para>Obtain the logger using the
                <code>Logger.getLogger()</code> call. Declare this reference
                <code>static</code> to share it across all instances of this
                class and <code>final</code> to make it a constant. The
                argument must start with the String "oms3.model." and must to
                end with the component's simple class name. Use
                <code>getClassName()</code> as shown above to obtain this name
                from the class, instead if manually adding this to the logger
                name String. Refactoring tools will respect this and will
                change the logger name properly if needed.</para>
              </listitem>

              <listitem>
                <para>At any location within the component methods the logger
                can be used. As shown above, 'guarded logging' is recommended.
                It is a pattern that checks to see if a log statement will
                result in output before it is executed. This will reduce the
                memory fragmentation and garbage collection by avoiding the
                creation of unnecessary strings if log levels are disabled.
                The statement here checks if logging is enabled at the
                <code>INFO</code> level and above.</para>
              </listitem>

              <listitem>
                <para>The statement issues the logging message at the
                '<code>INFO</code>' level. Use the methods
                <code>servere()</code>, <code>warning()</code>,
                <code>info()</code>, <code>config()</code>,
                <code>fine()</code>, <code>finer()</code>, and
                <code>finest()</code> accordingly.</para>
              </listitem>
            </orderedlist>

            <para>The use of Logging in component provides great flexibility
            for diagnostics and messaging, that is efficient and configurable
            from within a simulation.</para>
          </section>
        </section>
      </section>

      <section>
        <title>Analysis (<code>analysis</code>)</title>

        <para>An analysis elements provides for post run analysis by means of
        plotting/graphing features. It is an optional part of a simulation.
        Performing an analysis will usually result in graphs. The following
        basic types of analysis plots are available</para>

        <itemizedlist>
          <listitem>
            <para>Time series plots</para>
          </listitem>

          <listitem>
            <para>Flow duration plots</para>
          </listitem>

          <listitem>
            <para>Scatter plots</para>
          </listitem>
        </itemizedlist>

        <para>In addition for Ensemble Streamflow Prediction:</para>

        <itemizedlist>
          <listitem>
            <para>Esp trace analysis plots</para>
          </listitem>
        </itemizedlist>

        <para>An analysis can contain any number of those plots as
        sub-elements as shown below.</para>

        <para><blockquote>
            <programlisting>sim(name:"Efcarson") {
  ... 
  <emphasis role="bold">analysis(title:"Simulation Output") {</emphasis>
       tsplot(title:"East Fork Carson") {
            x(file:"%last/out1.csv", column:"date")
            y(file:"%last/out1.csv", column:"basin_cfs")
            y(file:"%last/out1.csv", column:"runoff[0]")
        }
        tsplot(title:"Error") {
            x(file:"%last/out1.csv",  column:"date")
            expr(eq:"sim - obs") {    
                sim(file:"%last/out1.csv", column:"basin_cfs")
                obs(file:"%last/out1.csv", column:"runoff[0]")
            }
            expr(eq:"sim - obs", acc:true) {
                sim(file:"%last/out1.csv", column:"basin_cfs")
                obs(file:"%last/out1.csv", column:"runoff[0]")
            }
        }
        flowduration {
            y(file:"%last/out1.csv", column:"basin_cfs")
            y(file:"%last/out1.csv", column:"runoff[0]")
        }
        scatterplot {
            x(file:"%last/out1.csv", column:"basin_cfs")
            y(file:"%last/out1.csv", column:"runoff[0]")
        }
    }
    ...
 }</programlisting>
          </blockquote></para>

        <para>The configuration as shown above will result in output graphs as
        showed in Figure ???. The whole analysis will appear as a separate
        window, each plot will have its own tab and graph. The Figure ???
        actually shows the same window with different tab being
        activated.</para>

        <para></para>

        <figure>
          <title>Example Analysis</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Handbook/Slide13.PNG"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>There are some general rules for referencing data sets that
        apply to all analysis types as described in the following
        sub-sections.</para>

        <para></para>

        <section>
          <title>Referencing data sets</title>

          <para>All plots are referencing data sets that are stored as CSV
          tabular data. To identify a column a (i) file name, (ii) table name,
          and (iii) column name have to be provided. However, the analysis can
          handle some shortcuts in context of the simulation. There are some
          examples:</para>

          <para><blockquote>
              <programlisting> x(file:"c:/tmp/SIM/0003/out1.csv", table"efc", column:"runoff")
</programlisting>
            </blockquote></para>

          <para>A column is referenced fully by its file, table, and column
          name. The file name is absolute.</para>

          <blockquote>
            <programlisting> x(file:"c:/tmp/SIM/%last/out1.csv", table"efc", column:"runoff")
</programlisting>
          </blockquote>

          <para>A column is referenced fully by its file, table, and column
          name. The file name is absolute but references the last simulation
          run. The meaning of 'last' depends on the chosen output
          strategy.</para>

          <blockquote>
            <programlisting> x(file:"%last/out1.csv", table"efc", column:"runoff")
</programlisting>
          </blockquote>

          <para>Now the file reference is in context to the simulation. It
          points to a file in the last output folder for this
          simulation.</para>

          <blockquote>
            <programlisting> x(file:"%last/out1.csv", column:"runoff")
</programlisting>
          </blockquote>

          <para>If the table name is not provided, the name of the simulation
          is assumed. The last variant is preferred, since it provides the
          most flexibility for referencing data path independent.</para>

          <para>OMS3 defines 3 'variables' to refer to s simulation run
          context. They can be used in a <code>file</code> value as shown
          above. Note, that for a <code>SIMPLE</code> output strategy, they
          all refer to the same output folder.</para>

          <variablelist>
            <varlistentry>
              <term><code>%first</code></term>

              <listitem>
                <para>The first simulation output in this run sequence. (For
                numbered outputs is the folder with the lowest number, for
                timed output the oldest simulation time)</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><code>%previous</code></term>

              <listitem>
                <para>The previous previous simulation output in this run
                sequence. (For numbered output this is the folder with the
                highest number - 1, for timed output the second recent
                simulation time)</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><code>%last</code></term>

              <listitem>
                <para>The last simulation output in this sequence (For
                numbered output this is the folder with the highest number,
                for timed output the most recent simulation time)</para>
              </listitem>
            </varlistentry>
          </variablelist>

          <para>Using those variables has several benefits. A analysis
          configuration needs to created once and can always reference the
          most recent output of a simulation after each run (use
          <code>%last</code>). I addition, someone can always compare the last
          run's output with the previous output and analyse the effect of
          model parameter changes. In another scenario a modeller might want
          to compare the last run's output against a baseline data set, that
          is being referenced with a full qualified absolute path name. Again,
          not analysis file needs to be adjusted after each run.
          <code>%first</code>, <code>%previous</code>, and <code>%last</code>
          are supporting therefore the modeller's work flow.</para>

          <para><indexterm>
              <primary>Simulation Element</primary>

              <secondary>axis{}</secondary>
            </indexterm><emphasis role="bold">Element axis{}</emphasis></para>

          <para><variablelist>
              <varlistentry>
                <term>Name</term>

                <listitem>
                  <para><code>axis (x,y, ...) </code>- column reference</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Properties</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="4">
                        <thead>
                          <row>
                            <entry align="center"> Name</entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Type</entry>

                            <entry align="center">Required</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>file</code></entry>

                            <entry>CSV file name</entry>

                            <entry>String</entry>

                            <entry>y</entry>
                          </row>

                          <row>
                            <entry><code>table</code></entry>

                            <entry>table name.</entry>

                            <entry>String</entry>

                            <entry>n (default simulation name)</entry>
                          </row>

                          <row>
                            <entry><code>column</code></entry>

                            <entry>column name.</entry>

                            <entry>String</entry>

                            <entry>y</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Parent(s)</term>

                <listitem>
                  <para><code>timeseries, flowduration, scatter</code></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Notes</term>

                <listitem>
                  <itemizedlist>
                    <listitem>
                      <para>The y axis must be referencing a column with
                      numerical values.</para>
                    </listitem>

                    <listitem>
                      <para>Columns can have different number of rows.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </section>

        <section>
          <title>Time Series</title>

          <para>A simple time series plot can be configured using the
          <code>timeseries</code> element within an analysis. It takes one x
          sub element referring to the time series column and a variable
          number of y elements for the data graphs.</para>

          <para><blockquote>
              <programlisting> analysis { 
  <emphasis role="bold">timeseries(title:"East Fork Carson") {
      x(file:"%last/out1.csv", column:"date")
      y(file:"%last/out1.csv", column:"basin_cfs")
      y(file:"%last/out2.csv", column:"runoff[0]")
   }</emphasis>
   ...
 }
</programlisting>
            </blockquote></para>

          <para>The example above defines the x axis as the date column of the
          last run that produces out1.csv. The two y data sets (basin_cfs, and
          runoff[0]) are obtained from different files. The visual output
          might look like the screen shot below.</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Handbook/Slide14.PNG"></imagedata>
            </imageobject>
          </mediaobject>

          <para><emphasis role="bold"></emphasis></para>

          <para><emphasis role="bold"><indexterm>
              <primary>Simulation Element</primary>

              <secondary>timeseries{}</secondary>
            </indexterm><emphasis role="bold">Element
          timeseries{}</emphasis></emphasis></para>

          <para><variablelist>
              <varlistentry>
                <term>Name</term>

                <listitem>
                  <para><code>timeseries </code>- time series chart</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Properties</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="4">
                        <thead>
                          <row>
                            <entry align="center"> Name</entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Type</entry>

                            <entry align="center">Required</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>title</code></entry>

                            <entry>chart title.</entry>

                            <entry>String</entry>

                            <entry>N</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Sub elements</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="5">
                        <thead>
                          <row>
                            <entry align="center"> Name</entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Type</entry>

                            <entry align="center">Default</entry>

                            <entry align="center">Occurrences</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>x</code></entry>

                            <entry>x axis, independent var</entry>

                            <entry>Date column</entry>

                            <entry></entry>

                            <entry>1</entry>
                          </row>

                          <row>
                            <entry><code>y</code></entry>

                            <entry>y axis</entry>

                            <entry>value column</entry>

                            <entry></entry>

                            <entry>+</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Parent(s)</term>

                <listitem>
                  <para><code>analysis</code></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Notes</term>

                <listitem>
                  <itemizedlist>
                    <listitem>
                      <para>The x axis must be referencing a column with
                      dates.</para>
                    </listitem>

                    <listitem>
                      <para>All columns must have the same number of
                      rows.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para></para>

          <para></para>
        </section>

        <section>
          <title>Flow Duration</title>

          <para>Flow duration is a plot showing the percentage of time that
          stream flow is likely to equal or exceed some specified value of
          interest. It can be used to show the percentage of time river flow
          can be expected to exceed a design flow of some specified value, or
          to show the discharge of the stream that occurs or is exceeded some
          percent of the time.</para>

          <para>Within an analysis, the <code>flowduration</code> element
          allows the creation of such graphs. It takes y axis elements as sub
          elements from which the flow duration gets computed.</para>

          <blockquote>
            <programlisting> analysis { 
 <emphasis role="bold">  flowduration {
       y(file:"%last/out1.csv", column:"basin_cfs")
       y(file:"%last/out1.csv", column:"runoff[0]")    
   }</emphasis>
   ...
 }
</programlisting>
          </blockquote>

          <para>This example defines the flow duration with two graphs. The
          visual output is shown below.</para>

          <para><mediaobject>
              <imageobject>
                <imagedata fileref="images/Handbook/Slide15.PNG"></imagedata>
              </imageobject>
            </mediaobject></para>

          <para>A flow duration curve is a plot of discharge vs. % of time
          that a particular discharge was equaled or exceeded. The area under
          the flow duration curve (with arithmetic scales) gives the average
          daily flow, and the median daily flow is the 50% value.</para>

          <para><indexterm>
              <primary>Simulation Element</primary>

              <secondary>flowduration{}</secondary>
            </indexterm><emphasis role="bold">Element
          flowduration{}</emphasis></para>

          <para><variablelist>
              <varlistentry>
                <term>Name</term>

                <listitem>
                  <para><code>flowduration </code>- flow duration chart</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Properties</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="4">
                        <thead>
                          <row>
                            <entry align="center"> Name</entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Type</entry>

                            <entry align="center">Required</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>title</code></entry>

                            <entry>chart title.</entry>

                            <entry>String</entry>

                            <entry>N</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Sub elements</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="5">
                        <thead>
                          <row>
                            <entry align="center"> Name</entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Type</entry>

                            <entry align="center">Default</entry>

                            <entry align="center">Occurrences</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>y</code></entry>

                            <entry>y axis</entry>

                            <entry>value column</entry>

                            <entry></entry>

                            <entry>+</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Parent(s)</term>

                <listitem>
                  <para><code>analysis</code></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Notes</term>

                <listitem>
                  <itemizedlist>
                    <listitem>
                      <para>The y axis must be referencing a column with
                      numerical values.</para>
                    </listitem>

                    <listitem>
                      <para>Columns can have different number of rows.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para></para>

          <para></para>
        </section>

        <section>
          <title>Scatter</title>

          <para>Scatter plots show the relationship between two variables by
          displaying data points on a two-dimensional graph. They are useful
          in the early stages of analysis when exploring data before actually
          calculating a correlation coefficient or fitting a regression curve.
          For example, a scatter plot can help one to determine whether a
          linear regression model is appropriate.</para>

          <para>The <code>scatter</code> element of an analysis provides for
          an easy creation of a scatter plot:</para>

          <para><blockquote>
              <programlisting> analysis { 
   <emphasis role="bold">scatter {
     x(file:"%last/out1.csv", column:"basin_cfs")
     y(file:"%last/out1.csv", column:"runoff[0]")
   }</emphasis>
   ...
 }
</programlisting>
            </blockquote>Provide x and y axis information accordingly. The
          setup above indicates the correlation of a simulated and observed
          property such as runoff</para>

          <para><mediaobject>
              <imageobject>
                <imagedata fileref="images/Handbook/Slide16.PNG"></imagedata>
              </imageobject>
            </mediaobject></para>

          <para><indexterm>
              <primary>Simulation Element</primary>

              <secondary>scatter{}</secondary>
            </indexterm><emphasis role="bold">Element
          scatter{}</emphasis></para>

          <para><variablelist>
              <varlistentry>
                <term>Name</term>

                <listitem>
                  <para><code>scatter </code>- scatter plot</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Properties</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="4">
                        <thead>
                          <row>
                            <entry align="center"> Name</entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Type</entry>

                            <entry align="center">Required</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>title</code></entry>

                            <entry>chart title.</entry>

                            <entry>String</entry>

                            <entry>N</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Sub elements</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="5">
                        <thead>
                          <row>
                            <entry align="center"> Name</entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Type</entry>

                            <entry align="center">Default</entry>

                            <entry align="center">Occurrences</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>x</code></entry>

                            <entry>x axis variable</entry>

                            <entry>value column</entry>

                            <entry></entry>

                            <entry>1</entry>
                          </row>

                          <row>
                            <entry><code>y</code></entry>

                            <entry>y axis variable</entry>

                            <entry>value column</entry>

                            <entry></entry>

                            <entry>1</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Parent(s)</term>

                <listitem>
                  <para><code>analysis</code></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Notes</term>

                <listitem>
                  <itemizedlist>
                    <listitem>
                      <para>The x and y axis must be referencing a column with
                      numerical values.</para>
                    </listitem>

                    <listitem>
                      <para>Columns must have the same number of rows.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </section>

        <section>
          <title>Computed Ad-hoc graphs</title>

          <para>The previous examples are fully based on column data obtained
          from data files. However sometimes an derived data set should be
          used instead on an ad-hoc base, for example to plot the sum of the
          difference of two data sets without creating computing this value in
          the model or manipulate the date sets with other tools. Another
          example would be the ad-hoc creation of mass balance term.</para>

          <para>The <code>calc</code> element was introduced to support the
          creation of arbitrary derived data sets for all analysis types
          above. It allows the specification of an user defined equation, that
          operates on all elements of data columns. An example:</para>

          <para><blockquote>
              <programlisting> analysis { 
    timeseries(title:"Error") {
      x(file:"%last/out1.csv",  column:"date")
      <emphasis role="bold">calc(eq:"sim - obs") {
          sim(file:"%last/out1.csv", column:"basin_cfs")
          obs(file:"%last/out1.csv", column:"runoff[0]")
      }</emphasis>
   ...
 }
</programlisting>
            </blockquote>The <code>calc</code> element in the example above is
          used as y axis. It has two major parts that relate to each other.
          First, the <code>eq</code> attribute takes a user defined term as
          string argument, in this case: <code>"sim - obs"</code>. The names
          are user defined, and they have to match the names that are used for
          column data that is enclosed in the <code>calc</code> element.
          "<code>sim(...)</code>, and '<code>obs(...)</code>' are two
          definitions of data columns with arbitrary names. As a rule: Any
          name being used in <code>eq</code> should occur as element within
          <code>calc</code>. Any complex term can be created in
          <code>eq</code> and <code>calc</code> can contain an arbitrary
          number of column references. As a result, the
          <code>timeseries</code> plot will have the element-wise diff of
          basin_cfs and runoff shown as y axis.</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Handbook/Slide17.PNG"></imagedata>
            </imageobject>
          </mediaobject>

          <para>The graph above shows two calculated data sets. The second
          definition accumulates the calculated value of an element over the
          data set. The <code>accu</code> flag is set to true.</para>

          <para><blockquote>
              <programlisting> analysis { 
     timeseries(title:"Error") {
            x(file:"%last/out1.csv",  column:"date")
           <emphasis role="bold"> calc(eq:"sim - obs") {
                sim(file:"%last/out1.csv", column:"basin_cfs")
                obs(file:"%last/out1.csv", column:"runoff[0]")
            }
            calc(eq:"sim - obs", acc:true) {
                sim(file:"%last/out1.csv", column:"basin_cfs")
                obs(file:"%last/out1.csv", column:"runoff[0]")
            }</emphasis>
     }
 }
</programlisting>
            </blockquote></para>

          <para></para>

          <para><indexterm>
              <primary>Simulation Element</primary>

              <secondary>calc{}</secondary>
            </indexterm><emphasis role="bold">Element calc{}</emphasis></para>

          <para><variablelist>
              <varlistentry>
                <term>Name</term>

                <listitem>
                  <para><code>calc </code>- calculate data sets ad-hoc</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Properties</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="4">
                        <thead>
                          <row>
                            <entry align="center"> Name</entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Type</entry>

                            <entry align="center">Required</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>title</code></entry>

                            <entry>chart title.</entry>

                            <entry>String</entry>

                            <entry>n</entry>
                          </row>

                          <row>
                            <entry><code>eq</code></entry>

                            <entry>the equation</entry>

                            <entry>String</entry>

                            <entry>y</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Sub elements</term>

                <listitem>
                  <para><informaltable>
                      <tgroup cols="5">
                        <thead>
                          <row>
                            <entry align="center"> Name</entry>

                            <entry align="center"> Description</entry>

                            <entry align="center">Type</entry>

                            <entry align="center">Default</entry>

                            <entry align="center">Occurrences</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry><code>&lt;name&gt;</code></entry>

                            <entry>data set variable</entry>

                            <entry>value column</entry>

                            <entry></entry>

                            <entry>+</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </informaltable></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Parent(s)</term>

                <listitem>
                  <para><code>timeseries, scatter, flowduration</code></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Notes</term>

                <listitem>
                  <itemizedlist>
                    <listitem>
                      <para>The sub elements must be referencing a column with
                      numerical values.</para>
                    </listitem>

                    <listitem>
                      <para>Columns must have the same number of rows.</para>
                    </listitem>

                    <listitem>
                      <para>names for sub elements must be unique.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para></para>
        </section>
      </section>

      <section>
        <title>Dynamic Output (output)</title>

        <para>Optional to a simulation, the output element can be used to
        capture and store output field values in an CSV output file. This is
        an alternative to a component-based solution, where the a dedicated
        output component is a integrated part of the model. Both approaches do
        have pro and cons.</para>

        <variablelist>
          <varlistentry>
            <term>Model output component</term>

            <listitem>
              <para><emphasis>Pros</emphasis> - Can write to any data store;
              essential model feature, hight performance</para>

              <para><emphasis>Cons</emphasis> - No ad-hoc change of output
              variables, change needs model recompilation.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Simulation output element</term>

            <listitem>
              <para><emphasis>Pros</emphasis> - Output variables can be
              changed or disabled altogether without model recompilation, very
              flexible. Well suited for component output ad-hoc
              inspection</para>

              <para><emphasis>Cons</emphasis> - Slower in performance that
              dedicated output component. Only CSV data file output supported
              for the output element</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Note that both types of output definition can co-exist in one
        simulation.</para>

        <para>The examples below show the use of the output element within a
        simulation.</para>

        <para><blockquote>
            <programlisting> sim(name:"Efcarson") {
    // ...Efficiencies
    model(classname:"prms2008.PrmsDdJh") {
       // ...
    }
  <emphasis role="bold"> output(time:"date", vars:"basin_gwflow_cfs,basin_cfs,runoff[0]", 
           fformat="7.3f", file:"out1.csv")</emphasis>
   // ... 
}</programlisting>
          </blockquote>The output is driven by <code>date</code>, an out field
        in the model. The variables to be captured in an output file called
        '<code>out1.csv</code>' are listed in vars. Note that an array element
        <code>runoff[0]</code> is a part of this. The numerical output format
        for floating point variables is "<code>7.3f</code>" (7 digits total, 3
        decimal rounding). The output file gets stored to the output folder as
        defined in <code>outputstrategy</code>. For the configuration above it
        will have the following content:</para>

        <para><blockquote>
            <programlisting> @T, "Efcarson"
  Created, "Tue Sep 15 14:31:36 MDT 2009"
 @H, date, basin_gwflow_cfs, basin_cfs, runoff[0]
  Type, Date, Double, Double, Double
 ,1980-10-01 12:00:00,    116.453,    116.453,     84.000
 ,1980-10-02 12:00:00,    114.974,    117.640,     82.000
 ,1980-10-03 12:00:00,    113.514,    113.514,     80.000
 ,1980-10-04 12:00:00,    112.072,    112.072,     80.000
 ,1980-10-05 12:00:00,    110.649,    110.649,     80.000
 ...</programlisting>
          </blockquote>Note: The name of the simulation will be used as table
        name (EFcarson).</para>

        <para></para>

        <para><indexterm>
            <primary>Simulation Element</primary>

            <secondary>output{}</secondary>
          </indexterm><emphasis role="bold">Element output{}</emphasis></para>

        <para><variablelist>
            <varlistentry>
              <term>Name</term>

              <listitem>
                <para><code>output </code>- simulation defined output</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Properties</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="4">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Required</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>time</code></entry>

                          <entry>the time field to be used to trigger output
                          on a time change.</entry>

                          <entry>String</entry>

                          <entry>Y</entry>
                        </row>

                        <row>
                          <entry><code>vars</code></entry>

                          <entry>a list of output fields that provides the
                          values on each time step</entry>

                          <entry>String, (field names separated by ',', ';',
                          or ':'</entry>

                          <entry>Y (at least one field name)</entry>
                        </row>

                        <row>
                          <entry><code>fformat</code></entry>

                          <entry>format for floating point values</entry>

                          <entry>String</entry>

                          <entry>N (default '10.3')</entry>
                        </row>

                        <row>
                          <entry><code>dformat</code></entry>

                          <entry>format for integer values</entry>

                          <entry>String</entry>

                          <entry>N (default '10')</entry>
                        </row>

                        <row>
                          <entry><code>file</code></entry>

                          <entry>the output file</entry>

                          <entry>String</entry>

                          <entry>N (if missing output goes to the console,
                          otherwise to the specified file located in the
                          output folder.)</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Parent(s)</term>

              <listitem>
                <para><code>sim</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Notes</term>

              <listitem>
                <itemizedlist>
                  <listitem>
                    <para>If multiple output elements are used, each should
                    have its own unique file name. It is also recommended to
                    use a file for output when specifying multiple outputs in
                    a simulation.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para></para>
      </section>

      <section>
        <title>Summary Output (<code>summary</code>)</title>

        <para>The summary element provides ad-hoc statistics for selected
        model (state) variables. This element is a part of a simulation.
        Statistical moments are computed over an aggregation period that can
        be selected. The period can be daily, weekly, monthly, yearly, or the
        entire simulation. A summary is always specified for
        <emphasis>one</emphasis> variable at a time. That variable
        <emphasis>must</emphasis> be output of one component in the
        model.</para>

        <para>The examples below shows the use of the summary element within
        the '<code>SimpleModel</code>' simulation.</para>

        <para><blockquote>
            <programlisting> sim(name:"SimpleModel") {      
    
    // define the model
    model(classname:"tw.Thornthwaite") {
        ...
    }
    <emphasis role="bold">summary(time:"time", var:"basin_ro", statistics:MAX, file:stats.txt)</emphasis>
 }</programlisting>
          </blockquote></para>

        <para>The maximum value of the output variable basin_ro gets computed
        over the total simulation period, and the output will be stored in the
        file stats.txt, located in the simulation run output folder.</para>

        <para><blockquote>
            <programlisting> sim(name:"SimpleModel") {      
    
    // define the model
    model(classname:"tw.Thornthwaite") {
        ...
    }
    <emphasis role="bold">summary(time:"time", var:"runoff[4]", statistics:MEAN+MIN+LAG1, period:YEARLY)</emphasis>
 }</programlisting>
          </blockquote>The runoff array element #4 will be aggregated over one
        year and its minimum, mean and autocorrelation will be printed to the
        console.</para>

        <para></para>

        <table>
          <title>Statistical Moments</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry align="center"> Moment</entry>

                <entry align="center">Description </entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>MEAN</code></entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mi>MEAN</m:mi>

                        <m:mo>=</m:mo>

                        <m:mrow>
                          <m:mfrac>
                            <m:mi>1</m:mi>

                            <m:mi>N</m:mi>
                          </m:mfrac>

                          <m:mo>⁢</m:mo>

                          <m:mrow>
                            <m:munderover>
                              <m:mo>∑</m:mo>

                              <m:mi>i=1</m:mi>

                              <m:mi>N</m:mi>
                            </m:munderover>

                            <m:msub>
                              <m:mi>x</m:mi>

                              <m:mi>i</m:mi>
                            </m:msub>
                          </m:mrow>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>MAX</code></entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mi>MAX</m:mi>

                        <m:mo>=</m:mo>

                        <m:mrow>
                          <m:munder>
                            <m:mo>max</m:mo>

                            <m:mi>i</m:mi>
                          </m:munder>

                          <m:mrow>
                            <m:mo>(</m:mo>

                            <m:msub>
                              <m:mi>x</m:mi>

                              <m:mi>i</m:mi>
                            </m:msub>

                            <m:mo>)</m:mo>
                          </m:mrow>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>MIN</code></entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mi>MIN</m:mi>

                        <m:mo>=</m:mo>

                        <m:mrow>
                          <m:munder>
                            <m:mo>min</m:mo>

                            <m:mi>i</m:mi>
                          </m:munder>

                          <m:mrow>
                            <m:mo>(</m:mo>

                            <m:msub>
                              <m:mi>x</m:mi>

                              <m:mi>i</m:mi>
                            </m:msub>

                            <m:mo>)</m:mo>
                          </m:mrow>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>COUNT</code></entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mi>COUNT</m:mi>

                        <m:mo>=</m:mo>

                        <m:mrow>
                          <m:mi>count</m:mi>

                          <m:mo>⁡</m:mo>

                          <m:msub>
                            <m:mi>x</m:mi>

                            <m:mi>i</m:mi>
                          </m:msub>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>RANGE</code></entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mi>RANGE</m:mi>

                        <m:mo>=</m:mo>

                        <m:mrow>
                          <m:mrow>
                            <m:munder>
                              <m:mo>max</m:mo>

                              <m:mi>i</m:mi>
                            </m:munder>

                            <m:mrow>
                              <m:mo>(</m:mo>

                              <m:msub>
                                <m:mi>x</m:mi>

                                <m:mi>i</m:mi>
                              </m:msub>

                              <m:mo>)</m:mo>
                            </m:mrow>
                          </m:mrow>

                          <m:mo>-</m:mo>

                          <m:mrow>
                            <m:munder>
                              <m:mo>min</m:mo>

                              <m:mi>i</m:mi>
                            </m:munder>

                            <m:mrow>
                              <m:mo>(</m:mo>

                              <m:msub>
                                <m:mi>x</m:mi>

                                <m:mi>x</m:mi>
                              </m:msub>

                              <m:mo>)</m:mo>
                            </m:mrow>
                          </m:mrow>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>MEDIAN</code></entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mi>MED</m:mi>

                        <m:mo>=</m:mo>

                        <m:mrow>
                          <m:mo>{</m:mo>

                          <m:mtable>
                            <m:mtr>
                              <m:mtd>
                                <m:msub>
                                  <m:mi>Y</m:mi>

                                  <m:mi>(N+1)/2</m:mi>
                                </m:msub>
                              </m:mtd>

                              <m:mtd>
                                <m:mi>,if N is odd</m:mi>
                              </m:mtd>
                            </m:mtr>

                            <m:mtr>
                              <m:mtd>
                                <m:mrow>
                                  <m:mfrac>
                                    <m:mi>1</m:mi>

                                    <m:mi>2</m:mi>
                                  </m:mfrac>

                                  <m:mo>⁢</m:mo>

                                  <m:mrow>
                                    <m:mo>(</m:mo>

                                    <m:mrow>
                                      <m:msub>
                                        <m:mi>Y</m:mi>

                                        <m:mi>N/2</m:mi>
                                      </m:msub>

                                      <m:mo>+</m:mo>

                                      <m:msub>
                                        <m:mi>Y</m:mi>

                                        <m:mi>1+N/2</m:mi>
                                      </m:msub>
                                    </m:mrow>

                                    <m:mo>)</m:mo>
                                  </m:mrow>
                                </m:mrow>
                              </m:mtd>

                              <m:mtd>
                                <m:mi>,if N is even</m:mi>
                              </m:mtd>
                            </m:mtr>
                          </m:mtable>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>STDDEV</code></entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mi>SD</m:mi>

                        <m:mo>=</m:mo>

                        <m:msqrt>
                          <m:mrow>
                            <m:mfrac>
                              <m:mi>1</m:mi>

                              <m:mi>N</m:mi>
                            </m:mfrac>

                            <m:mo>⁢</m:mo>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>N</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>x</m:mi>

                                      <m:mi>i</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:menclose notation="top">
                                      <m:mi>x</m:mi>
                                    </m:menclose>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>
                          </m:mrow>
                        </m:msqrt>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>VAR</code></entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mi>VAR</m:mi>

                        <m:mo>=</m:mo>

                        <m:mrow>
                          <m:mfrac>
                            <m:mi>1</m:mi>

                            <m:mi>N</m:mi>
                          </m:mfrac>

                          <m:mo>⁢</m:mo>

                          <m:mrow>
                            <m:munderover>
                              <m:mo>∑</m:mo>

                              <m:mi>i=1</m:mi>

                              <m:mi>N</m:mi>
                            </m:munderover>

                            <m:msup>
                              <m:mrow>
                                <m:mo>(</m:mo>

                                <m:mrow>
                                  <m:msub>
                                    <m:mi>x</m:mi>

                                    <m:mi>i</m:mi>
                                  </m:msub>

                                  <m:mo>-</m:mo>

                                  <m:menclose notation="top">
                                    <m:mi>x</m:mi>
                                  </m:menclose>
                                </m:mrow>

                                <m:mo>)</m:mo>
                              </m:mrow>

                              <m:mi>2</m:mi>
                            </m:msup>
                          </m:mrow>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>MEANDEV</code></entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mi>MD</m:mi>

                        <m:mo>=</m:mo>

                        <m:mrow>
                          <m:mfrac>
                            <m:mi>1</m:mi>

                            <m:mi>N</m:mi>
                          </m:mfrac>

                          <m:mo>⁢</m:mo>

                          <m:mrow>
                            <m:munderover>
                              <m:mo>∑</m:mo>

                              <m:mi>i=1</m:mi>

                              <m:mi>N</m:mi>
                            </m:munderover>

                            <m:mrow>
                              <m:mo>|</m:mo>

                              <m:mrow>
                                <m:msub>
                                  <m:mi>x</m:mi>

                                  <m:mi>i</m:mi>
                                </m:msub>

                                <m:mo>-</m:mo>

                                <m:menclose notation="top">
                                  <m:mi>x</m:mi>
                                </m:menclose>
                              </m:mrow>

                              <m:mo>|</m:mo>
                            </m:mrow>
                          </m:mrow>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>SUM</code></entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mi>SUM</m:mi>

                        <m:mo>=</m:mo>

                        <m:mrow>
                          <m:munderover>
                            <m:mo>∑</m:mo>

                            <m:mi>i=1</m:mi>

                            <m:mi>N</m:mi>
                          </m:munderover>

                          <m:msub>
                            <m:mi>x</m:mi>

                            <m:mi>i</m:mi>
                          </m:msub>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>PROD</code></entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mi>PROD</m:mi>

                        <m:mo>=</m:mo>

                        <m:mrow>
                          <m:munderover>
                            <m:mo>∏</m:mo>

                            <m:mi>i=1</m:mi>

                            <m:mi>N</m:mi>
                          </m:munderover>

                          <m:msub>
                            <m:mi>x</m:mi>

                            <m:mi>i</m:mi>
                          </m:msub>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>Q1</code></entry>

                <entry>First Quartile [Tbd]</entry>
              </row>

              <row>
                <entry><code>Q2</code></entry>

                <entry>Second Quartile (MEDIAN) [TBD]</entry>
              </row>

              <row>
                <entry><code>Q3</code></entry>

                <entry>Third Quartile [TBD]</entry>
              </row>

              <row>
                <entry><code>LAG1</code></entry>

                <entry>LAG-1 autocorrelation [TBD]</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para><emphasis role="bold"></emphasis></para>

        <para><emphasis role="bold"><indexterm>
            <primary>Simulation Element</primary>

            <secondary>summary{}</secondary>
          </indexterm><emphasis role="bold">Element
        summary{}</emphasis></emphasis></para>

        <para><variablelist>
            <varlistentry>
              <term>Name</term>

              <listitem>
                <para><code>summary </code> - ad-hoc summary statistics</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Properties</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="4">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Required</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>time</code></entry>

                          <entry>the time field to be used to compute the
                          aggregation period</entry>

                          <entry>String</entry>

                          <entry>Y</entry>
                        </row>

                        <row>
                          <entry><code>var</code></entry>

                          <entry>a output field that provides the
                          values</entry>

                          <entry>String</entry>

                          <entry>Y</entry>
                        </row>

                        <row>
                          <entry><code>statistics</code></entry>

                          <entry>Statistical moment(s) to compute</entry>

                          <entry><emphasis>Statistical Moments</emphasis>
                          KEY</entry>

                          <entry>Y</entry>
                        </row>

                        <row>
                          <entry><code>period</code></entry>

                          <entry>aggregation period</entry>

                          <entry>'<code>DAILY</code>' | '<code>WEEKLY</code>'
                          | '<code>MONTHLY</code>' | '<code>YEARLY</code>' |
                          '<code>TOTAL</code>'</entry>

                          <entry>N (defaults to '<code>TOTAL</code>')</entry>
                        </row>

                        <row>
                          <entry><code>file</code></entry>

                          <entry>the output file</entry>

                          <entry>String</entry>

                          <entry>N (if missing output goes to the console,
                          otherwise to the specified file located in the
                          output folder.)</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Parent(s)</term>

              <listitem>
                <para><code>sim</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Notes</term>

              <listitem>
                <itemizedlist>
                  <listitem>
                    <para>Multiple keys for statistics can be combined using
                    the <code>+</code> operator, the output will be a combined
                    table.</para>
                  </listitem>

                  <listitem>
                    <para>Multiple statistics can use the same file for
                    output. They get appended.</para>
                  </listitem>

                  <listitem>
                    <para>Aggregation periods cannot be combined.</para>
                  </listitem>

                  <listitem>
                    <para>Variable names may refer to scalars or array
                    elements using the Java style (e.g. 2D array element:
                    <code>ro[1][0]</code>)</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </section>

      <section>
        <title>Model Efficiencies (<code>efficiency</code>)</title>

        <para>Model efficiencies are commonly used to quantify the prediction
        performance of a simulation model by computing some aggregate based on
        observed and simulated values of the same model property.</para>

        <para>Several model efficiencies are available, see table
        below.</para>

        <para></para>

        <para></para>

        <para></para>

        <table>
          <title>Objective Functions</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry align="center"> Name</entry>

                <entry align="center">Description </entry>

                <entry align="center">Equation</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>ABSDIF</code></entry>

                <entry>Absolute difference</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:munderover>
                          <m:mo>∑</m:mo>

                          <m:mi>i=1</m:mi>

                          <m:mi>n</m:mi>
                        </m:munderover>

                        <m:mrow>
                          <m:menclose notation="left right">
                            <m:mrow>
                              <m:msub>
                                <m:mi>Q</m:mi>

                                <m:mi>i,o</m:mi>
                              </m:msub>

                              <m:mo>-</m:mo>

                              <m:msub>
                                <m:mi>Q</m:mi>

                                <m:mi>i,s</m:mi>
                              </m:msub>
                            </m:mrow>
                          </m:menclose>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>ABSDIFLOG</code></entry>

                <entry>Absolute difference Log</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mrow>
                            <m:munderover>
                              <m:mo>∑</m:mo>

                              <m:mi>i=1</m:mi>

                              <m:mi>n</m:mi>
                            </m:munderover>

                            <m:mrow>
                              <m:mo>|</m:mo>

                              <m:mrow>
                                <m:mrow>
                                  <m:mi>ln</m:mi>

                                  <m:mo>⁡</m:mo>

                                  <m:msub>
                                    <m:mi>Q</m:mi>

                                    <m:mi>i, o</m:mi>
                                  </m:msub>
                                </m:mrow>

                                <m:mo>-</m:mo>

                                <m:mrow>
                                  <m:mi>ln</m:mi>

                                  <m:mo>⁡</m:mo>

                                  <m:msub>
                                    <m:mi>Q</m:mi>

                                    <m:mi>i, s</m:mi>
                                  </m:msub>
                                </m:mrow>
                              </m:mrow>

                              <m:mo>|</m:mo>
                            </m:mrow>
                          </m:mrow>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>AVE</code></entry>

                <entry>Absolute Volume Error</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mo>|</m:mo>

                          <m:mrow>
                            <m:munderover>
                              <m:mo>∑</m:mo>

                              <m:mi>i=1</m:mi>

                              <m:mi>n</m:mi>
                            </m:munderover>

                            <m:mrow>
                              <m:msub>
                                <m:mi>Q</m:mi>

                                <m:mi>i,s</m:mi>
                              </m:msub>

                              <m:mo>-</m:mo>

                              <m:msub>
                                <m:mi>Q</m:mi>

                                <m:mi>i,o</m:mi>
                              </m:msub>
                            </m:mrow>
                          </m:mrow>

                          <m:mo>|</m:mo>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>IOA</code></entry>

                <entry>Index of Agreement</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mi>1</m:mi>

                          <m:mo>-</m:mo>

                          <m:mfrac>
                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:mrow>
                                <m:mo>|</m:mo>

                                <m:mrow>
                                  <m:msub>
                                    <m:mi>Q</m:mi>

                                    <m:mi>i,o</m:mi>
                                  </m:msub>

                                  <m:mo>-</m:mo>

                                  <m:msub>
                                    <m:mi>Q</m:mi>

                                    <m:mi>i,s</m:mi>
                                  </m:msub>
                                </m:mrow>

                                <m:mo>|</m:mo>
                              </m:mrow>
                            </m:mrow>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:mrow>
                                <m:mrow>
                                  <m:mo>|</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i,s</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:menclose notation="top">
                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>o</m:mi>
                                      </m:msub>
                                    </m:menclose>
                                  </m:mrow>

                                  <m:mo>|</m:mo>
                                </m:mrow>

                                <m:mo>+</m:mo>

                                <m:mrow>
                                  <m:mo>|</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i,o</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:menclose notation="top">
                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>o</m:mi>
                                      </m:msub>
                                    </m:menclose>
                                  </m:mrow>

                                  <m:mo>|</m:mo>
                                </m:mrow>
                              </m:mrow>
                            </m:mrow>
                          </m:mfrac>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>IOA2</code></entry>

                <entry>Index of Agreement (Pow 2)</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mi>1</m:mi>

                          <m:mo>-</m:mo>

                          <m:mfrac>
                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i,o</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i,s</m:mi>
                                    </m:msub>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:mrow>
                                <m:msup>
                                  <m:mrow>
                                    <m:mo>(</m:mo>

                                    <m:mrow>
                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>i,s</m:mi>
                                      </m:msub>

                                      <m:mo>-</m:mo>

                                      <m:menclose notation="top">
                                        <m:msub>
                                          <m:mi>Q</m:mi>

                                          <m:mi>o</m:mi>
                                        </m:msub>
                                      </m:menclose>
                                    </m:mrow>

                                    <m:mo>)</m:mo>
                                  </m:mrow>

                                  <m:mi>2</m:mi>
                                </m:msup>

                                <m:mo>+</m:mo>

                                <m:msup>
                                  <m:mrow>
                                    <m:mo>(</m:mo>

                                    <m:mrow>
                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>i,o</m:mi>
                                      </m:msub>

                                      <m:mo>-</m:mo>

                                      <m:menclose notation="top">
                                        <m:msub>
                                          <m:mi>Q</m:mi>

                                          <m:mi>o</m:mi>
                                        </m:msub>
                                      </m:menclose>
                                    </m:mrow>

                                    <m:mo>)</m:mo>
                                  </m:mrow>

                                  <m:mi>2</m:mi>
                                </m:msup>
                              </m:mrow>
                            </m:mrow>
                          </m:mfrac>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>NS</code></entry>

                <entry>Nash-Sutcliffe</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mi>1</m:mi>

                          <m:mo>-</m:mo>

                          <m:mfrac>
                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i, o</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i, s</m:mi>
                                    </m:msub>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i, o</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:menclose notation="top">
                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>o</m:mi>
                                      </m:msub>
                                    </m:menclose>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>
                          </m:mfrac>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>NSLOG</code></entry>

                <entry>Log of Nash-Sutcliffe</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mi>1</m:mi>

                          <m:mo>-</m:mo>

                          <m:mfrac>
                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:mrow>
                                <m:mo>|</m:mo>

                                <m:mrow>
                                  <m:mrow>
                                    <m:mi>ln</m:mi>

                                    <m:mo>⁡</m:mo>

                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i,o</m:mi>
                                    </m:msub>
                                  </m:mrow>

                                  <m:mo>-</m:mo>

                                  <m:mrow>
                                    <m:mi>ln</m:mi>

                                    <m:mo>⁡</m:mo>

                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i,s</m:mi>
                                    </m:msub>
                                  </m:mrow>
                                </m:mrow>

                                <m:mo>|</m:mo>
                              </m:mrow>
                            </m:mrow>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:mrow>
                                <m:mo>|</m:mo>

                                <m:mrow>
                                  <m:mrow>
                                    <m:mi>ln</m:mi>

                                    <m:mo>⁡</m:mo>

                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i, o</m:mi>
                                    </m:msub>
                                  </m:mrow>

                                  <m:mo>-</m:mo>

                                  <m:mrow>
                                    <m:mi>ln</m:mi>

                                    <m:mo>⁡</m:mo>

                                    <m:menclose notation="top">
                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>o</m:mi>
                                      </m:msub>
                                    </m:menclose>
                                  </m:mrow>
                                </m:mrow>

                                <m:mo>|</m:mo>
                              </m:mrow>
                            </m:mrow>
                          </m:mfrac>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>NS2LOG</code></entry>

                <entry>Log of Nash-Sutcliffe (Pow 2)</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mi>1</m:mi>

                          <m:mo>-</m:mo>

                          <m:mfrac>
                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:mrow>
                                      <m:mi>ln</m:mi>

                                      <m:mo>⁡</m:mo>

                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>i,o</m:mi>
                                      </m:msub>
                                    </m:mrow>

                                    <m:mo>-</m:mo>

                                    <m:mrow>
                                      <m:mi>ln</m:mi>

                                      <m:mo>⁡</m:mo>

                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>i,s</m:mi>
                                      </m:msub>
                                    </m:mrow>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:mrow>
                                      <m:mi>ln</m:mi>

                                      <m:mo>⁡</m:mo>

                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>i, o</m:mi>
                                      </m:msub>
                                    </m:mrow>

                                    <m:mo>-</m:mo>

                                    <m:mrow>
                                      <m:mi>ln</m:mi>

                                      <m:mo>⁡</m:mo>

                                      <m:menclose notation="top">
                                        <m:msub>
                                          <m:mi>Q</m:mi>

                                          <m:mi>o</m:mi>
                                        </m:msub>
                                      </m:menclose>
                                    </m:mrow>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>
                          </m:mfrac>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>BIAS</code></entry>

                <entry>BIAS</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mfrac>
                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:mrow>
                                <m:mo>(</m:mo>

                                <m:mrow>
                                  <m:msub>
                                    <m:mi>Q</m:mi>

                                    <m:mi>i,o</m:mi>
                                  </m:msub>

                                  <m:mo>-</m:mo>

                                  <m:msub>
                                    <m:mi>Q</m:mi>

                                    <m:mi>i,s</m:mi>
                                  </m:msub>
                                </m:mrow>

                                <m:mo>)</m:mo>
                              </m:mrow>
                            </m:mrow>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msub>
                                <m:mi>Q</m:mi>

                                <m:mi>i,o</m:mi>
                              </m:msub>
                            </m:mrow>
                          </m:mfrac>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>PMCC</code></entry>

                <entry>Pearson product-moment correlation coefficient</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mfrac>
                          <m:mrow>
                            <m:munderover>
                              <m:mo>∑</m:mo>

                              <m:mi>i=1</m:mi>

                              <m:mi>n</m:mi>
                            </m:munderover>

                            <m:mrow>
                              <m:mrow>
                                <m:mo>(</m:mo>

                                <m:mrow>
                                  <m:msub>
                                    <m:mi>X</m:mi>

                                    <m:mi>i</m:mi>
                                  </m:msub>

                                  <m:mo>-</m:mo>

                                  <m:menclose notation="top">
                                    <m:mi>X</m:mi>
                                  </m:menclose>
                                </m:mrow>

                                <m:mo>)</m:mo>
                              </m:mrow>

                              <m:mo>⁢</m:mo>

                              <m:mrow>
                                <m:mo>(</m:mo>

                                <m:mrow>
                                  <m:msub>
                                    <m:mi>Y</m:mi>

                                    <m:mi>i</m:mi>
                                  </m:msub>

                                  <m:mo>-</m:mo>

                                  <m:menclose notation="top">
                                    <m:mi>Y</m:mi>
                                  </m:menclose>
                                </m:mrow>

                                <m:mo>)</m:mo>
                              </m:mrow>
                            </m:mrow>
                          </m:mrow>

                          <m:mrow>
                            <m:msqrt>
                              <m:mrow>
                                <m:munderover>
                                  <m:mo>∑</m:mo>

                                  <m:mi>i=1</m:mi>

                                  <m:mi>n</m:mi>
                                </m:munderover>

                                <m:msup>
                                  <m:mrow>
                                    <m:mo>(</m:mo>

                                    <m:mrow>
                                      <m:msub>
                                        <m:mi>X</m:mi>

                                        <m:mi>i</m:mi>
                                      </m:msub>

                                      <m:mo>-</m:mo>

                                      <m:menclose notation="top">
                                        <m:mi>X</m:mi>
                                      </m:menclose>
                                    </m:mrow>

                                    <m:mo>)</m:mo>
                                  </m:mrow>

                                  <m:mi>2</m:mi>
                                </m:msup>
                              </m:mrow>
                            </m:msqrt>

                            <m:mo>⁢</m:mo>

                            <m:msqrt>
                              <m:mrow>
                                <m:munderover>
                                  <m:mo>∑</m:mo>

                                  <m:mi>i=1</m:mi>

                                  <m:mi>n</m:mi>
                                </m:munderover>

                                <m:msup>
                                  <m:mrow>
                                    <m:mo>(</m:mo>

                                    <m:mrow>
                                      <m:msub>
                                        <m:mi>Y</m:mi>

                                        <m:mi>i</m:mi>
                                      </m:msub>

                                      <m:mo>-</m:mo>

                                      <m:menclose notation="top">
                                        <m:mi>Y</m:mi>
                                      </m:menclose>
                                    </m:mrow>

                                    <m:mo>)</m:mo>
                                  </m:mrow>

                                  <m:mi>2</m:mi>
                                </m:msup>
                              </m:mrow>
                            </m:msqrt>
                          </m:mrow>
                        </m:mfrac>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>RMSE</code></entry>

                <entry>Root Mean Square Error</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:msqrt>
                          <m:mrow>
                            <m:mfrac>
                              <m:mi>1</m:mi>

                              <m:mi>n</m:mi>
                            </m:mfrac>

                            <m:mo>⁢</m:mo>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>s</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>o</m:mi>
                                    </m:msub>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>
                          </m:mrow>
                        </m:msqrt>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>TRMSE</code></entry>

                <entry>Transformed Root Mean Square Error</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:msqrt>
                          <m:mrow>
                            <m:mfrac>
                              <m:mi>1</m:mi>

                              <m:mi>n</m:mi>
                            </m:mfrac>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Z</m:mi>

                                      <m:mi>s</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:msub>
                                      <m:mi>Z</m:mi>

                                      <m:mi>o</m:mi>
                                    </m:msub>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>
                          </m:mrow>
                        </m:msqrt>
                      </m:mrow>
                    </m:math>
                  </inlineequation> , <inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mi>Z</m:mi>

                        <m:mo>=</m:mo>

                        <m:mfrac>
                          <m:mrow>
                            <m:msup>
                              <m:mrow>
                                <m:mo>(</m:mo>

                                <m:mrow>
                                  <m:mi>1</m:mi>

                                  <m:mo>+</m:mo>

                                  <m:mi>Q</m:mi>
                                </m:mrow>

                                <m:mo>)</m:mo>
                              </m:mrow>

                              <m:mi>0.3</m:mi>
                            </m:msup>

                            <m:mo>-</m:mo>

                            <m:mi>1</m:mi>
                          </m:mrow>

                          <m:mi>0.3</m:mi>
                        </m:mfrac>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para></para>

        <para></para>

        <para></para>

        <para></para>

        <table>
          <title>Efficiencies</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry align="center"> Name</entry>

                <entry align="center">Description </entry>

                <entry align="center">Equation</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>ABSDIF</code></entry>

                <entry>Absolute difference</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:munderover>
                          <m:mo>∑</m:mo>

                          <m:mi>i=1</m:mi>

                          <m:mi>n</m:mi>
                        </m:munderover>

                        <m:mrow>
                          <m:menclose notation="left right">
                            <m:mrow>
                              <m:msub>
                                <m:mi>Q</m:mi>

                                <m:mi>i,o</m:mi>
                              </m:msub>

                              <m:mo>-</m:mo>

                              <m:msub>
                                <m:mi>Q</m:mi>

                                <m:mi>i,s</m:mi>
                              </m:msub>
                            </m:mrow>
                          </m:menclose>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>LOGABSDIF</code></entry>

                <entry>Log of the absolute difference</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mrow>
                            <m:munderover>
                              <m:mo>∑</m:mo>

                              <m:mi>i=1</m:mi>

                              <m:mi>n</m:mi>
                            </m:munderover>

                            <m:mrow>
                              <m:mo>|</m:mo>

                              <m:mrow>
                                <m:mrow>
                                  <m:mi>ln</m:mi>

                                  <m:mo>⁡</m:mo>

                                  <m:msub>
                                    <m:mi>Q</m:mi>

                                    <m:mi>i, o</m:mi>
                                  </m:msub>
                                </m:mrow>

                                <m:mo>-</m:mo>

                                <m:mrow>
                                  <m:mi>ln</m:mi>

                                  <m:mo>⁡</m:mo>

                                  <m:msub>
                                    <m:mi>Q</m:mi>

                                    <m:mi>i, s</m:mi>
                                  </m:msub>
                                </m:mrow>
                              </m:mrow>

                              <m:mo>|</m:mo>
                            </m:mrow>
                          </m:mrow>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>NS</code></entry>

                <entry>Nash-Sutcliffe</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mi>1</m:mi>

                          <m:mo>-</m:mo>

                          <m:mfrac>
                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i, o</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i, s</m:mi>
                                    </m:msub>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i, o</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:menclose notation="top">
                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>o</m:mi>
                                      </m:msub>
                                    </m:menclose>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>
                          </m:mfrac>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>LOGNS</code></entry>

                <entry>Log of Nash-Sutcliffe</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mi>1</m:mi>

                          <m:mo>-</m:mo>

                          <m:mfrac>
                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:mrow>
                                <m:mo>|</m:mo>

                                <m:mrow>
                                  <m:mrow>
                                    <m:mi>ln</m:mi>

                                    <m:mo>⁡</m:mo>

                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i,o</m:mi>
                                    </m:msub>
                                  </m:mrow>

                                  <m:mo>-</m:mo>

                                  <m:mrow>
                                    <m:mi>ln</m:mi>

                                    <m:mo>⁡</m:mo>

                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i,s</m:mi>
                                    </m:msub>
                                  </m:mrow>
                                </m:mrow>

                                <m:mo>|</m:mo>
                              </m:mrow>
                            </m:mrow>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:mrow>
                                <m:mo>|</m:mo>

                                <m:mrow>
                                  <m:mrow>
                                    <m:mi>ln</m:mi>

                                    <m:mo>⁡</m:mo>

                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i, o</m:mi>
                                    </m:msub>
                                  </m:mrow>

                                  <m:mo>-</m:mo>

                                  <m:mrow>
                                    <m:mi>ln</m:mi>

                                    <m:mo>⁡</m:mo>

                                    <m:menclose notation="top">
                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>o</m:mi>
                                      </m:msub>
                                    </m:menclose>
                                  </m:mrow>
                                </m:mrow>

                                <m:mo>|</m:mo>
                              </m:mrow>
                            </m:mrow>
                          </m:mfrac>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>LOGNS2</code></entry>

                <entry>Log of Nash-Sutcliffe (Pow 2)</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mi>1</m:mi>

                          <m:mo>-</m:mo>

                          <m:mfrac>
                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:mrow>
                                      <m:mi>ln</m:mi>

                                      <m:mo>⁡</m:mo>

                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>i,o</m:mi>
                                      </m:msub>
                                    </m:mrow>

                                    <m:mo>-</m:mo>

                                    <m:mrow>
                                      <m:mi>ln</m:mi>

                                      <m:mo>⁡</m:mo>

                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>i,s</m:mi>
                                      </m:msub>
                                    </m:mrow>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:mrow>
                                      <m:mi>ln</m:mi>

                                      <m:mo>⁡</m:mo>

                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>i, o</m:mi>
                                      </m:msub>
                                    </m:mrow>

                                    <m:mo>-</m:mo>

                                    <m:mrow>
                                      <m:mi>ln</m:mi>

                                      <m:mo>⁡</m:mo>

                                      <m:menclose notation="top">
                                        <m:msub>
                                          <m:mi>Q</m:mi>

                                          <m:mi>o</m:mi>
                                        </m:msub>
                                      </m:menclose>
                                    </m:mrow>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>
                          </m:mfrac>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>IOA</code></entry>

                <entry>Index of Agreement</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mi>1</m:mi>

                          <m:mo>-</m:mo>

                          <m:mfrac>
                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:mrow>
                                <m:mo>|</m:mo>

                                <m:mrow>
                                  <m:msub>
                                    <m:mi>Q</m:mi>

                                    <m:mi>i,o</m:mi>
                                  </m:msub>

                                  <m:mo>-</m:mo>

                                  <m:msub>
                                    <m:mi>Q</m:mi>

                                    <m:mi>i,s</m:mi>
                                  </m:msub>
                                </m:mrow>

                                <m:mo>|</m:mo>
                              </m:mrow>
                            </m:mrow>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:mrow>
                                <m:mrow>
                                  <m:mo>|</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i,s</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:menclose notation="top">
                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>o</m:mi>
                                      </m:msub>
                                    </m:menclose>
                                  </m:mrow>

                                  <m:mo>|</m:mo>
                                </m:mrow>

                                <m:mo>+</m:mo>

                                <m:mrow>
                                  <m:mo>|</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i,o</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:menclose notation="top">
                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>o</m:mi>
                                      </m:msub>
                                    </m:menclose>
                                  </m:mrow>

                                  <m:mo>|</m:mo>
                                </m:mrow>
                              </m:mrow>
                            </m:mrow>
                          </m:mfrac>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>IOA2</code></entry>

                <entry>Index of Agreement (Pow 2)</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mi>1</m:mi>

                          <m:mo>-</m:mo>

                          <m:mfrac>
                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i,o</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>i,s</m:mi>
                                    </m:msub>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:mrow>
                                <m:msup>
                                  <m:mrow>
                                    <m:mo>(</m:mo>

                                    <m:mrow>
                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>i,s</m:mi>
                                      </m:msub>

                                      <m:mo>-</m:mo>

                                      <m:menclose notation="top">
                                        <m:msub>
                                          <m:mi>Q</m:mi>

                                          <m:mi>o</m:mi>
                                        </m:msub>
                                      </m:menclose>
                                    </m:mrow>

                                    <m:mo>)</m:mo>
                                  </m:mrow>

                                  <m:mi>2</m:mi>
                                </m:msup>

                                <m:mo>+</m:mo>

                                <m:msup>
                                  <m:mrow>
                                    <m:mo>(</m:mo>

                                    <m:mrow>
                                      <m:msub>
                                        <m:mi>Q</m:mi>

                                        <m:mi>i,o</m:mi>
                                      </m:msub>

                                      <m:mo>-</m:mo>

                                      <m:menclose notation="top">
                                        <m:msub>
                                          <m:mi>Q</m:mi>

                                          <m:mi>o</m:mi>
                                        </m:msub>
                                      </m:menclose>
                                    </m:mrow>

                                    <m:mo>)</m:mo>
                                  </m:mrow>

                                  <m:mi>2</m:mi>
                                </m:msup>
                              </m:mrow>
                            </m:mrow>
                          </m:mfrac>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>R2</code></entry>

                <entry>Goodness of fit</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:msup>
                          <m:mrow>
                            <m:mo>(</m:mo>

                            <m:mfrac>
                              <m:mrow>
                                <m:munderover>
                                  <m:mo>∑</m:mo>

                                  <m:mi>i=1</m:mi>

                                  <m:mi>n</m:mi>
                                </m:munderover>

                                <m:mrow>
                                  <m:mrow>
                                    <m:mo>(</m:mo>

                                    <m:mrow>
                                      <m:msub>
                                        <m:mi>X</m:mi>

                                        <m:mi>i</m:mi>
                                      </m:msub>

                                      <m:mo>-</m:mo>

                                      <m:menclose notation="top">
                                        <m:mi>X</m:mi>
                                      </m:menclose>
                                    </m:mrow>

                                    <m:mo>)</m:mo>
                                  </m:mrow>

                                  <m:mo>⁢</m:mo>

                                  <m:mrow>
                                    <m:mo>(</m:mo>

                                    <m:mrow>
                                      <m:msub>
                                        <m:mi>Y</m:mi>

                                        <m:mi>i</m:mi>
                                      </m:msub>

                                      <m:mo>-</m:mo>

                                      <m:menclose notation="top">
                                        <m:mi>Y</m:mi>
                                      </m:menclose>
                                    </m:mrow>

                                    <m:mo>)</m:mo>
                                  </m:mrow>
                                </m:mrow>
                              </m:mrow>

                              <m:mrow>
                                <m:msqrt>
                                  <m:mrow>
                                    <m:munderover>
                                      <m:mo>∑</m:mo>

                                      <m:mi>i=1</m:mi>

                                      <m:mi>n</m:mi>
                                    </m:munderover>

                                    <m:msup>
                                      <m:mrow>
                                        <m:mo>(</m:mo>

                                        <m:mrow>
                                          <m:msub>
                                            <m:mi>X</m:mi>

                                            <m:mi>i</m:mi>
                                          </m:msub>

                                          <m:mo>-</m:mo>

                                          <m:menclose notation="top">
                                            <m:mi>X</m:mi>
                                          </m:menclose>
                                        </m:mrow>

                                        <m:mo>)</m:mo>
                                      </m:mrow>

                                      <m:mi>2</m:mi>
                                    </m:msup>
                                  </m:mrow>
                                </m:msqrt>

                                <m:mo>⁢</m:mo>

                                <m:msqrt>
                                  <m:mrow>
                                    <m:munderover>
                                      <m:mo>∑</m:mo>

                                      <m:mi>i=1</m:mi>

                                      <m:mi>n</m:mi>
                                    </m:munderover>

                                    <m:msup>
                                      <m:mrow>
                                        <m:mo>(</m:mo>

                                        <m:mrow>
                                          <m:msub>
                                            <m:mi>Y</m:mi>

                                            <m:mi>i</m:mi>
                                          </m:msub>

                                          <m:mo>-</m:mo>

                                          <m:menclose notation="top">
                                            <m:mi>Y</m:mi>
                                          </m:menclose>
                                        </m:mrow>

                                        <m:mo>)</m:mo>
                                      </m:mrow>

                                      <m:mi>2</m:mi>
                                    </m:msup>
                                  </m:mrow>
                                </m:msqrt>
                              </m:mrow>
                            </m:mfrac>

                            <m:mo>)</m:mo>
                          </m:mrow>

                          <m:mi>2</m:mi>
                        </m:msup>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>GRAD</code></entry>

                <entry>Linear Regression Gradient</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mfrac>
                          <m:mrow>
                            <m:munderover>
                              <m:mo>∑</m:mo>

                              <m:mi>i=1</m:mi>

                              <m:mi>n</m:mi>
                            </m:munderover>

                            <m:mrow>
                              <m:mrow>
                                <m:mo>(</m:mo>

                                <m:mrow>
                                  <m:msub>
                                    <m:mi>X</m:mi>

                                    <m:mi>i</m:mi>
                                  </m:msub>

                                  <m:mo>-</m:mo>

                                  <m:menclose notation="top">
                                    <m:mi>X</m:mi>
                                  </m:menclose>
                                </m:mrow>

                                <m:mo>)</m:mo>
                              </m:mrow>

                              <m:mo>⁢</m:mo>

                              <m:mrow>
                                <m:mo>(</m:mo>

                                <m:mrow>
                                  <m:msub>
                                    <m:mi>Y</m:mi>

                                    <m:mi>i</m:mi>
                                  </m:msub>

                                  <m:mo>-</m:mo>

                                  <m:menclose notation="top">
                                    <m:mi>Y</m:mi>
                                  </m:menclose>
                                </m:mrow>

                                <m:mo>)</m:mo>
                              </m:mrow>
                            </m:mrow>
                          </m:mrow>

                          <m:mrow>
                            <m:munderover>
                              <m:mo>∑</m:mo>

                              <m:mi>i=1</m:mi>

                              <m:mi>n</m:mi>
                            </m:munderover>

                            <m:msup>
                              <m:mrow>
                                <m:mo>(</m:mo>

                                <m:mrow>
                                  <m:msub>
                                    <m:mi>X</m:mi>

                                    <m:mi>i</m:mi>
                                  </m:msub>

                                  <m:mo>-</m:mo>

                                  <m:menclose notation="top">
                                    <m:mi>X</m:mi>
                                  </m:menclose>
                                </m:mrow>

                                <m:mo>)</m:mo>
                              </m:mrow>

                              <m:mi>2</m:mi>
                            </m:msup>
                          </m:mrow>
                        </m:mfrac>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>WR2</code></entry>

                <entry>Weighted Correlation Coefficient</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mo>{</m:mo>

                          <m:mtable>
                            <m:mtr>
                              <m:mtd>
                                <m:mrow>
                                  <m:mrow>
                                    <m:mrow>
                                      <m:mo>|</m:mo>

                                      <m:mi>GRAD</m:mi>

                                      <m:mo>|</m:mo>
                                    </m:mrow>

                                    <m:mo>⁢</m:mo>

                                    <m:msup>
                                      <m:mi>R2</m:mi>

                                      <m:mi></m:mi>
                                    </m:msup>
                                  </m:mrow>

                                  <m:mo>,</m:mo>

                                  <m:mi>GRAD&lt;=1</m:mi>
                                </m:mrow>
                              </m:mtd>
                            </m:mtr>

                            <m:mtr>
                              <m:mtd>
                                <m:mrow>
                                  <m:mrow>
                                    <m:mfrac>
                                      <m:mi>1</m:mi>

                                      <m:mrow>
                                        <m:mo>|</m:mo>

                                        <m:mi>GRAD</m:mi>

                                        <m:mo>|</m:mo>
                                      </m:mrow>
                                    </m:mfrac>

                                    <m:mo>⁢</m:mo>

                                    <m:msup>
                                      <m:mi>R2</m:mi>

                                      <m:mi></m:mi>
                                    </m:msup>
                                  </m:mrow>

                                  <m:mo>,</m:mo>

                                  <m:mi>GRAD&gt;1</m:mi>
                                </m:mrow>
                              </m:mtd>
                            </m:mtr>
                          </m:mtable>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>DSGRAD</code></entry>

                <entry>Double Sum Analysis Gradient</entry>

                <entry>[TBD]</entry>
              </row>

              <row>
                <entry><code>AVE</code></entry>

                <entry>Absolute Volume Error</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mo>|</m:mo>

                          <m:mrow>
                            <m:munderover>
                              <m:mo>∑</m:mo>

                              <m:mi>i=1</m:mi>

                              <m:mi>n</m:mi>
                            </m:munderover>

                            <m:mrow>
                              <m:msub>
                                <m:mi>Q</m:mi>

                                <m:mi>i,s</m:mi>
                              </m:msub>

                              <m:mo>-</m:mo>

                              <m:msub>
                                <m:mi>Q</m:mi>

                                <m:mi>i,o</m:mi>
                              </m:msub>
                            </m:mrow>
                          </m:mrow>

                          <m:mo>|</m:mo>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>RMSE</code></entry>

                <entry>Root Mean Square Error</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:msqrt>
                          <m:mrow>
                            <m:mfrac>
                              <m:mi>1</m:mi>

                              <m:mi>n</m:mi>
                            </m:mfrac>

                            <m:mo>⁢</m:mo>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>s</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:msub>
                                      <m:mi>Q</m:mi>

                                      <m:mi>o</m:mi>
                                    </m:msub>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>
                          </m:mrow>
                        </m:msqrt>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>PBIAS</code></entry>

                <entry>Percent BIAS</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mi>100</m:mi>

                          <m:mo>⁢</m:mo>

                          <m:mfrac>
                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:mrow>
                                <m:mo>(</m:mo>

                                <m:mrow>
                                  <m:msub>
                                    <m:mi>Q</m:mi>

                                    <m:mi>i,o</m:mi>
                                  </m:msub>

                                  <m:mo>-</m:mo>

                                  <m:msub>
                                    <m:mi>Q</m:mi>

                                    <m:mi>i,s</m:mi>
                                  </m:msub>
                                </m:mrow>

                                <m:mo>)</m:mo>
                              </m:mrow>
                            </m:mrow>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msub>
                                <m:mi>Q</m:mi>

                                <m:mi>i,o</m:mi>
                              </m:msub>
                            </m:mrow>
                          </m:mfrac>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>PMCC</code></entry>

                <entry>Pearson product-moment correlation coefficient</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mfrac>
                          <m:mrow>
                            <m:munderover>
                              <m:mo>∑</m:mo>

                              <m:mi>i=1</m:mi>

                              <m:mi>n</m:mi>
                            </m:munderover>

                            <m:mrow>
                              <m:mrow>
                                <m:mo>(</m:mo>

                                <m:mrow>
                                  <m:msub>
                                    <m:mi>X</m:mi>

                                    <m:mi>i</m:mi>
                                  </m:msub>

                                  <m:mo>-</m:mo>

                                  <m:menclose notation="top">
                                    <m:mi>X</m:mi>
                                  </m:menclose>
                                </m:mrow>

                                <m:mo>)</m:mo>
                              </m:mrow>

                              <m:mo>⁢</m:mo>

                              <m:mrow>
                                <m:mo>(</m:mo>

                                <m:mrow>
                                  <m:msub>
                                    <m:mi>Y</m:mi>

                                    <m:mi>i</m:mi>
                                  </m:msub>

                                  <m:mo>-</m:mo>

                                  <m:menclose notation="top">
                                    <m:mi>Y</m:mi>
                                  </m:menclose>
                                </m:mrow>

                                <m:mo>)</m:mo>
                              </m:mrow>
                            </m:mrow>
                          </m:mrow>

                          <m:mrow>
                            <m:msqrt>
                              <m:mrow>
                                <m:munderover>
                                  <m:mo>∑</m:mo>

                                  <m:mi>i=1</m:mi>

                                  <m:mi>n</m:mi>
                                </m:munderover>

                                <m:msup>
                                  <m:mrow>
                                    <m:mo>(</m:mo>

                                    <m:mrow>
                                      <m:msub>
                                        <m:mi>X</m:mi>

                                        <m:mi>i</m:mi>
                                      </m:msub>

                                      <m:mo>-</m:mo>

                                      <m:menclose notation="top">
                                        <m:mi>X</m:mi>
                                      </m:menclose>
                                    </m:mrow>

                                    <m:mo>)</m:mo>
                                  </m:mrow>

                                  <m:mi>2</m:mi>
                                </m:msup>
                              </m:mrow>
                            </m:msqrt>

                            <m:mo>⁢</m:mo>

                            <m:msqrt>
                              <m:mrow>
                                <m:munderover>
                                  <m:mo>∑</m:mo>

                                  <m:mi>i=1</m:mi>

                                  <m:mi>n</m:mi>
                                </m:munderover>

                                <m:msup>
                                  <m:mrow>
                                    <m:mo>(</m:mo>

                                    <m:mrow>
                                      <m:msub>
                                        <m:mi>Y</m:mi>

                                        <m:mi>i</m:mi>
                                      </m:msub>

                                      <m:mo>-</m:mo>

                                      <m:menclose notation="top">
                                        <m:mi>Y</m:mi>
                                      </m:menclose>
                                    </m:mrow>

                                    <m:mo>)</m:mo>
                                  </m:mrow>

                                  <m:mi>2</m:mi>
                                </m:msup>
                              </m:mrow>
                            </m:msqrt>
                          </m:mrow>
                        </m:mfrac>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>TRMSE</code></entry>

                <entry>Transformed Root Mean Square Error</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:msqrt>
                          <m:mrow>
                            <m:mfrac>
                              <m:mi>1</m:mi>

                              <m:mi>n</m:mi>
                            </m:mfrac>

                            <m:mrow>
                              <m:munderover>
                                <m:mo>∑</m:mo>

                                <m:mi>i=1</m:mi>

                                <m:mi>n</m:mi>
                              </m:munderover>

                              <m:msup>
                                <m:mrow>
                                  <m:mo>(</m:mo>

                                  <m:mrow>
                                    <m:msub>
                                      <m:mi>Z</m:mi>

                                      <m:mi>s</m:mi>
                                    </m:msub>

                                    <m:mo>-</m:mo>

                                    <m:msub>
                                      <m:mi>Z</m:mi>

                                      <m:mi>o</m:mi>
                                    </m:msub>
                                  </m:mrow>

                                  <m:mo>)</m:mo>
                                </m:mrow>

                                <m:mi>2</m:mi>
                              </m:msup>
                            </m:mrow>
                          </m:mrow>
                        </m:msqrt>
                      </m:mrow>
                    </m:math>
                  </inlineequation> , <inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mi>Z</m:mi>

                        <m:mo>=</m:mo>

                        <m:mfrac>
                          <m:mrow>
                            <m:msup>
                              <m:mrow>
                                <m:mo>(</m:mo>

                                <m:mrow>
                                  <m:mi>1</m:mi>

                                  <m:mo>+</m:mo>

                                  <m:mi>Q</m:mi>
                                </m:mrow>

                                <m:mo>)</m:mo>
                              </m:mrow>

                              <m:mi>0.3</m:mi>
                            </m:msup>

                            <m:mo>-</m:mo>

                            <m:mi>1</m:mi>
                          </m:mrow>

                          <m:mi>0.3</m:mi>
                        </m:mfrac>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>

              <row>
                <entry><code>ROCE</code></entry>

                <entry>Runoff Coefficient Error</entry>

                <entry><inlineequation>
                    <m:math display="inline">
                      <m:mrow>
                        <m:mrow>
                          <m:mo>|</m:mo>

                          <m:mrow>
                            <m:mfrac>
                              <m:menclose notation="top">
                                <m:msub>
                                  <m:mi>Q</m:mi>

                                  <m:mi>s</m:mi>
                                </m:msub>
                              </m:menclose>

                              <m:mi>P</m:mi>
                            </m:mfrac>

                            <m:mo>-</m:mo>

                            <m:mfrac>
                              <m:menclose notation="top">
                                <m:msub>
                                  <m:mi>Q</m:mi>

                                  <m:mi>o</m:mi>
                                </m:msub>
                              </m:menclose>

                              <m:mi>P</m:mi>
                            </m:mfrac>
                          </m:mrow>

                          <m:mo>|</m:mo>
                        </m:mrow>
                      </m:mrow>
                    </m:math>
                  </inlineequation></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para></para>

        <para>The simulation below shows the use of the efficiency element in
        a simulation. Multiple efficiencies can be computed at once. Just
        combine those by using the '<code>+</code>' operator as shown.</para>

        <para><blockquote>
            <programlisting> sim(name:"Efcarson") {
    // define the model
    model(classname:"model.PrmsDdJh") {
        // ... parameter here
    }
    <emphasis role="bold">efficiency(obs:"runoff[0]", sim:"basin_cfs", methods:NS+NS2+ABSDIF+TRMSE)</emphasis>
 }</programlisting>
          </blockquote></para>

        <para></para>

        <para>Executing the simulation will produce additional table output
        for the requested efficiencies:</para>

        <blockquote>
          <programlisting> Efficiencies           ns1        ns2     absdif      trmse 
runoff/basin_cfs    0.66512    0.82971  764.30044    2.44043 
</programlisting>
        </blockquote>

        <para></para>

        <para><indexterm>
            <primary>Simulation Element</primary>

            <secondary>efficiency{}</secondary>
          </indexterm><emphasis role="bold">Element
        efficiency{}</emphasis></para>

        <para><variablelist>
            <varlistentry>
              <term>Name</term>

              <listitem>
                <para><code>efficiency</code> - Model efficiency
                computation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Properties</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="4">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Required</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>obs</code></entry>

                          <entry>a output field that provides observed
                          values</entry>

                          <entry>String</entry>

                          <entry>Y</entry>
                        </row>

                        <row>
                          <entry><code>sim</code></entry>

                          <entry>a output field that provides simulated
                          values</entry>

                          <entry>String</entry>

                          <entry>Y</entry>
                        </row>

                        <row>
                          <entry><code>precip</code></entry>

                          <entry>precipitation values</entry>

                          <entry>String</entry>

                          <entry>Y (only for <code>ROCE</code>, ignored
                          otherwise)</entry>
                        </row>

                        <row>
                          <entry><code>method</code></entry>

                          <entry>efficiency method(s) to compute</entry>

                          <entry>KEYs (can be combined)</entry>

                          <entry>Y</entry>
                        </row>

                        <row>
                          <entry><code>file</code></entry>

                          <entry>the output file</entry>

                          <entry>String</entry>

                          <entry>N (if missing output goes to the console,
                          otherwise to the specified file located in the
                          output folder.)</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Parent(s)</term>

              <listitem>
                <para><code>sim</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Notes</term>

              <listitem>
                <itemizedlist>
                  <listitem>
                    <para>Multiple keys can be combined using the
                    <code>+</code> operator, the output will be a combined
                    table.</para>
                  </listitem>

                  <listitem>
                    <para>Multiple efficiencies can use the same file for
                    output. They get appended.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para></para>
      </section>

      <section>
        <title>Simulation Output Strategy
        (<code>outputstrategy</code>)</title>

        <para>A simulation usually produces output files such as times series
        predicted runoff, sediment yield, etc. The <code>outputstrategy</code>
        element of a simulation manages the storage of the output based on
        different strategies. However it does not manage the files or the
        values them self. It provides for a consistent method and strategy
        dealing with subsequent simulations.</para>

        <para>An example simulation might use a output element:</para>

        <blockquote>
          <programlisting> sb = new oms3.SimBuilder()             
 sb.sim(name:"SimpleModel") {      
    
    <emphasis role="bold">outputstrategy(dir:"c:/tmp/out", scheme:NUMBERED)</emphasis>

    // define the model
    model(classname:"tw.Thornthwaite") {
        // add parameter
        parameter {
            climateFile  "c:/od/projects/ngmf.models/src/tw/climate.cst"
        }
    }
 }</programlisting>
        </blockquote>

        <para>The types of supported output strategy schemes are:</para>

        <para></para>

        <variablelist>
          <varlistentry>
            <term>SIMPLE</term>

            <listitem>
              <para>The simulation creates a folder to hold the model output
              files. Each new simulation run will overwrite existing files
              with the same name. The simulation output folder is
              always:</para>

              <para><code>&lt;output dir&gt; + &lt;sim name&gt;</code></para>

              <para>For the example above the output would always go into
              "<code>c:/tmp/out/SimpleModel</code>"</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>NUMBERED</term>

            <listitem>
              <para>The simulation creates a new folder for each simulation
              run. A new simulation will not overwrite the output from the
              previous one. The last simulation always has the highest number
              folder. The simulation output folder is:</para>

              <para><code>&lt;output dir&gt; + &lt;sim name&gt; +
              &lt;simulation run number&gt;</code></para>

              <para>For the example above the output of the 5th run would go
              into "<code>c:/tmp/out/SimpleModel/0005</code>"</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>TIME</term>

            <listitem>
              <para>The simulation creates a new folder for each simulation
              run. A new simulation will not overwrite the output from the
              previous one. The last simulation output is always in the folder
              named with the simulation start time. The simulation output
              folder is:</para>

              <para><code>&lt;output dir&gt; + &lt;sim name&gt; +
              &lt;simulation start time&gt;</code></para>

              <para>For the example above the output a run would go into
              "<code>c:/tmp/out/SimpleModel/2009-04-05T12:04</code>"</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>In the future there might be more strategies for output
        handling.</para>

        <para></para>

        <para><indexterm>
            <primary>Simulation Element</primary>

            <secondary>output{}</secondary>
          </indexterm><emphasis role="bold">Element output{}</emphasis></para>

        <para><variablelist>
            <varlistentry>
              <term>Name</term>

              <listitem>
                <para><code>output</code> - describes simulation output
                management</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Properties</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="4">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Required</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>dir</code></entry>

                          <entry>the output base dir, must exist.</entry>

                          <entry><code>String</code></entry>

                          <entry>N (default:
                          <code>java.tmp.dir</code>)</entry>
                        </row>

                        <row>
                          <entry><code>strategy</code></entry>

                          <entry>the output strategy to be used for this
                          simulation</entry>

                          <entry><code>'SIMPLE' | 'NUMBERED' |
                          'TIME'</code></entry>

                          <entry>N (default: <code>SIMPLE</code>)</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Notes</term>

              <listitem>
                <itemizedlist>
                  <listitem>
                    <para>If there is no output specified in sim, the defaults
                    for both, dir and strategy apply.</para>
                  </listitem>

                  <listitem>
                    <para>The output strategies are defined in
                    <code>oms3.SimConstants</code></para>
                  </listitem>

                  <listitem>
                    <para>Output strategy cannot be combined.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </section>
    </section>

    <section>
      <title>Ensemble Streamflow Prediction (<code>esp</code>)</title>

      <para>ESP is a simulation type for Ensemble Streamflow Prediction. It
      implements is a modified version of the National Weather Service’s ESP
      procedure (Day, 1985). ESP uses historic or synthesized meteorological
      data as an analogue for the future. These time series are used as model
      input to simulate future conditions.</para>

      <para>The typical application of ESP is streamflow forecasting . The
      initial hydrological conditions of a watershed, for the start of a
      forecast period, are assumed to be those simulated by the model for that
      point in time. Typically, multiple hydrographs are simulated from this
      point in time forward, one for each year of available historic data. For
      each simulated hydrograph, the model is re-initialized using the
      watershed conditions at the starting point of the forecast period. The
      forecast period can vary from a few days to an entire year. A frequency
      analysis is then performed on the peaks and/or volumes of the simulated
      hydrograph traces to evaluate their probabilities of exceedance.</para>

      <para></para>

      <variablelist>
        <varlistentry>
          <term>Initialization Period</term>

          <listitem>
            <para>Provide a start and end time for ESP initialization. This is
            period over which the model will be run prior to the forecast
            period. It should be long enough to run the model through one or
            more wetting and drying cycles.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Forecasting Period</term>

          <listitem>
            <para>Provide the end date for your forecasting period. (Note: The
            start date for the forecasting period follows the end date of the
            initialization period.)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Historical Years</term>

          <listitem>
            <para>Provide the historical years to be used for forecasting
            traces.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Model parameter files</term>

          <listitem>
            <para>Provide all the parameter files for the model. One of those
            files must have the ESP property set and content as described in
            the next section.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para></para>

      <para><blockquote>
          <programlisting> esp(name:"EFCarson") {

    // define output strategy: output base dir and
    // the strategy NUMBERED|SIMPLE|DATE
    outputstrategy(dir: "$work/output", scheme:NUMBERED)

    // for class loading: model location
    resource "$work/dist/*.jar"

    // define model
    model(classname:"model.PrmsDdJh") {
        // parameter
        parameter (file:"$work/data/efcarson/params.csv") {
            inputFile  "$work/data/efcarson/data.csv"
            outFile    "out.csv"
            sumFile    "basinsum.csv"
            out        "summary.txt"

            startTime "1983-10-01"
            endTime   "1984-09-30"
        }
    }
 
    // number of forecast days
    forecast_days 15
 
    // historical years for to be used for traces
    // years are inclusive
    first_year 1981
    last_year  1983
}
</programlisting>
        </blockquote></para>

      <para></para>

      <para><indexterm>
          <primary>Simulation Element</primary>

          <secondary>esp{}</secondary>
        </indexterm><emphasis role="bold">Element esp{}</emphasis></para>

      <para><variablelist>
          <varlistentry>
            <term>Name</term>

            <listitem>
              <para><code>esp</code> - defines a Ensemble Streamflow
              Prediction (ESP) simulation.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Properties</term>

            <listitem>
              <para><informaltable>
                  <tgroup cols="4">
                    <thead>
                      <row>
                        <entry align="center"> Name</entry>

                        <entry align="center"> Description</entry>

                        <entry align="center">Type</entry>

                        <entry align="center">Required</entry>
                      </row>
                    </thead>

                    <tbody>
                      <row>
                        <entry><code>name</code></entry>

                        <entry>the name of the simulation</entry>

                        <entry>String</entry>

                        <entry>Y</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Sub elements</term>

            <listitem>
              <para><informaltable>
                  <tgroup cols="5">
                    <thead>
                      <row>
                        <entry align="center"> Name</entry>

                        <entry align="center"> Description</entry>

                        <entry align="center">Type</entry>

                        <entry align="center">Default</entry>

                        <entry align="center">Occurrences</entry>
                      </row>
                    </thead>

                    <tbody>
                      <row>
                        <entry><code>model{}</code></entry>

                        <entry>the model to execute</entry>

                        <entry></entry>

                        <entry></entry>

                        <entry>1</entry>
                      </row>

                      <row>
                        <entry><code>outputstrategy{}</code></entry>

                        <entry>output management</entry>

                        <entry></entry>

                        <entry><code>StandardOutput</code></entry>

                        <entry>?</entry>
                      </row>

                      <row>
                        <entry><code>resource</code></entry>

                        <entry>simulation resource definition</entry>

                        <entry>String</entry>

                        <entry>-</entry>

                        <entry>*</entry>
                      </row>

                      <row>
                        <entry><code>forecast_days</code></entry>

                        <entry>number of forecast days</entry>

                        <entry>int</entry>

                        <entry>-</entry>

                        <entry>1 (if forecast_days not provided)</entry>
                      </row>

                      <row>
                        <entry><code>forecast_end</code></entry>

                        <entry>forecasting end date</entry>

                        <entry>ISO Date String</entry>

                        <entry>-</entry>

                        <entry>1 (if forecast_days not provided)</entry>
                      </row>

                      <row>
                        <entry><code>first_year</code></entry>

                        <entry>first historical year</entry>

                        <entry>int</entry>

                        <entry>-</entry>

                        <entry>1</entry>
                      </row>

                      <row>
                        <entry><code>last_year</code></entry>

                        <entry>last historical year</entry>

                        <entry>int</entry>

                        <entry>-</entry>

                        <entry>1</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Notes</term>

            <listitem>
              <itemizedlist>
                <listitem>
                  <para>Either the forcast_days or forecast_end has to be
                  provided, if both are missing or both are provided an error
                  message will be given and the simulation stops.</para>
                </listitem>
              </itemizedlist>

              <para></para>
            </listitem>
          </varlistentry>
        </variablelist></para>

      <para>[TBD]</para>

      <para></para>

      <section>
        <title>ESP Trace Analysis</title>

        <para>The ESP procedure uses historical meteorological data to
        represent future meteorological data. Alternative assumptions about
        future meteorological conditions can be made with the use of
        synthesized meteorological data. A few options are available in
        applying the frequency analysis. One option assumes that all years in
        the historic database have an equally likely probability of
        occurrence. This give equal weight to all years. Years associated with
        El Nino, La Nina, ENSO neutral, Pacific Decadal Oscillation (PDO) less
        than -0.5, PDO greater than 0.5, and PDO neutral have also been
        identified in the ESP procedure, and the years in these groups can be
        extracted separately for analysis. Alternative schemes for weighting
        user-defined periods, based on user assumptions or a priori
        information, are also being investigated.</para>

        <para>[TBD] ...</para>

        <para><figure>
            <title>ESP trace analysis</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/Handbook/Slide23.PNG"></imagedata>
              </imageobject>
            </mediaobject>
          </figure></para>

        <para>The trace analysis is a part if the analysis element, and is
        simple to configure.</para>

        <para><blockquote>
            <programlisting> esp(name:"Yampa") {

   ...
   analysis(title:"Trace analysis") {

        
        // relative path name, last output
        esptraces(title:"yampa", dir:"%last", var:"basin_cfs")
    }
   
}
</programlisting>
          </blockquote></para>

        <para></para>

        <para></para>

        <para><indexterm>
            <primary>Simulation Element</primary>

            <secondary>esptraces{}</secondary>
          </indexterm><emphasis role="bold">Element
        esptraces{}</emphasis></para>

        <para><variablelist>
            <varlistentry>
              <term>Name</term>

              <listitem>
                <para><code>esptraces</code> - defines esp trace analysis for
                ensemble runs.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Properties</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="4">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Required</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>title</code></entry>

                          <entry>the title of the graph</entry>

                          <entry>String</entry>

                          <entry>n</entry>
                        </row>

                        <row>
                          <entry><code>dir</code></entry>

                          <entry>the esp output directory, containing all the
                          trace outputs and the file
                          '<code>result.csv</code>'.</entry>

                          <entry>String</entry>

                          <entry>y</entry>
                        </row>

                        <row>
                          <entry><code>var</code></entry>

                          <entry>the variable to trace</entry>

                          <entry>String</entry>

                          <entry>y</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Notes</term>

              <listitem>
                <itemizedlist>
                  <listitem>
                    <para>..</para>
                  </listitem>
                </itemizedlist>

                <para></para>

                <para></para>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para></para>

        <para></para>
      </section>

      <section>
        <title>References</title>

        <para>Day, G.N., Extended streamflow forecasting using NWSRFS: J.
        Water Resour. Plan. and Manag. Am. Soc. Civ. Eng., 111, 157,
        1985.</para>
      </section>
    </section>

    <section>
      <title>Luca Calibration (<code>luca</code>)</title>

      <para>Luca (Let us calibrate) is a multiple-objective, stepwise,
      automated procedure for model calibration. The calibration procedure
      uses the Shuffled Complex Evolution global search algorithm to calibrate
      any OMS3 model. Luca defines a OMS simulation type for building and
      performing a procedure to calibrate parameters for a (hydrological)
      model. It integrates the following components:</para>

      <itemizedlist>
        <listitem>
          <para>Multiple-objective, step-wise calibration</para>
        </listitem>

        <listitem>
          <para>Shuffled Complex Evolution (SCE), a global-search parameter
          optimization; and</para>
        </listitem>

        <listitem>
          <para>OMS model interoperability.</para>
        </listitem>
      </itemizedlist>

      <para></para>

      <section>
        <title>Shuffled Complex Evolution (SCE)</title>

        <para>The purpose of Shuffled Complex Evolution (SCE) is to calibrate
        model parameters so that the model, which requires those parameters,
        gives better results. SCE consists of the following steps:</para>

        <orderedlist>
          <listitem>
            <para><emphasis role="bold">Generating points</emphasis>. The set
            of parameters to be calibrated is considered as a point in N
            dimension space where N is the number of parameters. SCE generates
            many points, in which each parameter has a random value within its
            lower and upper bound values.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Assigning criterion values.</emphasis>
            The model is run with every point (a set of parameters) generated
            in SCE Step 1 as an input. An objective function that determines
            how close the simulation results are to observed values is used to
            calculate a criterion value for each point.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Creating complexes.</emphasis> The
            points are divided into smaller groups called complexes such that
            points of good and bad criterion values are equally
            distributed.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Complex evolution. </emphasis>Each
            complex is evolved in the following way: Several points are
            selected from the complex to construct a sub-complex. In the
            sub-complex, a new point is generated, and a point that has a bad
            criterion value is replaced with this new point. This evolution
            step is repeated several times with different random points in a
            sub-complex.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Combining complexes.</emphasis> All
            points in the complexes are combined together to be one
            group.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">SCE Steps (3) – (5) are called a
            shuffling loop</emphasis>. It is repeated until the results of the
            complex evolution meet one of the following end conditions:</para>

            <itemizedlist>
              <listitem>
                <para>The number of model executions reaches the maximum
                number of model execution</para>
              </listitem>

              <listitem>
                <para>The percent change in the best criterion value of the
                current shuffling loop and that of several shuffling loops
                before is less than a specified percentage.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </orderedlist>

        <para>The points converge into a very small region, which is less than
        0.1% of the space within the lower and upper bounds of parameters. The
        number of complexes used in SCE Step 3 decreases by 1 for every
        shuffling loop. This decrease stops when the number of complexes
        reaches the <emphasis role="bold">minimum number of complex
        required</emphasis>. The output is the parameter file containing the
        point (a parameter set) that has the best criterion value.</para>

        <para><emphasis role="bold">Luca Rounds and Steps</emphasis></para>

        <para><emphasis role="bold"></emphasis><figure>
            <title>Rounds and Steps in Luca</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/Handbook/Slide22.PNG"></imagedata>
              </imageobject>
            </mediaobject>
          </figure></para>

        <para><emphasis role="bold"></emphasis></para>

        <para>In the multi-step calibration technique, a step and a round are
        defined as follows:</para>

        <variablelist>
          <varlistentry>
            <term>Steps</term>

            <listitem>
              <para>A step is associated with a parameter set, which contains
              one or more parameter values.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Rounds</term>

            <listitem>
              <para>A round consists of one or more steps.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>[TBD]</para>

        <para></para>

        <para><indexterm>
            <primary>Simulation Element</primary>

            <secondary>step{}</secondary>
          </indexterm><emphasis role="bold">Element luca{}</emphasis></para>

        <para><variablelist>
            <varlistentry>
              <term>Name</term>

              <listitem>
                <para><code>luca</code> - defines a Luca calibration
                simulation.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Properties</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="4">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Required</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>name</code></entry>

                          <entry>the name of the simulation</entry>

                          <entry>String</entry>

                          <entry>y</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Sub elements</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="5">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Default</entry>

                          <entry align="center">Occurrences</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>model{}</code></entry>

                          <entry>the model to execute</entry>

                          <entry></entry>

                          <entry></entry>

                          <entry>1</entry>
                        </row>

                        <row>
                          <entry><code>outputstrategy{}</code></entry>

                          <entry>output management</entry>

                          <entry></entry>

                          <entry><code>StandardOutput</code></entry>

                          <entry>?</entry>
                        </row>

                        <row>
                          <entry><code>resource</code></entry>

                          <entry>simulation resource definition</entry>

                          <entry>String</entry>

                          <entry></entry>

                          <entry>*</entry>
                        </row>

                        <row>
                          <entry><code>calibration_start</code></entry>

                          <entry>start date of calibration</entry>

                          <entry>ISO Date String</entry>

                          <entry>-</entry>

                          <entry>1</entry>
                        </row>

                        <row>
                          <entry><code>rounds</code></entry>

                          <entry>number of rounds</entry>

                          <entry>int</entry>

                          <entry>1</entry>

                          <entry>?</entry>
                        </row>

                        <row>
                          <entry><code>step{}</code></entry>

                          <entry>calibration step definition</entry>

                          <entry></entry>

                          <entry>-</entry>

                          <entry>+</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Notes</term>

              <listitem>
                <itemizedlist>
                  <listitem>
                    <para>....</para>
                  </listitem>
                </itemizedlist>

                <para></para>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para><emphasis role="bold"><indexterm>
            <primary>Simulation Element</primary>

            <secondary>step{}</secondary>
          </indexterm>Element step{}</emphasis><variablelist>
            <varlistentry>
              <term>Name</term>

              <listitem>
                <para><code>step</code> - defines a single Luca calibration
                step.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Properties</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="4">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Required</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>name</code></entry>

                          <entry>the name of the step</entry>

                          <entry>String</entry>

                          <entry>n</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Sub elements</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="5">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Default</entry>

                          <entry align="center">Occurrences</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>parameter</code></entry>

                          <entry>parameter to calibrate</entry>

                          <entry>-</entry>

                          <entry>-</entry>

                          <entry>1</entry>
                        </row>

                        <row>
                          <entry><code>optimization</code></entry>

                          <entry>optimization definition</entry>

                          <entry>-</entry>

                          <entry>-</entry>

                          <entry>1</entry>
                        </row>

                        <row>
                          <entry><code>max_exec</code></entry>

                          <entry>maximum # executions in one step</entry>

                          <entry>int</entry>

                          <entry>10000</entry>

                          <entry>?</entry>
                        </row>

                        <row>
                          <entry><code>init_complexes</code></entry>

                          <entry></entry>

                          <entry>int</entry>

                          <entry>-</entry>

                          <entry>?</entry>
                        </row>

                        <row>
                          <entry><code>points_per_complex</code></entry>

                          <entry></entry>

                          <entry>int</entry>

                          <entry>-</entry>

                          <entry>?</entry>
                        </row>

                        <row>
                          <entry><code>points_per_subcomplex</code></entry>

                          <entry></entry>

                          <entry>int</entry>

                          <entry>-</entry>

                          <entry>?</entry>
                        </row>

                        <row>
                          <entry><code>evolutions</code></entry>

                          <entry></entry>

                          <entry>int</entry>

                          <entry>-</entry>

                          <entry>?</entry>
                        </row>

                        <row>
                          <entry><code>min_complexes</code></entry>

                          <entry></entry>

                          <entry>int</entry>

                          <entry>-</entry>

                          <entry>?</entry>
                        </row>

                        <row>
                          <entry><code>shuffling_loops</code></entry>

                          <entry></entry>

                          <entry>int</entry>

                          <entry>5</entry>

                          <entry>?</entry>
                        </row>

                        <row>
                          <entry><code>of_percentage</code></entry>

                          <entry></entry>

                          <entry>double</entry>

                          <entry>0.01</entry>

                          <entry>?</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Notes</term>

              <listitem>
                <itemizedlist>
                  <listitem>
                    <para>If the name of the step is missing, it will be
                    numbered instead.</para>
                  </listitem>
                </itemizedlist>

                <para></para>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para></para>

        <para><indexterm>
            <primary>Simulation Element</primary>

            <secondary>optimization{}</secondary>
          </indexterm><emphasis role="bold">Element
        optimization{}</emphasis></para>

        <para><variablelist>
            <varlistentry>
              <term>Name</term>

              <listitem>
                <para><code>optimization</code> - defines optimization
                parameter.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Properties</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="4">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Required</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>simulated</code></entry>

                          <entry>the simulated variable name</entry>

                          <entry>String</entry>

                          <entry>y</entry>
                        </row>

                        <row>
                          <entry><code>observed</code></entry>

                          <entry>the observed variable name</entry>

                          <entry>String</entry>

                          <entry>y</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Sub elements</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="5">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Default</entry>

                          <entry align="center">Occurrences</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>of</code></entry>

                          <entry>objective function definition</entry>

                          <entry>of {}</entry>

                          <entry>-</entry>

                          <entry>+</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Notes</term>

              <listitem>
                <itemizedlist>
                  <listitem>
                    <para>....</para>
                  </listitem>
                </itemizedlist>

                <para></para>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para></para>

        <para><indexterm>
            <primary>Simulation Element</primary>

            <secondary>of{}</secondary>
          </indexterm><emphasis role="bold">Element
        of{}</emphasis><variablelist>
            <varlistentry>
              <term>Name</term>

              <listitem>
                <para><code>of</code> - defines an objective function.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Properties</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="4">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Required</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>method</code></entry>

                          <entry>the objective function</entry>

                          <entry><code>NS</code> | <code>RMSE</code> |
                          <code>ABSDIF</code> | <code>LOGABSDIF</code> |
                          <code>PMCC</code>
                          <superscript>1)</superscript></entry>

                          <entry>y</entry>
                        </row>

                        <row>
                          <entry><code>timestep</code></entry>

                          <entry>the time step for simulated and observed
                          values</entry>

                          <entry><code>DAILY</code></entry>

                          <entry>n (default: <code>DAILY</code>)</entry>
                        </row>

                        <row>
                          <entry><code>weight</code></entry>

                          <entry>the objective function weight</entry>

                          <entry>double (<code>0 - 1.0</code>)</entry>

                          <entry>n <superscript>2)</superscript></entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Notes</term>

              <listitem>
                <itemizedlist>
                  <listitem>
                    <para><superscript>1)</superscript> If the method name is
                    not one of the constants above, it is assumed to be the
                    name of a user defined Java class that (i) implements the
                    <code>oms3.ObjectiveFunction</code> interface, and (ii) is
                    available on the <code>CLASSPATH</code>. This was a
                    modeler can implement custom objective function(s) and use
                    the in a simulation.</para>
                  </listitem>

                  <listitem>
                    <para><superscript>2)</superscript> If the weight is not
                    specified, all provided objective functions will be
                    equally weighted. If specified, it has to be specified for
                    <emphasis role="bold">all</emphasis> objective functions.
                    The user has to ensure that the weights sum up to
                    <code>1.0</code> for all objective functions.</para>
                  </listitem>
                </itemizedlist>

                <para></para>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para></para>

        <para><indexterm>
            <primary>Simulation Element</primary>

            <secondary>parameter{}</secondary>
          </indexterm><emphasis role="bold">Element
        parameter{}</emphasis></para>

        <para><variablelist>
            <varlistentry>
              <term>Name</term>

              <listitem>
                <para><code>parameter</code> - defines model parameter to
                calibrate</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Properties</term>

              <listitem>
                <para><informaltable>
                    <tgroup cols="4">
                      <thead>
                        <row>
                          <entry align="center"> Name</entry>

                          <entry align="center"> Description</entry>

                          <entry align="center">Type</entry>

                          <entry align="center">Required</entry>
                        </row>
                      </thead>

                      <tbody>
                        <row>
                          <entry><code>lower</code></entry>

                          <entry>the lower boundary</entry>

                          <entry>double</entry>

                          <entry>y</entry>
                        </row>

                        <row>
                          <entry><code>upper</code></entry>

                          <entry>the upper boundary</entry>

                          <entry>double</entry>

                          <entry>y</entry>
                        </row>

                        <row>
                          <entry><code>strategy</code></entry>

                          <entry>the calibration strategy</entry>

                          <entry><code>MEAN</code> | <code>VALUES</code> |
                          <code>BINARY</code></entry>

                          <entry>n (default: MEAN)</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Notes</term>

              <listitem>
                <itemizedlist>
                  <listitem>
                    <para>Only MEAN is implemented at the moment.</para>
                  </listitem>
                </itemizedlist>

                <para></para>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para></para>
      </section>

      <section>
        <title>References</title>

        <para>SCE Related Papers</para>

        <para>Duan, Q., Sorooshian, S. and Gupta, V.K., (1992). Effective and
        efficient global optimization for conceptual rainfall-runoff models.
        Water Resources Research 28 (4), 1015-1031.</para>

        <para>Duan, Q., Sorooshian, S. and Gupta, V.K., (1993). A Shuffled
        Complex Evolution approach for effective and efficient global
        minimization. J. of Optimization Theory and its Applications, 76 (3),
        501-521.</para>

        <para>Duan, Q., Sorooshian, S. and Gupta, V.K., (1994). Optimal use of
        the SCE-UA global optimization method for calibrating watershed
        models. Journal of Hydrology, 158 265-284</para>

        <para>Step-Wise, Multiple-Objectiveu Calibration Related Papers</para>

        <para>Hay, L.E., Leavesley, G.H., Clark, M.P., Markstrom, S.L., Viger,
        R.J., and Umemoto, M. (2006). Step-wise, multiple-objective
        calibration of a hydrological model for a snowmelt-dominated basin.
        Journal of the American Water Resources Association.</para>

        <para>Hay, L.E., Leavesley, G.H., and Clark, M.P., (2006). Use of
        Remotely-Sensed Snow Covered Area in Watershed Model Calibration for
        the Sprague River, Oregon. Joint 8th Federal Interagency Sedimentation
        Conference and 3rd Federal Interagency Hydrologic Modeling Conference,
        Reno, Nevada, April, 2006.</para>

        <para>Others</para>

        <para>Leavesley, G.H. and L.G. Stannard, (1995). The
        precipitation-runoff modeling system- PRMS. In: Computer Models of
        Watershed Hydrology, Water Resources Publications, Highlands Ranch,
        CO, edited by V.P Singh, Chapter 9, 281-310.</para>

        <para>Leavesley, G.H., Restrepo, P.J., Markstrom, S.L., Dixon, M., and
        Stannard, L.G., (1996). The modular modeling system - MMS: User's
        manual: U.S. Geological Survey Open File Report 96-151, 200 p.</para>
      </section>
    </section>

    <section>
      <title>Testing (<code>tests</code>)</title>

      <para>Unit testing is the concept of automated verification of
      individual software units. In OMS such units are components, the basic
      building blocks of simulation models. Unit testing support is part of
      the core OMS framework. It can be set up easily to efficiently test and
      verify individual components. Best model developing practice should
      embrace unit testing by complementing a scientific component with
      sufficient tests, hence assuring of its proper working and creating
      confidence.</para>

      <para>Some fundamental rules for components tests apply and are
      consistent with general purpose testing frameworks. Tests are comprised
      of individual test cases, which are independent from each other. Each
      test case can run on its own.</para>

      <para>The OMS3 unit testing implementation closely resembles concepts
      and strategies of related frameworks, such as JUnit or TestNG. This
      allows easy transitioning into OMS3 component testing if previous unit
      testing knowledge exists.</para>

      <para>The <code>tests</code> element supports the setup of many test
      cases for an individual component or whole model. Each individual test
      case for a component is described with the <code>test</code> element.
      Since component all adhere to a common layout, testing is
      straightforward. For a single test case the component is populated with
      data for all Input fields (<code>@In</code>), the execution method gets
      invoked (<code>@Execute</code>), and finally the produced output fields
      (<code>@Out</code>) can be checked. There are different ways to generate
      input, perform test execution and verify proper output. See the examples
      in this section for test strategy variations.</para>

      <para><emphasis role="bold"><indexterm>
          <primary>Simulation Element</primary>

          <secondary>tests{}</secondary>
        </indexterm>Element tests{}</emphasis></para>

      <variablelist>
        <varlistentry>
          <term>Name</term>

          <listitem>
            <para><code>tests</code> - Defines a set of tests for a single
            component</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Properties</term>

          <listitem>
            <para><informaltable>
                <tgroup cols="4">
                  <thead>
                    <row>
                      <entry align="center"> Name</entry>

                      <entry align="center"> Description</entry>

                      <entry align="center">Type</entry>

                      <entry align="center">Occurrences</entry>
                    </row>
                  </thead>

                  <tbody>
                    <row>
                      <entry><code>name</code></entry>

                      <entry>name of the test set</entry>

                      <entry>string</entry>

                      <entry>?</entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Sub Elements</term>

          <listitem>
            <para><informaltable>
                <tgroup cols="2">
                  <thead>
                    <row>
                      <entry align="center"> Name</entry>

                      <entry align="center">Occurrences</entry>
                    </row>
                  </thead>

                  <tbody>
                    <row>
                      <entry><code>resource</code></entry>

                      <entry>+</entry>
                    </row>

                    <row>
                      <entry><code>model{}</code></entry>

                      <entry>1</entry>
                    </row>

                    <row>
                      <entry><code>test{}</code></entry>

                      <entry>+</entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes</term>

          <listitem>
            <itemizedlist>
              <listitem>
                <para>Other general elements such as
                <code>outputstrategy</code> are not recommended for use. They
                introduce dependencies to external resources, such as files
                and folders. Components should be tested with no external
                resource dependencies.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>

      <para></para>

      <para><emphasis role="bold"><indexterm>
          <primary>Simulation Element</primary>

          <secondary>test{}</secondary>
        </indexterm>Element test{}</emphasis></para>

      <para><variablelist>
          <varlistentry>
            <term>Name</term>

            <listitem>
              <para><code>test</code> - Defines a single test case for a
              component</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Properties</term>

            <listitem>
              <para><informaltable>
                  <tgroup cols="4">
                    <thead>
                      <row>
                        <entry align="center"> Name</entry>

                        <entry align="center"> Description</entry>

                        <entry align="center">Type</entry>

                        <entry align="center">Occurrences</entry>
                      </row>
                    </thead>

                    <tbody>
                      <row>
                        <entry><code>name</code></entry>

                        <entry>name of the test case (defaults:
                        'test-#'</entry>

                        <entry>string</entry>

                        <entry>?</entry>
                      </row>

                      <row>
                        <entry><code>count</code></entry>

                        <entry>number of test case repetitions (default:
                        1)</entry>

                        <entry>positive decimal</entry>

                        <entry>?</entry>
                      </row>

                      <row>
                        <entry><code>timeout</code></entry>

                        <entry>maximum time in milliseconds to finish a test
                        case (default: infinite). The test fails if this time
                        exceeds.</entry>

                        <entry>positive decimal</entry>

                        <entry>?</entry>
                      </row>

                      <row>
                        <entry><code>pre</code></entry>

                        <entry>code block to run before execution</entry>

                        <entry>closure</entry>

                        <entry>?</entry>
                      </row>

                      <row>
                        <entry><code>post</code></entry>

                        <entry>code block to run after execution</entry>

                        <entry>closure</entry>

                        <entry>?</entry>
                      </row>

                      <row>
                        <entry><code>rangecheck</code></entry>

                        <entry>perform field range checks before and after
                        execution (default: false)</entry>

                        <entry>boolean</entry>

                        <entry>?</entry>
                      </row>

                      <row>
                        <entry><code>ignore</code></entry>

                        <entry>ignore this test case on test execution
                        (default: no)</entry>

                        <entry>string</entry>

                        <entry>?</entry>
                      </row>

                      <row>
                        <entry><code>data</code></entry>

                        <entry>data set(s) to be passed to the component as
                        input</entry>

                        <entry>array of &lt;objects&gt;</entry>

                        <entry>n</entry>
                      </row>

                      <row>
                        <entry><code>expected</code></entry>

                        <entry>expected exception. The test succeeds if the
                        exception is thrown, otherwise fails. The value is the
                        full qualified class name as string.</entry>

                        <entry>string</entry>

                        <entry>n</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Notes</term>

            <listitem>
              <itemizedlist>
                <listitem>
                  <para>If no test case name is given, a default generic name
                  is provided with the actual test case number within the test
                  set. The name for the first test case would the be
                  '<code>test-1</code>'</para>
                </listitem>

                <listitem>
                  <para>If both, the <code>data</code> property and the
                  <code>count</code> is provided, the count property is
                  ignored. The number of test repetitions will be determined
                  by the provided data sets.</para>
                </listitem>

                <listitem>
                  <para>If the <code>ignore</code> property is provided with a
                  string value, the test will not be executed, the string
                  value will be printed out instead.</para>
                </listitem>

                <listitem>
                  <para>The <code>rangecheck</code> property might be combined
                  with all other properties.</para>
                </listitem>
              </itemizedlist>

              <para></para>
            </listitem>
          </varlistentry>
        </variablelist></para>

      <para></para>

      <para></para>

      <section>
        <title>Single Test Runs</title>

        <para></para>

        <para><blockquote>
            <programlisting><emphasis role="bold">tests</emphasis>(name:"Tests") {

  resource "$oms_prj/build/test/classes/"
  model (classname:"ngmf.sim.test.Mainentry")

  <emphasis role="bold">test(name:"Simgle Test")</emphasis>
}
</programlisting>
          </blockquote></para>

        <para></para>

        <para></para>
      </section>

      <section>
        <title>Pre/Post Code blocks for custom checks</title>

        <para></para>

        <para></para>

        <para><blockquote>
            <programlisting>tests(name:"Tests") {

  resource "$oms_prj/build/test/classes/"
  model (classname:"ngmf.sim.test.Mainentry")

  test(name:"Simgle Test",
           <emphasis role="bold">pre:{ 
             it.p1 = 2.0
             it.p2 = 2.0
             it.p3 = 3.0
          },

          post:{
             assert it.est_coeff == 2.4
             assert it.estimate == 7.0
          }</emphasis>
    )
}
</programlisting>
          </blockquote></para>

        <para></para>

        <para>[Asserts]</para>
      </section>

      <section>
        <title>Repetitive Runs</title>

        <para></para>

        <para></para>

        <para><blockquote>
            <programlisting>tests(name:"Tests") {

   resource "$oms_prj/build/test/classes/"
   model (classname:"ngmf.sim.test.Mainentry")

   test(count: 10, timeout:200,
          pre:{ 
             Random r = new Random()
             it.p1 = r.nextDouble()
             it.p2 = r.nextDouble()
             it.p3 = r.nextDouble()
          },

          post:{
             assert it.est_coeff == 2.4
             assert it.estimate == 7.0
          }
    )

}
</programlisting>
          </blockquote></para>

        <para></para>
      </section>

      <section>
        <title>Parameterized Tests with data sets</title>

        <para></para>
      </section>

      <section>
        <title>Disabling Tests</title>

        <para></para>

        <para></para>

        <para><blockquote>
            <programlisting>tests(name:"Tests") {

   resource "$oms_prj/build/test/classes/"
   model (classname:"ngmf.sim.test.Mainentry")

   test(count: 10, <emphasis role="bold">ignore:'Working on it',</emphasis>
          pre:{ 
             Random r = new Random()
             it.p1 = r.nextDouble()
          }
    )

}
</programlisting>
          </blockquote></para>

        <para></para>
      </section>

      <section>
        <title>Implicit range checking</title>

        <para></para>
      </section>

      <section>
        <title>Timing Constraints</title>

        <para></para>

        <para></para>
      </section>

      <section>
        <title>Expected Exceptions</title>

        <para></para>

        <para></para>
      </section>
    </section>

    <section>
      <title>SimBuilder</title>

      <para>The common start and entry point for developing a simulation is
      the class <code>SimBuilder</code>. This class is part of the OMS
      simulation package.</para>

      <para><code>SimBuilder</code> provides for two main features</para>

      <orderedlist>
        <listitem>
          <para>The <emphasis role="bold">Creation</emphasis> of different
          kinds of simulations by using a very easy language structure</para>
        </listitem>

        <listitem>
          <para>The <emphasis role="bold">Execution</emphasis> of a simulation
          once its built successfully.</para>
        </listitem>
      </orderedlist>

      <para>. There are at least two parts that are common to every simulation
      as shown below:</para>

      <para><blockquote>
          <para><emphasis>A first Simulation:</emphasis></para>

          <programlisting><emphasis role="bold"> sb = new oms3.SimBuilder() </emphasis>                // (1)
<emphasis role="bold"> sb.</emphasis>sim(name:"SimpleTWModel for EF") {      // (2)
    // define the model
    model(classname:"tw.Thornthwaite") {
        // add parameter
        parameter {
            climateFile  "c:/od/projects/ngmf.models/src/tw/climate.cst"
            outputFile   "output.csv"
            runoffFactor 0.5
            latitude     35.0
            smcap        200.0
        }
    }
 }</programlisting>
        </blockquote></para>

      <variablelist>
        <varlistentry>
          <term>(1) Creating the Builder</term>

          <listitem>
            <para>This statement instantiates a builder object using its class
            <code>oms3.SimBuilder</code>; In the example above it is names
            <code>sb</code>, but this name is just arbitrary.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>(2) Creating the Simulation from the builder</term>

          <listitem>
            <para>Use the <code>SimBuilder</code> instance to create the
            simulation. The example above used the <code>simu</code> method to
            create a basic simulation (<code>simu</code> is explained in
            detail below)</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The <code>SimBuilder</code> class can be instantiated with the
      following properties:</para>

      <variablelist>
        <varlistentry>
          <term>level (java.util.logging.Level)</term>

          <listitem>
            <para>The logging <code>level</code> that will be used on
            simulation building and be passed on to the simulation instance.
            Valid logging levels are defined in
            <code>java.util.logging.Level</code> as <code>ALL, FINEST, FINER,
            FINE, CONFIG, INFO, WARNING, SEVERE,</code> or <code>OFF</code>.
            Setting the level to <code>CONFIG</code> will for example report
            the building of the simulation as it performs. If not provided,
            logging is set to <code>OFF</code>.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para></para>

      <para>The following example illustrated the proper setting of those
      properties.</para>

      <para><blockquote>
          <programlisting> sb = new oms3.SimBuilder(<emphasis role="bold">"CONFIG</emphasis>") 
 sim = sb.sim(name:"SimpleTWModel for EF") { 
   // define the model
   //...
 }

<emphasis role="bold"> sim.run()</emphasis>   // call run(), since no autorun!
</programlisting>
        </blockquote>Setting the properties above may help inspecting the
      simulation build process as it progresses without automatic
      execution.</para>

      <para>OMS supports different flavors of model simulations that are all
      constructed in a similar way from the <code>SimBuilder</code> class.
      This allows constructing and performing basic simulations, model
      calibrations, forecasting methods, uncertainty and sensitivity analysis,
      or just plain model testing in an easy and consistent way. The following
      types of simulations can be created using
      <code>SimBuilder</code>.</para>

      <table>
        <title>Simulation Types</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center"> Simulation type</entry>

              <entry align="center">Description </entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>sim{}</code></entry>

              <entry>Basic Simulation, most general simulation type</entry>
            </row>

            <row>
              <entry><code>esp{}</code></entry>

              <entry>Ensemble Streamflow Prediction</entry>
            </row>

            <row>
              <entry><code>luca{}</code></entry>

              <entry>Model calibration using the USGS LUCA method</entry>
            </row>

            <row>
              <entry><code>tests{}</code></entry>

              <entry>Unit testing for components.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The following sections introduce elements that are commonly used
      across all simulation types, followed by the simulations them
      selfs.</para>
    </section>
  </chapter>

  <chapter>
    <title>The Modeling Console</title>

    <para>The OMS3 Modeling Console is a graphical user interface for the OMS3
    Modeling Framework. It provides simple access to framework core features
    such as simulation management, output analysis, or documentation
    generation. Using the OMS3 Console is one way to interact with the
    framework. Others methods are the integration of OMS3 into Integrated
    Development Environments (IDEs) or custom applications for model
    applications. The main purpose of the OMS3 Console is to allow a modeller
    a straightforward and simple tool to develop a a model and a simulation,
    run the simulation, provide for parameter editing and offer ad-hoc post
    run analysis and visualization. Figure ??? provides an overview of the
    OMS3 Console.</para>

    <para><figure>
        <title>The OMS3 Console</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Handbook/Slide40.PNG"
                       scale="75"></imagedata>
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>The console can be started directly from the OMS download site at
    <code>http://oms.javaforge.com</code>, by clicking the <emphasis
    role="bold">Launch</emphasis> button. It is provided as a Java Webstart
    application that integrates itself into the client's desktop after
    installation. As the only prerequisite, a user is required to install the
    JDK version 1.6 or greater on the client.</para>

    <para>The OMS3 Console is a self signed Webstart application. On initial
    launch it will prompt the user to run the console, even without
    certificate validation. Accept this and click on <emphasis
    role="bold">Run</emphasis> the console anyway.</para>

    <para>The Console's principal user interface is shown in Figure ???. Many
    of the user interface elements operate as known from many other
    applications (File|Open, File | Save, ...), the specific console user
    interface elements are highlighted in Figure ???</para>

    <variablelist>
      <varlistentry>
        <term>Working Directory</term>

        <listitem>
          <para>The working directory sets the base directory and system
          property <code>oms3.work</code> for a simulation. It defines a
          workspace for the simulation. If this folder contains the file
          <code>oms3.conf</code>, its content gets loaded and applied for all
          simulation. For example if the file oms3.conf contains a list of
          open files, they will be opened after setting this directory. The
          directory can be set using the button next to the directory
          name.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Simulation tabs</term>

        <listitem>
          <para>Each tab contains one simulation script, tool bar, and
          associated console output. The console might have multiple
          simulations open at one time, however they must originate from the
          same workspace. Each simulation tabs operates independent from each
          other, means, you can execute one simulation, while editing another
          one in a different tab.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Toolbars</term>

        <listitem>
          <para>The console has two tool bars. A global tool bar manages a set
          of simulations. In addition, each simulation has its own tool bar,
          allowing for different operations such as executing, documenting,
          etc a simulation. The tool bar action are explained in detail
          below.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Editor</term>

        <listitem>
          <para>The simulation editor allows creating and editing a simulation
          file.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Console Output</term>

        <listitem>
          <para>This read/only output area, shows all standard and error
          output from the simulation run.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Status Line</term>

        <listitem>
          <para>Some informative message during console use.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Each simulation tab contains its own private tool bar (Figure ???).
    The tool bar actions are always directed towards the current simulation
    script in the editor</para>

    <para></para>

    <figure>
      <title>Tool Bars</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/Handbook/Slide41.PNG"
                     scale="75"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <orderedlist>
      <listitem>
        <para>Creates a new, empty simulation.</para>
      </listitem>

      <listitem>
        <para>Opens an existing simulation from <code>&lt;working
        directory&gt;/simulations</code>.</para>
      </listitem>

      <listitem>
        <para>Saves all open simulations.</para>

        <para></para>
      </listitem>

      <listitem>
        <para>Saves the script to a file. If the file is new, it will prompt
        for a name.</para>
      </listitem>

      <listitem>
        <para>Runs the simulation script.</para>
      </listitem>

      <listitem>
        <para>Interrupts and stops a running simulation. If no simulation is
        running this button is disabled.</para>
      </listitem>

      <listitem>
        <para>Opens the parameter editor with parameter being loaded from the
        current simulation. The parameter editor is explained below.</para>
      </listitem>

      <listitem>
        <para>Executes the <code>analysis</code> part of a simulation. This
        will usually result in an new window containing graphs and plots. The
        analysis window is explained in more detail below.</para>
      </listitem>

      <listitem>
        <para>Creates Docbook5 documentation of the simulation and stores it
        into the current output folder.</para>
      </listitem>

      <listitem>
        <para>Creates a <code>SHA</code> digital signature of the simulation
        and prints the simulation fingerprint to the output window.</para>
      </listitem>

      <listitem>
        <para>Opens the last output folder using the operating system's file
        explorer.</para>
      </listitem>

      <listitem>
        <para>Clears the console output for this simulation.</para>
      </listitem>

      <listitem>
        <para>Logging setting. Define the log level here for your simulation,
        this will result in more or less verbose output during simulation
        execution.</para>
      </listitem>
    </orderedlist>

    <para>Each tab has a context menu that is accessible with a right mouse
    click. It allows saving, saving under a different name, closing, and other
    operations with respect to the selected tab.</para>

    <para></para>

    <section>
      <title>Project Workspace</title>

      <para>An OMS3 workspace is a recommended but not required directory
      layout. It is used to store and operate all resources that belong to a
      simulation such as model components, climate data files, parameter
      files, simulations, output data, documentation. It represents best
      practice file management and is result of many realized simulation
      projects within OMS3. It also complements the folder layout of many
      Integrated Development Environments, so an IDE and OMS3 can share the
      same project or working directories.</para>

      <para>The working directory contains at least the folders as shown below
      with suggested content. This is sufficient to use the model for
      simulation runs.</para>

      <para><blockquote>
          <programlisting>  &lt;<emphasis role="bold">Working Directory</emphasis>&gt;
  |   oms3.conf
  +-- <emphasis role="bold">simulations</emphasis>      (*.sim, *.luca, *.esp, ...)
  +-- <emphasis role="bold">data</emphasis>             (*.csv)
  +-- <emphasis role="bold">output</emphasis>           (*.csv)
  +-- <emphasis role="bold">dist</emphasis>             (*.jar, *.dll, *.exe)
</programlisting>
        </blockquote></para>

      <para>The <code>&lt;Working Directory&gt;</code> is the root of the
      project workspace. In the console, it is being set using the user
      interface. This folder name is passed to the simulation as a Java system
      property <code>"oms3.work"</code>, that can be read by the simulation
      and the model components. The directories have the following content and
      meaning:</para>

      <variablelist>
        <varlistentry>
          <term><code>simulations</code></term>

          <listitem>
            <para>contains simulation files or other scripts. Simulation files
            execute a model with input data and produce output. Simple
            simulations, or scripts for model calibration, uncertainty or
            sensitivity analysis can be stored here.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>data</code></term>

          <listitem>
            <para>contains input data to the model, usually climate data or
            parameter sets. Those file can be OMS3 <code>csv</code> data files
            or any other data file format.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>output</code></term>

          <listitem>
            <para>this folder will contain the simulation output data after
            each run. Usually it will have sub-folders, that have the name of
            the simulation and further sub folders for each run if output is
            versioned. See <code>&lt;outputstrategy&gt;</code> for further
            details.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>dist</code></term>

          <listitem>
            <para>The dist folder contains all executable code for a
            simulation run. These are usually platform independent
            componet/model <code>*.jar</code> file(s), or platform dependent
            DLLs (<code>*.dll</code>) or executables (<code>*.exe</code>), and
            others.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>All the folders above may have sub-folders to store data/code that
      is for example organized by watershed or other application area.</para>

      <para>It is recommended that the project workspace contains the folders
      as shown above. The folder organize the different file types of a
      project. The project root folder can contain the file
      <code>oms3.conf</code>.</para>

      <para>The workspace can also accommodate for component code development.
      Add for example a source (<code>src</code>) folder that will contain the
      component / model source files. The build process (e.g. managed by an
      IDE) will build the executable and store it in the <code>dist</code>
      folder.</para>

      <para><blockquote>
          <programlisting>  &lt;<emphasis role="bold">Working Directory</emphasis>&gt;
  |   oms3.conf
  +-- simulations      (*.sim, *.luca, *.esp, ...)
  +-- data             (*.csv)
  +-- output           (*.csv)
  +-- dist             (*.jar, *.dll, *.exe)      
  +-- <emphasis role="bold">src</emphasis>              (*.java, *.f90, *.c, ..)
</programlisting>
        </blockquote></para>

      <para></para>

      <variablelist>
        <varlistentry>
          <term><code>src</code></term>

          <listitem>
            <para>The src folder contains sources, if the workspace is also
            being used to develop/test components and models. Source files are
            Java files (<code>*.java</code>), FORTRAN files
            (<code>*.for,..</code>), or C/C++ files (<code>*.c,
            *cpp,...</code>), just to mention some examples.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>In addition to the listed workspace folders, there can be other
      sub folders needed by IDEs and other development tools. Note that of a
      folder name is case sensitive when used in a simulation script.</para>

      <para></para>

      <section>
        <title>Workspace configuration file '<code>oms3.conf</code>'</title>

        <para>The file oms3.conf is an optional file located in a project
        working directory. It can be used to provide for project specific
        settings to be used by the OMS3 console. The console is usually
        creating such a file when a working directory is set. A user can also
        edit this file and all custom setting for model execution. The file
        oms3.conf is a text file that has "key-value-pairs" of configuration
        information, separated by lines.</para>

        <para><code>oms3.conf</code> Example:</para>

        <para><blockquote>
            <programlisting>#OMS3 Console Project Configuration
#Mon Apr 09 10:11:09 MDT 2010
open.files=simulation/efcarson/efc.sim;simulation/efcarson/efc.esp
jvm.options=-Xms128M -Xmx256M

</programlisting>
          </blockquote></para>

        <para>The example above shows the some project settings. The entry
        <code>open.files</code> lists all files relative to the working
        directory that should be opened when the workspace is set in the
        console. The files names are separated by semicolon.</para>

        <para>The entry<code>jvm.options</code> contains as value additional
        options for the JVM to be used when executing a simulation. This can
        be any valid JVM argument. Usually this option tweaks memory
        provisioning for the simulation, or garbage collection adjustments.
        The example above provides 128 MB of memory initially to the
        simulation and sets the maximum available memory to 265 MB. The entry
        <code>jvm.options</code> should be managed manually by the
        user.</para>

        <para></para>
      </section>
    </section>

    <section>
      <title>Parameter Editor</title>

      <para>The Parameter Editor is a visual tool for parameter editing that
      is embedded in the OMS3 console. It can be started by clicking on the
      appropriate button in the tool bar of a simulation tab. It allows for a
      presentation and filtering of parameter values, bulk editing of values,
      statistics, and basic spread sheet like operations.</para>

      <para>The editor works on parameter files that adhere to the OMS3
      <code>CSV</code> parameter file format. Such files can be easily edited
      with other external tools such as Excel, however the parameter editor
      provides an easy to use interface to manipulate parameter values
      numerically.</para>

      <para>Note that only parameter files that are references in a simulation
      using the <code>.. parameter(file:'&lt;name&gt;') ...</code> construct
      can be edited this way. Parameter that are in-lined within the parameter
      section cannot be presented and edited here.</para>

      <para></para>

      <figure>
        <title>Parameter Editor</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Handbook/Slide42.PNG"
                       scale="75"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Figure ??? shows the Parameter Editor with parameter content. The
      layout of the window is organized as follows.</para>

      <variablelist>
        <varlistentry>
          <term>Parameter File</term>

          <listitem>
            <para>This combo box shows the active parameter file for editing.
            When opened it lists all parameter files as specifies in the
            simulation file. Changing the combo box selection will cause the
            while view to change content.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>Filter</term>

          <listitem>
            <para>The Filter combo box allows to switch views on parameters.
            They can be filtered by dimension, by scalars, or all parameter
            can be presented as sown in this figure. The selection change in
            this combo box will cause the editor values to change.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>Command Console</term>

          <listitem>
            <para>The command line on this console allows the (bulk)
            manipulation of parameter data shown below. This command line has
            a history, a help function and offers a powerful method of editing
            parameter values. It is further explained below.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>Parameter Editor</term>

          <listitem>
            <para>This table shows the parameter names and values. The layout
            might change when different filter are applied. It has in-place
            editing capabilities, by clicking on a cell, it value can be
            edited and changed.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para></para>

      <para><figure>
          <title>Parameter Editor with applied filter</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/Handbook/Slide43.PNG"
                         scale="75"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>Figure ??? shows the parameter editor with an applied
      dimension filter. The table presents all parameter that are bound to a
      specific dimension. Selecting cells in the table will print basic
      statistics about those on the bottom of the window. Any area can be
      selected, a column selection will print statistics about the whole
      column.</para>

      <section>
        <title>Parameter Editor Console</title>

        <para>The Parameter Editor contains a command line console at the
        upper part of the window. It allows the</para>
      </section>
    </section>

    <section>
      <title>Analysis Output</title>

      <para>The analysis output window provides ad-hoc result information as
      defined in the analysis section of a simulation. It is executed by
      pressing the Analysis Button in the tool bar in a simulation tab. A
      analysis window might look like Figure ???</para>

      <figure>
        <title>Analysis Output</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Handbook/Slide47.PNG"
                       scale="75"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The tile bar shows the output folder that is used to perform the
      output data analysis. Depending on the setting in
      <code>&lt;outputstrategy&gt;</code>, such output can be versioned or
      unversioned. Either way, the <emphasis role="bold">last</emphasis>
      output folder of a simulation run is presented.</para>

      <para>The <code>analysis</code> section of a simulation files allows the
      definition of plots such as <code>timeseries</code>, <code>error</code>
      plots, <code>scatter</code> plots, <code>esp-trace</code> analysis
      plots, and others. Each of these plots will appear as a tab in the
      analysis window, the plot title shows as a tab name.</para>

      <para>A part of the analysis section used to create the plots in Figure
      ??? is shown below.</para>

      <para><blockquote>
          <programlisting>  ...
  analysis(title:"Simulation Output") {
       <emphasis role="bold"> timeseries(title:"East Fork Carson", view: COMBINED) {  
            x(file:"%last/out1.csv", column:"date")
            y(file:"%last/out1.csv", column:"basin_cfs")
            calc(eq:"sim - obs") {
                sim(file:"%last/out1.csv", column:"basin_cfs")
                obs(file:"%last/out1.csv", column:"runoff[0]")
            }
            y(file:"%last/out1.csv", column:"runoff[0]")
        } </emphasis>
        timeseries(title:"Error", view: MULTI ) {
          ...
</programlisting>
        </blockquote></para>

      <para></para>

      <para>It is clear how the <code>timeseries</code> section content maps
      to the visual view. Note the the variable <code>%last</code> references
      the last output folder of a simulation run. The plot also has a
      calculated column.</para>

      <para>Note that an analysis section of a simulation is only being used
      when invoked. A regular simulation run does not perform the data
      analysis.</para>

      <para></para>
    </section>
  </chapter>

  <chapter>
    <title>Data IO</title>

    <para>This chapter covers data input and output handling. Although this
    library is a part of the OMS3 core package structure it is neither
    depending on OMS3, nor OMS3 is depending on it. They just play well
    together. Design motivations for this package were (i) the support of
    typical scientific Data IO such as tables and properties (ii) human
    readability (it should not be too verbose), (iii) it has to support meta
    data, (iv) it should be consumable by other tools and (v) it should allow
    the definition of a simple API, to programmatically read and write
    data.</para>

    <section>
      <title>Data Input/Output</title>

      <para>There two type of informations that adhere to this are:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Tables</emphasis>, containing tabular
          information</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Properties</emphasis>, referring to
          key/value property data</para>
        </listitem>
      </itemizedlist>

      <para>The Data IO format was commonly defined for both, tables and
      properties. The format is based on CSV structure that has been extended
      with some meta tags. A file might contain any number of tables and
      properties.</para>

      <para>Both types of information can be mixed in the same file and may
      occur multiple times. The definitions for tables and properties are
      similar, both support meta data.</para>

      <itemizedlist>
        <listitem>
          <para>The data file complies fully to the CSV standard.</para>
        </listitem>

        <listitem>
          <para>The file name extension is csd, standing for "comma separated
          data". It might be zipped, and would then have the extension
          csz.</para>
        </listitem>

        <listitem>
          <para>A csd file might contain a table or property section, or
          multiple of those, or a mixture of both.</para>
        </listitem>

        <listitem>
          <para>A <code>#</code> symbol at the beginning of the line indicates
          a comment line.</para>
        </listitem>

        <listitem>
          <para>Empty lines are ignored.</para>
        </listitem>
      </itemizedlist>

      <para></para>

      <section>
        <title>Keywords</title>

        <para>Keywords are used to indicate properties and tables in the
        file.</para>

        <table>
          <title>CSV Tags</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry align="center"> Keyword</entry>

                <entry align="center"> Name</entry>

                <entry align="center">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>@T</entry>

                <entry>Table</entry>

                <entry>Defines a new table</entry>
              </row>

              <row>
                <entry>@H</entry>

                <entry>Header</entry>

                <entry>Starts a header in a table</entry>
              </row>

              <row>
                <entry>@S</entry>

                <entry>Section</entry>

                <entry>Starts a new property section</entry>
              </row>

              <row>
                <entry>@P</entry>

                <entry>Property</entry>

                <entry>Starts a new property</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <note>
          <para>All of those keywords can be followed by optional meta
          data.</para>
        </note>

        <note>
          <para>Keywords are case insensitive (<code>@T</code> is equal
          to<code>@t</code>).</para>
        </note>
      </section>

      <section>
        <title>Meta data</title>

        <para>Meta data may always follow the property and table markups.
        There is one meta data entry by line. Such an entry may have a
        key/value pair (separated by a comma), or a single key with no value
        indicating the presence of a meta data entry.</para>

        <para>The property section example below, shows section level meta
        data supporting the whole "Parameter set" such as data, or
        <code>createdBy</code>, as well as key value pair property meta data
        such as description or single value properties such as public. It
        might be good practice to quote meta data values in general to account
        for potential commas, however it is not required.</para>

        <table>
          <title>Meta Data Examples (@S and @T)</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry align="center"> Name</entry>

                <entry align="center"> Description</entry>

                <entry align="center">Example</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>CreatedBy</code></entry>

                <entry>data set creation date</entry>

                <entry><code>CreatedBy, "JCarlson"</code></entry>
              </row>

              <row>
                <entry><code>CreatedAt</code></entry>

                <entry>user who created the data set</entry>

                <entry><code>CreatedAt, "May 1st, 2008"</code></entry>
              </row>

              <row>
                <entry><code>Description</code></entry>

                <entry>brief data set description</entry>

                <entry><code>Description, "EFC climate file"</code></entry>
              </row>

              <row>
                <entry><code>VersionInfo</code></entry>

                <entry>Version information (use in conjunction with
                VCS)</entry>

                <entry><code>VersionInfo, "$Id:"</code></entry>
              </row>

              <row>
                <entry><code>SourceInfo</code></entry>

                <entry>Source information (use in conjunction with
                VCS)</entry>

                <entry><code>SourceInfo, "$HeadURL:"</code></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>Properties</title>

        <para><indexterm type="ssss">
            <primary>Key Value Pairs</primary>
          </indexterm>Properties are key/value pairs (KVP) that are aggregated
        in a section. There could be meta data for the whole section
        <code>@S</code> and also for each property <code>@P</code>. The
        example below shows a property section.</para>

        <blockquote>
          <para>Property Example:</para>
        </blockquote>

        <blockquote>
          <programlisting> @S, "Parameter"
 CreatedAt, "Jan 02, 1980"
 CreatedBy, Joe

 # Single Properties 
 @P, coeff, 1.0
 description, "A coefficient"
 public

 @P, start, "02-10-1977"
 description, "start of simulation"
</programlisting>
        </blockquote>

        <para>A proper section starts with the <code>@S</code> keyword,
        followed be the name of the property section. It is followed by
        optional meta data. Meta data keys/values can be arbitrary, and may
        occur at any number. A single property starts with the property
        keyword <code>@P</code>, followed by the property name and the
        property value. Optional meta data may also follow a single property.
        The property section ends at the beginning of the next section or
        table or the end of the file.</para>

        <section>
          <title>Property Key/Value Substitution</title>

          <para>Properties support internal key/value substitution. This
          feature helps organizing property sets more efficiently, An example
          is shown below. A directory property <code>idir</code> is defined
          and internally used by multiple files.</para>

          <blockquote>
            <programlisting> ...
  # Input file folder (variable)
 @P, <emphasis role="bold">idir</emphasis>,                      "ccreek"
  Description, "Data directory"

 @P, ahumFileName,              "<emphasis role="bold">${idir}</emphasis>/ahum.dat"
  Description, "Absolute Humidity Data"

 @P, gwFileName,                "<emphasis role="bold">${idir}</emphasis>/hgeo.par"
  Description, "Hydrogeology Data"
 ...
</programlisting>
          </blockquote>

          <para></para>

          <para>The expression <code>${&lt;prop_key&gt;}</code> will be
          replaced with <code>&lt;prop_value&gt;</code>, if there is somewhere
          else within the same property set a property defined as <code>@P,
          prop_key, prop_value</code>.</para>
        </section>
      </section>

      <section>
        <title>Tables</title>

        <para>Tables consists of columns and rows, and optional table meta
        data. Columns may have a type and optional meta data. Meta data is
        organized as pair key, value. A table requires two key words,
        <code>@T</code> (Table) and <code>@H</code> (Table header). The
        <code>@T</code> keyword tags the start of a table definition, the
        <code>@H</code> tag starts a column definition.</para>

        <para>Tables can be generated using any text editor. Spreadsheet tools
        usually do allow the export into a CSV file.</para>

        <blockquote>
          <para>Table Example:</para>
        </blockquote>

        <blockquote>
          <programlisting> # table example
 @T, "Example DataSet"
 CreatedAt, 5/11/06
 CreatedBy,  JackC
 # Now, there is header information
 @H,     time,b,c
 Type,   Date,Real,Real
 Format, yyyy-MM-dd,#0000.00,#000.0000
 ,2006-05-12,0000.00,001.1000
 ,2006-05-13,0001.00,002.1000
 ,2006-05-14,0002.00,003.1000
 ,2006-05-15,0003.00,004.1000
 ,2006-05-16,0004.00,005.1000
 ,2006-05-17,0005.00,006.1000
 ,2006-05-18,0006.00,007.1000
</programlisting>
        </blockquote>

        <para>A Table consists of three main sections:</para>

        <orderedlist>
          <listitem>
            <para>The table header, indicated by @, followed by the name of
            the table. The next lines may have table level meta data, one meta
            data entry per line. Meta data is optional.</para>
          </listitem>

          <listitem>
            <para>The table header is followed by the column header, indicated
            by the <code>@H</code> keyword. Next to this all the column names
            are listed. The next lines may contain column meta data, starting
            with the key, followed by the values for each column (Example
            above shows Type and Format for the columns).</para>
          </listitem>

          <listitem>
            <para>Data rows start with a ',' as the first character; values
            are comma separated.</para>
          </listitem>
        </orderedlist>

        <para>A minimal table with no optional meta data looks like
        this:</para>

        <para><blockquote>
            <programlisting> @T, example data table
 @H a, b, c
 , 1,2,3
 , 4,5,6
... more data
</programlisting>
          </blockquote></para>
      </section>

      <section>
        <title>Using the DataIO API</title>

        <para>[TBD]</para>
      </section>
    </section>
  </chapter>

  <chapter>
    <title>Advanced Techniques</title>

    <para>In this chapter, several advances framework aspects</para>

    <section>
      <title>Simulation Traceability and Audit Support</title>

      <para>Managing and tracking the simulation process is as just as
      important as the simulation principles and methods themselves.
      Authorities who use simulations for predictions, and forecasts that
      effect the public are required to manage the trail of resources that
      where used to produce a particular prediction. At any given time and on
      (legal) requests a simulation output must be reproduced by recalling and
      recreating the simulation conditions at that time.</para>

      <para>Simulation traceability is a core feature of OMS3. There are
      several aspects that should be combined to provide for a secure solution
      for output audit trails.</para>

      <itemizedlist>
        <listitem>
          <para>A <emphasis>Version Control System</emphasis> (VCS) for
          software version tracking must be used to host and version all model
          resources such as source components, parameter and data files, and
          the simulation file in a repositories. All files must carry the
          <code>VersionInfo</code> and <code>SourceInfo</code> annotation (for
          source code), and the corresponding meta data entries for
          <code>csv</code> files. If supported, the VCS should be setup to
          support keyword substitution on source files.</para>
        </listitem>

        <listitem>
          <para>Any OMS simulation can generate a <emphasis>Secure Hash
          Algorithm digest (SHA digest)</emphasis> of all involved simulation
          resources. As a default algorithm SHA-256 is being used, however is
          could be replaced (by setting the system property
          '<code>oms3.digest.algorithm</code>') with a stronger hash function
          (SHA-384 or SHA-512). A simulation digest is therefor a secure hash
          that is unique to a simulation configuration. It is being computed
          before the simulation starts.</para>

          <para>The is being applied in different ways:</para>

          <itemizedlist>
            <listitem>
              <para>If computed (<code>simu</code> parameter is set
              <code>digest:true</code>) the simulation sets the system
              property <code>oms3.digest</code> to the digest value. Any
              component in the model can now access this system property, for
              example an output component might carry this value into a
              generated output file.</para>

              <para>An fragment of an output component writing the Digest as
              text to a file <code>file</code> might look like this:</para>

              <programlisting> @Intitialize
 void init() {
     ...
     String v = System.getProperty("oms3.digest");
     if (v != null) {
         file.println(" Digest," + v);
     }
     ...
 }
</programlisting>

              <para></para>
            </listitem>

            <listitem>
              <para>The simulation method <code>digest()</code> can be invoked
              to create a digest record creating the <code>tuple
              (&lt;digest&gt;, &lt;simulation resources&gt;)</code>. As
              default, this call prints the digest and the
              <code>SourceInfo</code>/<code>VersionInfo</code> records of all
              components/datafiles of that simulation to the console. Such
              information might be further processed for inclusion in a secure
              store (e.g. data base):</para>

              <programlisting> println sim.digest()

 6b2d424e12626c65b6f9e3136de735703d405d4f207395797d9f9b4487a23e7f
    tw.Climate &amp;  &amp; 
    tw.Daylen &amp;  &amp; 
    tw.HamonET &amp;  &amp; 
    tw.Output &amp;  &amp; 
    tw.Runoff &amp;  &amp; 
    tw.Snow &amp;  &amp; 
    tw.SoilMoisture &amp;  &amp; 
&gt; 
//// update the above!!!!!!!
</programlisting>

              <para>The example above shows the simulation digest record for
              the <code>Thornthwaite</code> model. The first line contains the
              digest, followed by the simulation resources.</para>
            </listitem>

            <listitem>
              <para>There a other infrastructure pieces required such as a
              data base for digest storage and retrieval.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>The principal architecture for simulation traceability in OMS3 is
      shown in the Figure ???. It illustrates the integration with a version
      control system for resource tracking and a data base for digest tuple
      tracking.</para>

      <para></para>

      <figure>
        <title>Simulation Traceability Schematic</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Handbook/Slide7.PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>OMS3 provides a <emphasis role="bold">core</emphasis> simulation
      digest infrastructure that can be complemented with 'inverse' tools
      allowing for example (i) the automatic recreation of simulation
      configurations based on output data sets using simulation digest
      records, or (ii) the validation of output records against a set of
      'certified' simulations in a master data base. As a result any model
      integrated in OMS3 can benefit from this integrity ensuring
      feature.</para>

      <section>
        <title>References</title>

        <itemizedlist>
          <listitem>
            <para>SHA Hash functions
            [http://en.wikipedia.org/wiki/SHA_hash_functions]</para>
          </listitem>

          <listitem>
            <para>JCA Reference guide
            [http://java.sun.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html]</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Digitally Signing Models</title>

      <para>Once a model is deployed as a jar file, it can be digitally sign
      with an electronic <emphasis>signature</emphasis>. A digital signature
      ensures the integrity of the developed simulation. Once signed a
      simulation jar cannot be altered: Components, default parameter
      settings, and the model cannot be switched or patched. The signature
      protects the investment to develop a complex simulation setup. However
      you can overwrite public parameter values, an can control output
      generation.</para>

      <section>
        <title>Creating a self signed certificate</title>

        <para>You have to have install the Java SDK from
        http://java.sun.com/j2se/downloads.html; the tools have to be in your
        path</para>

        <para><emphasis role="bold">Step 1 </emphasis>- Create a key:</para>

        <para></para>

        <blockquote>
          <programlisting> keytool -alias keyname -genkey
</programlisting>
        </blockquote>

        <para>This will create a new keystore (usually
        <code>$HOME/.keystore</code>) if not present or add to it.</para>

        <para><emphasis role="bold">Step 2</emphasis> - Sign the jar file
        using the key - Sign sim.jar:</para>

        <blockquote>
          <programlisting> jarsigner sim.jar keyname
</programlisting>
        </blockquote>

        <para></para>
      </section>

      <section>
        <title>Importing an issued certificate</title>

        <para>An issued certificate from a certification authority can be
        imported:</para>

        <blockquote>
          <programlisting>$ keytool -import -alias od  -file OD.cer
</programlisting>
        </blockquote>

        <para></para>
      </section>

      <section>
        <title>Validating the Integrity of a Simulation</title>

        <para>Once a Simulation jar is signed it gets verified on
        execution:</para>

        <blockquote>
          <programlisting>$ java -jar EFC.jar
</programlisting>
        </blockquote>

        <para>If verification fails, execution will abort. You can also verify
        the Simulation Jar with the <code>jarsigner</code> tool. You can also
        verify the Simulation Jar with the jarsigner tool</para>

        <blockquote>
          <programlisting>$ jarsigner -verify  EFC.jar
jar verified.

Warning: 
This jar contains entries whose signer certificate will expire within six months. 

Re-run with the -verbose and -certs options for more details.
</programlisting>
        </blockquote>

        <para>To get more details on certain component signatures:</para>

        <blockquote>
          <programlisting>$ jarsigner -verbose -certs -verify  EFC.jar
...

smk     1536 Thu May 24 10:17:22 MDT 2007  gov/usgs/prms/PrecipKrig.class

      X.509, CN=Olaf David, OU=CSU, O=CSU, L=FC, ST=CO, C=US (od)
      [certificate will expire on 1/14/09 10:44 AM]

smk     1593 Thu May 24 10:17:22 MDT 2007 gov/usgs/prms/Obs.class

      X.509, CN=Olaf David, OU=CSU, O=CSU, L=FC, ST=CO, C=US (od)
      [certificate will expire on 1/14/09 10:44 AM]
...

  s = signature was verified 
  m = entry is listed in manifest
  k = at least one certificate was found in keystore
  i = at least one certificate was found in identity scope

</programlisting>
        </blockquote>

        <para>These examples show different levels of protecting a model jar
        using digital signatures</para>

        <para>The Jar deployment of OMS model is easy to perform and has the
        following features and benefits. Simulations can be packaged into an
        executable simulation jar. The simulation jar contains all code, data,
        and resources as defined within the IDE to run the simulation. To run
        a simulation only a Java Runtime Environment and the Simulation Jar
        are needed, no OMS installation is required. Simulation jars are
        sealed and can be digitally signed. Therefore a deployed simulation
        jar is secure and cannot be compromised. Simulation jars carry all
        information about the origin of resources that make up this simulation
        such as the version of components, data sets and the model. All
        sources can be traced back, if version info is present.</para>

        <para></para>
      </section>
    </section>

    <section>
      <title>Documenting Simulations</title>

      <para>Component Documentation can be generated from sources or binary
      classes.</para>

      <para><blockquote>
          <para><programlisting>package prms2008;

import java.util.Calendar;
import java.util.logging.*;
import oms3.annotations.*;
import static oms3.annotations.Role.*;

@Description
    ("Potential ET - Jensen Haise." +
    "Determines whether current time period is one of active" +
    "transpiration and computes the potential evapotranspiration" +
    "for each HRU using the Jensen-Haise formulation.")
@Author
    (name= "George H. Leavesley", contact= "ghleavesley@colostate.edu")
@Keywords
    ("Evapotranspiration")
@Bibliography
    ("Leavesley, G. H., Lichty, R. W., Troutman, B. M., and Saindon, L. G., 1983, "+
     "Precipitation-runoff modeling " +
     "system--user's manual: U. S. Geological Survey Water Resources Investigations " +
     "report 83-4238, 207 p.")
@VersionInfo
    ("$Id: PotetJh.java 390 2009-09-01 19:56:07Z ghleavesley $")
@SourceInfo
    ("$URL: http://svn.javaforge.com/svn/oms/branches/oms3.prj.prms2008/src/prms2008/PotetJh.java $")
@License
    ("http://www.gnu.org/licenses/gpl-2.0.html")
@Documentation
    ("file:/C:/od/projects/ngmf.models/src/prms2008/PotetJh.xml")
@Status
    (Status.TESTED)
    
public class PotetJh  {

    // private fields
    double[] tmax_sum;

    // "Indicator for whether within period to check for beginning of transpiration, 0=no, 1=yes.
    int[]    transp_check;
    int[]    transp_end_12;

    // Input params
    @Role(PARAMETER)
    @In public int nhru;
    @Role(PARAMETER)
    @In public int nsol;

    @Role(PARAMETER)
    @Description("HRU area ,  Area of each HRU")
    @Unit("acres")
    @In public double[] hru_area;

    @Role(PARAMETER)
    @Description("Monthly air temp coefficient - Jensen-Haise Monthly air " +
        "temperature coefficient used in Jensen -Haise potential evapotranspiration " +
        "computations, see  PRMS manual for calculation method")
    @Unit("per degrees")
    @In public double[] jh_coef;

    @Role(PARAMETER)
    @Description("HRU air temp coefficient - Jensen-Haise Air temperature " +
        "coefficient used in Jensen-Haise potential  evapotranspiration " +
        "computations for each HRU.  See PRMS  manual for calculation method")
    @Unit("per degrees")
    @In public double[] jh_coef_hru;
    
    @Role(PARAMETER)
    @Description("Units for measured temperature Units for measured " +
            "temperature (0=Fahrenheit; 1=Celsius)")
    @In public int temp_units;

    @Role(PARAMETER)
    @Description("Month to begin testing for transpiration Month to begin " +
        "summing tmaxf for each HRU; when sum is  &gt;= to transp_tmax, transpiration begins")
    @Unit("month")
    @In public int[] transp_beg;

    @Role(PARAMETER)
    @Description("Month to stop transpiration period Month to stop transpiration " +
        "computations;  transpiration is computed thru end of previous month")
    @Unit("month")
    @In public int[] transp_end;

    @Role(PARAMETER)
    @Description("Tmax index to determine start of transpiration Temperature " +
        "index to determine the specific date of the  start of the transpiration " +
        "period.  Subroutine sums tmax  for each HRU starting with the first " +
        "day of month  transp_beg.  When the sum exceeds this index, transpiration begins")
    @Unit("degrees")
    @In public double[] transp_tmax;


    // Input vars
    @Description("The computed solar radiation for each HRU. [solrad]")
    @Unit("calories/cm2")
    @In public double[] swrad;

    @Description("Average HRU temperature. [temp]")
    @Unit("C")
    @In public double[] tavgc;

    @Description("Average HRU temperature. [temp]")
    @Unit("F")
    @In public double[] tavgf;

    @Description("Maximum HRU temperature. [temp]")
    @Unit("C")
    @In public double[] tmaxc;

    @Description("Maximum HRU temperature. [temp]")
    @Unit("F")
    @In public double[] tmaxf;

    @In public double deltim;
    @In public int active_hrus;
    @In public int[] hru_route_order;
    @In public double basin_area_inv;
    @In public int newday;
    @In public int route_on;
    @In public Calendar date;

    // Output vars
    @Description("Switch indicating whether transpiration is occurring  " +
        "anywhere in the basin (0=no; 1=yes)")
    @Out public int basin_transp_on;

    @Description("Switch indicating whether transpiration is occurring (0=no; 1=yes)")
    @Out public int[] transp_on;

    @Description("Potential evapotranspiration on an HRU")
    @Unit("inches")
    @Out public double[] potet;

    @Description("Basin area-weighted average of potential et")
    @Unit("inches")
    @Out public double basin_potet;

    @Out public double basin_potet_jh;
    
    private void init() {
       // init ...
    }
    
    @Execute
    public void execute() {
       // execute code ...
    }
}</programlisting></para>
        </blockquote></para>

      <para>The following section shows the documentation as it is created
      from the PotetJH.java class as a docbook5 section.</para>

      <para></para>
    </section>

    <section>
      <title>Native Language Interoperability</title>

      <para></para>

      <para><indexterm type="ssss">
          <primary>JNA</primary>
        </indexterm>The use of modeling code written in languages other that
      Java is supported in OMS. This enables legacy code written in
      'scientific' simulation languages such as FORTRAN, C, C++ to be used
      within an OMS model. All native interoperability as described below is
      accomplished using the Java Native Architecture (JNA) , an open source
      library that emphasizes an easy integration of Dynamic Linkable
      Libraries into Java.</para>

      <para>JNA has been originally developed to allow for easy Java - C/C++
      communication. It does not burden the developer with traditionally JNI
      (Java Native Interface) management and other intermediate files/APIs. In
      contrast to JNI which supports static interoperability, JNA uses dynamic
      dispatching at runtime to connect to native DLLs directly from Java.
      JNA's design aims to provide native access in a natural way with a
      minimum of effort. No boilerplate or generated code is required. While
      some attention is paid to performance, correctness and ease of use take
      priority.</para>

      <section>
        <title>FORTRAN 90/95</title>

        <para>This section will introduce the use of JNA (Java Native
        Architecture) for direct Java/FORTRAN interoperability.</para>

        <para>Examples for C/C++ are discussed in detail at the JNA website,
        however the use of FORTRAN within the scientific community is as much
        as important. It can be achieved with the 'out-of-the-box' JNA
        library. The objective of this section is to show how to craft,
        compile, and link FORTRAN code to be accessible directly from Java
        using JNA.</para>

        <section>
          <title>General Setup</title>

          <para>The following FORTRAN example function takes two arguments and
          returns their product.</para>

          <blockquote>
            <para><programlisting> ! Multiplication function that binds to the C language as 'foomult'
 FUNCTION mult(a, b)<emphasis role="bold"> BIND(C, <emphasis>name</emphasis>='foomult')</emphasis>
    ! both arguments are passed by value
    INTEGER,<emphasis role="bold">VALUE</emphasis> :: a,b
    INTEGER :: mult

    mult = a * b
 END FUNCTION mult</programlisting></para>
          </blockquote>

          <itemizedlist>
            <listitem>
              <para>It uses the <code>BIND</code> keyword to provide for a C
              name binding. In Java/JNA this function can be called under that
              name.</para>
            </listitem>

            <listitem>
              <para>The function parameter are declared as value parameter. If
              omitted,<code> a </code>and<code> b</code> would be passed in by
              reference.</para>
            </listitem>
          </itemizedlist>

          <para>The FORTRAN function above can be referenced and used in Java
          using JNA. OMS provides on top of JNA a small convenience library
          that makes handling of DLLs even easier with respect to runtime
          binding and deployment. The use of this library is not required,
          however it makes the integration straightforward and simplifies
          deployment.</para>

          <blockquote>
            <programlisting> import oms3.annotation.*;

<emphasis role="bold"> @DLL("F90Dyn")</emphasis>
 interface F95Test extends com.sun.jna.Library {
    // java interface method to FORTRAN
    int <emphasis role="bold">foomult</emphasis>(int a, int b);
 } 

 // Bind 'F90Dyn.dll' to the interface 'F95Test'
 F95Test lib = <emphasis role="bold">Libraries.bindLibrary</emphasis>(F95Test.class);

</programlisting>
          </blockquote>

          <itemizedlist>
            <listitem>
              <para>The FORTRAN function resides in file
              <code>libF90.dll</code>, that is accessible in the
              <code>jna.library.path. </code></para>
            </listitem>

            <listitem>
              <para>The static call <code>Libraries.bindibrary</code> belongs
              to the JNA API and binds all interface methods as specified in
              <code>F95Test</code> to their counterparts in
              <code>libF90.dll.</code></para>
            </listitem>

            <listitem>
              <para>The Java interface function maps to the name as specified
              in <code>BIND</code>. This solves naming problems that results
              from different handling of symbol names in object files/dlls
              with respect to underscoring. Using <code>BIND</code> is highly
              recommended, since it ensures a consistent external name for the
              function/subroutine regardless of the compiler being used and
              its location within a module.</para>
            </listitem>

            <listitem>
              <para>Since function arguments are passed in by value, regular
              native <code>int</code> types can be used within the Java
              interface method. However, assigning new values within the
              FORTRAN function to a and b won't be propagated to the caller.
              Use the 'Call by reference' method if this is desired.</para>
            </listitem>
          </itemizedlist>

          <para>The method can now be called like this:</para>

          <blockquote>
            <programlisting> ...
 int result = lib.foomult(20, 20);
 assert result ==  400;
 ...</programlisting>
          </blockquote>

          <para>For more details on compiling/linking see further
          below.</para>

          <para></para>
        </section>

        <section>
          <title>Scalar Arguments by Value</title>

          <para></para>

          <blockquote>
            <para><programlisting> ! Multiplication function that binds to the C language as 'foomult'
 FUNCTION mult(a, b) BIND(C, name='foomult')
    ! both arguments are passed by value
    <emphasis role="bold">INTEGER,VALUE :: a,b</emphasis>
    INTEGER :: mult

    mult = a * b
 END FUNCTION mult</programlisting></para>
          </blockquote>

          <para></para>

          <para></para>

          <para></para>

          <para><blockquote>
              <programlisting> import oms3.annotation.*;

 @DLL("F90Dyn")
 interface F95Test extends com.sun.jna.Library {
    // java interface method to FORTRAN
    int foomult(<emphasis role="bold">int a, int b)</emphasis>;
 } 

 // Bind 'F90Dyn.dll' to the interface 'F95Test'
 F95Test lib = <emphasis role="bold">Libraries.bindLibrary</emphasis>(F95Test.class);

</programlisting>
            </blockquote></para>
        </section>

        <section>
          <title>Scalar Arguments by Reference.</title>

          <para>To call a subroutine with arguments by reference, you shall
          <emphasis role="bold">not</emphasis> use the <code>VALUE</code>
          keyword on FORTRAN argument declaration. Now you can assign new
          values to the arguments, that will be later visible to Java.</para>

          <para><blockquote>
              <programlisting> SUBROUTINE ffunc(a, b) BIND(C,"reffunc")
    <emphasis role="bold">INTEGER :: a,b</emphasis>
    a = 3
    b = 5
 END SUBROUTINE
</programlisting>
            </blockquote></para>

          <para>The Java interface method needs to be modified to support call
          by reference via the JNA API <code>ByReference</code>
          classes.</para>

          <para><blockquote>
              <programlisting> ...
 void reffunc(<emphasis role="bold">ByReference a, ByReference b</emphasis>);
 ...
</programlisting>
            </blockquote></para>

          <para>The <code>reffunc</code> subroutine will be called as
          follows:</para>

          <para><blockquote>
              <programlisting> ...
 IntByReference a = new IntByReference(0);
 IntByReference b = new IntByReference(0);
 F95Test.lib.reffunc(a, b);
 assertEquals(3, a.getValue());
 assertEquals(5, b.getValue());
 ...
</programlisting>
            </blockquote>Now you create the int reference objects, pass them
          into reffunc and retrieve the values with
          .<code>getValue().</code></para>

          <para></para>
        </section>

        <section>
          <title>Array Arguments</title>

          <para>Single and Multidimensional arrays can be handled in JNA/Java
          and FORTRAN. Like with Strings, the length of the array has to be
          passed in with additional arguments.</para>

          <para><blockquote>
              <programlisting> SUBROUTINE inc(arr, len) BIND(C, name='fooinc')
    <emphasis role="bold">INTEGER,DIMENSION(len) :: arr</emphasis>
    <emphasis role="bold">INTEGER,VALUE :: len</emphasis>
    INTEGER :: i

    DO i = 1, len
        arr(i) = arr(i) + 30
    END DO
 END SUBROUTINE

 SUBROUTINE arr2d(arr, m, n) BIND(C, name='arr2d')
    <emphasis role="bold">INTEGER,DIMENSION(m,n) :: arr
    INTEGER,VALUE :: m
    INTEGER,VALUE :: n</emphasis>
    INTEGER :: i,j

    DO i = 1, m
        DO j = 1, n
            arr(i,j) = arr(i,j) + 1
        END DO
    END DO
 END SUBROUTINE
</programlisting>
            </blockquote>The examples above show the declaration and the use
          of a one and two dimensional array as subroutine arguments. The
          array is dimensioned by the extra parameter, they are passed in as
          value arguments.</para>

          <para>The JNA/Java declaration part is shown below. Note that the
          multidimensional array, has to be one-dimensional in Java. FORTRAN
          will lay it out correctly by using the dimension lengths that are
          passed in.</para>

          <para><blockquote>
              <programlisting> interface F95Test extends Library {
   ...
   void fooinc(int[] arr, int len);
   void arr2d(int[] arr, int m, int n);
   ...
 }
</programlisting>
            </blockquote>The use if the one dimensional array is pretty
          simple. The other example required a bit management on the Java
          side, that is not shown here.</para>

          <para><blockquote>
              <programlisting> //1D
 int[] a = {1, 2, 3, 4, 5};
 lib.fooinc(a, a.length);
 assertArrayEquals(new int[]{31, 32, 33, 34, 35}, a);

 //2D
 int[] a = {1, 2, 3, 4, 5, 6};
 lib.arr2d(a, 3, 2);
 assertArrayEquals(new int[]{2, 3, 4, 5, 6, 7}, a);
</programlisting>
            </blockquote>If a real Java multidimensional array needs to used
          in FORTRAN, it needs to be flattened into 1D, or you use an access
          method in Java to use a 1D Array in a 2D way.</para>

          <para></para>
        </section>

        <section>
          <title>String Arguments</title>

          <para>String arguments are always special, since Strings are
          represented differently in almost all languages. In FORTRAN, you
          declare a string argument as follows, note that the size of the
          string has to be passed in as an additional argument.</para>

          <para>The following function takes a string argument and verifies
          the content and length. The argument line is defined as a
          <code>CHARACTER</code> array, its length is passed as a second
          argument by value, and it is being used to dimension the length of
          the string.</para>

          <para><blockquote>
              <programlisting> FUNCTION strpass(line, b) BIND(C, name='foostr')
    <emphasis role="bold">CHARACTER(len=b) :: line
    INTEGER, VALUE :: b</emphasis>
    LOGICAL :: strpass

    strpass = (line == 'str_test') .AND. (b == 8)
 END FUNCTION
</programlisting>
            </blockquote></para>

          <para>The Java/JNA prototype looks like this:</para>

          <para><blockquote>
              <programlisting> ...
 boolean foostr(String s, int len);
 ...</programlisting>
            </blockquote></para>

          <para>The application will need to pass in the string and obtain the
          actual string length.</para>

          <para><blockquote>
              <programlisting> ...
 String test = "str_test";
 boolean result = lib.foostr(test, test.length());
 assertTrue(result);
 ...
</programlisting>
            </blockquote></para>
        </section>

        <section>
          <title>Modules</title>

          <para>Modules can be used to place all subroutines/functions that
          should be used via JNA, its good practice. A module allows for
          global data, an module level <code>IMPLICIT NONE</code>. Again, it
          is recommended to use the <code>BIND</code> keyword since the
          compiler might alter the subroutine name in the DLL otherwise, since
          it is a different scope.</para>

          <para><blockquote>
              <programlisting> MODULE test

  IMPLICIT NONE

  CONTAINS
    
  SUBROUTINE ffunc(a, b) BIND(C,"reffunc")
     INTEGER :: a,b
     a = 3 
     b = 5
  END SUBROUTINE
 
 END MODULE test

</programlisting>
            </blockquote>The example above the subroutine <code>ffunc</code>
          can still be called as <code>reffunc</code> from JNA/Java.</para>

          <para></para>
        </section>

        <section>
          <title>TYPE Arguments</title>

          <para>Type arguments for functions can be handled too. This allows
          the passing of complex objects directly from Java to FORTRAN. Lets
          suppose you have the following FORTRAN code, that defines a
          <code>TYPE</code> for a City and a subroutine <code>typepass</code>
          that takes such an argument.</para>

          <para><blockquote>
              <programlisting> MODULE test

  IMPLICIT NONE

  TYPE :: City
    INTEGER  :: Population
    REAL(8)  :: Latitude, Longitude
    INTEGER  :: Elevation              
  END TYPE

  CONTAINS

  SUBROUTINE typepass(c) BIND(C, name='footype')
    TYPE(CITY) :: c

    c%Population = c%Population + 1000
    c%Latitude = c%Latitude + 5
    c%Longitude = c%Longitude + 5
    c%Elevation = c%Elevation + 9
  END SUBROUTINE

 END MODULE test</programlisting>
            </blockquote>Both the <code>TYPE</code> and the
          <code>subroutine</code> are placed in a <code>module</code>.</para>

          <para>Now lets look at the JNA/Java counterpart that defines the
          interface for <code>typepass</code>:</para>

          <para><blockquote>
              <programlisting> import com.sun.jna.Library;
 import com.sun.jna.Structure;

 public static class City extends <emphasis role="bold">Structure</emphasis> {
    public int Population;
    public double Latitude, Longitude;
    public int Elevation;
 }

 @DLL(F95Test)
 interface F95Test extends Library {
    void footype(City c);
 }</programlisting>
            </blockquote>There is an Java class called City that must have the
          identical internal layout to its FORTRAN TYPE. The names, however,
          do not matter. It also has to be subclass of Structure which is
          defined in the JNA API.</para>

          <para>Note that all fields of <code>City</code> have to be public to
          allow JNA to compute its size. The F95Test method again used the
          <code>BIND</code> name and the City argument.</para>

          <para>An application will instantiate theCity object and pass it in
          as usual.</para>

          <para><blockquote>
              <programlisting> ...
 City city = new City(3000, 0.222, 0.333, 1001);
 F95Test.lib.footype(city);

 assertEquals(4000, city.Population);
 assertEquals(5.222, city.Latitude, 0.0001);
 assertEquals(5.333, city.Longitude, 0.0001);
 assertEquals(1010, city.Elevation);
 ...
</programlisting>
            </blockquote></para>

          <para></para>
        </section>

        <section>
          <title>Pitfalls and Obstacles</title>

          <itemizedlist>
            <listitem>
              <para>Always be aware that FORTRAN subroutine/function arguments
              are passed by reference, unless the <code>VALUE</code> modifier
              is used. You might end up accessing memory that might cause a
              segfault. Therefor use always
              <code>Native.setProtected(true)</code> to provide for more
              memory protection in the JNA site, if supported for your
              architecture.</para>
            </listitem>

            <listitem>
              <para>If JNA cannot find your function in a DLL and both names
              match in source, do not panic. You should explore the DLL to
              find out the real name in your DLL, since this is what JNA is
              looking at not the source. Do something like <code>nm
              libF90Test.dll | grep reffunc</code> if <code>reffunc</code> is
              the function you'd like to call. You'll see maybe a different
              (more underscores in the name, or a module name prefix) name
              depending on the compiler and compiler flags. This is the name
              you should use in your Java interface. To make this more
              transparent use the <code>BIND</code> keyword in your source to
              ensure the proper name in the DLL.</para>
            </listitem>

            <listitem>
              <para>If you pass Java objects to FORTRAN as TYPE, all Java
              fields have to be public. JNA will complain at runtime not being
              able to determine the size of the Java object.</para>
            </listitem>

            <listitem>
              <para>Be aware of the array ordering in FORTRAN that sees a two
              dimensional array always in COLUMN/ROW order. Also, you cannot
              pass a real multidimensional Java array to FORTRAN, since those
              do not have a continuous memory layout. On the Java side you
              always have to manage a one dimensional array that you reshape
              for FORTRAN by passing its dimensions into the
              function/subroutine.</para>
            </listitem>

            <listitem>
              <para>If a DLL cannot be found at runtime, you need to set the
              search path. You can set the system property
              <code>jna.library.path</code> to point to paths on your file
              system. You also use the
              <code>NativeLibrary.addSearchPath</code> method to add a map a
              directory to a specific DLL name.</para>
            </listitem>
          </itemizedlist>

          <para></para>
        </section>

        <section>
          <title>Data Type Mapping</title>

          <para>The following table shows equivalent data types between
          FORTRAN and Java, when passed by value</para>

          <table>
            <title>JNA FORTRAN-Java Data Type Mapping</title>

            <tgroup cols="2">
              <thead>
                <row>
                  <entry align="center"> FORTRAN</entry>

                  <entry align="center"> JAVA</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>INTEGER(Kind=8)</entry>

                  <entry>int</entry>
                </row>

                <row>
                  <entry>INTEGER(Kind=4)</entry>

                  <entry>short</entry>
                </row>

                <row>
                  <entry>REAL(Kind=4)</entry>

                  <entry>float</entry>
                </row>

                <row>
                  <entry>REAL(Kind=8)</entry>

                  <entry>double</entry>
                </row>

                <row>
                  <entry>LOGICAL</entry>

                  <entry>boolean</entry>
                </row>

                <row>
                  <entry>CHARACTER</entry>

                  <entry>byte</entry>
                </row>

                <row>
                  <entry>CHARACTER(len=)</entry>

                  <entry>String</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>

        <section>
          <title>DLL Generation</title>

          <para>he following sections will provide some help for managing the
          build process using different compilers. GNU's compiler collection
          and the G95 spin-off, as well as the Intel Compiler suite seem to be
          the most important tools for the general developer.</para>

          <para></para>

          <section>
            <title>G95</title>

            <para>G95 allows compiling and linking into a DLL. Note that G95
            is not a part of the GNU compiler collection. To compile and link
            a FORTRAN source into a DLL use the following flags for GCC
            tools:</para>

            <para>Compile a FORTRAN source into an object file:</para>

            <para><blockquote>
                <para><programlisting> $ g95 -fno-underscoring  -c -g -o build/ftest.o ftest.f90</programlisting></para>
              </blockquote>Link the DLL:</para>

            <para><blockquote>
                <para><programlisting> $ g95 -Wl,--add-stdcall-alias -shared -o dist/libF90Dyn.dll build/ftest.o  </programlisting></para>
              </blockquote>Note that you have to use G95 for linking too. This
            ensures for linking the right FORTRAN runtime libraries into your
            DLL</para>

            <para></para>
          </section>

          <section>
            <title>GFortran</title>

            <para>[TBD]</para>
          </section>

          <section>
            <title>Intel FORTRAN</title>

            <para>[TBD]</para>
          </section>
        </section>
      </section>

      <section>
        <title>C/C++</title>

        <para>[TBD]</para>

        <para></para>

        <section>
          <title>Dynamic Link Library Generation</title>

          <para>[TBD]</para>

          <para></para>
        </section>
      </section>

      <section>
        <title>References</title>

        <itemizedlist>
          <listitem>
            <para>JNA</para>
          </listitem>

          <listitem>
            <para>GCC</para>
          </listitem>

          <listitem>
            <para>Intel Compiler</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Embedding OMS</title>

      <para>[tbd]</para>

      <para></para>

      <para>Use cases:</para>

      <itemizedlist>
        <listitem>
          <para>hand over a simulation to a user who just wants to apply the
          model</para>
        </listitem>

        <listitem>
          <para>a model will be used in a deployment environment such as a web
          server, etc.</para>
        </listitem>

        <listitem>
          <para>a simulation should be certified for production by an
          authorized person or institution, the simulation can be explored
          since it is self-documenting with respect to its components, model,
          and parameter files.</para>
        </listitem>
      </itemizedlist>

      <para>A simulation is deployed as a Jar file. This is called a
      Simulation Jar. This simulation jar has the following
      characteristics</para>

      <para></para>

      <itemizedlist>
        <listitem>
          <para>It contains all the resources that are required by that
          simulation such as the simulation file, the model, the components,
          default parameter sets, libraries.</para>
        </listitem>

        <listitem>
          <para>It also contains all the OMS runtime classes to execute the
          simulation.</para>
        </listitem>

        <listitem>
          <para>It contains description about the origin and version of those
          resources.</para>
        </listitem>

        <listitem>
          <para></para>
        </listitem>
      </itemizedlist>

      <para>The simulation jar is self contained, no other external classes
      are required to run the simulation, everything needed is packaged
      together. The simulation jar is also 'sealed'. Only classes from within
      the simulation file are being used for execution, no external code
      cannot be injected into the simulation. This is an important security
      feature.</para>

      <para></para>

      <para></para>

      <para></para>

      <section>
        <title>OMS System Properties</title>

        <para>The OMS3 runtime supports a set of system properties to locate
        simulation resources, control execution, ensure internal model
        consistency. System properties can be set at the command line using
        the <code>-Doms.xxx=yyy</code> argument. If OMS is embedded, the
        <code>System.setProperty()</code> call will accomplish the same
        result.</para>

        <para></para>

        <table>
          <title>OMS3 System properties</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry align="center">Name</entry>

                <entry align="center">Description</entry>

                <entry align="center">Example Value</entry>

                <entry align="center">Access</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>oms.home</code></entry>

                <entry>Contains the installation directory of the OMS runtime
                jar and required other libraries.</entry>

                <entry>/home/user_me/.oms/3.0</entry>

                <entry>R/O</entry>
              </row>

              <row>
                <entry><code>oms.version</code></entry>

                <entry>The current OMS version</entry>

                <entry>3.0</entry>

                <entry>R/O</entry>
              </row>

              <row>
                <entry><code>oms.prj</code></entry>

                <entry>A folder for storing project related files.</entry>

                <entry>/home/user_me/omswork</entry>

                <entry>R/O</entry>
              </row>

              <row>
                <entry><code>oms.locale.lang</code></entry>

                <entry></entry>

                <entry></entry>

                <entry></entry>
              </row>

              <row>
                <entry><code>oms.digest.algorithm</code></entry>

                <entry></entry>

                <entry></entry>

                <entry></entry>
              </row>

              <row>
                <entry><code>oms.digest</code></entry>

                <entry>If set to true, the simulation digest</entry>

                <entry>true</entry>

                <entry></entry>
              </row>

              <row>
                <entry><code>oms.sim.resources</code></entry>

                <entry>Additional resources (jar files, paths) to be used in a
                simulation.</entry>

                <entry></entry>

                <entry></entry>
              </row>

              <row>
                <entry><code>oms.check.circular</code></entry>

                <entry></entry>

                <entry></entry>

                <entry></entry>
              </row>

              <row>
                <entry><code>oms.check.param</code></entry>

                <entry></entry>

                <entry></entry>

                <entry></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para></para>

        <para></para>
      </section>
    </section>
  </chapter>

  <appendix>
    <title>Glossary</title>

    <para><glosslist>
        <glossentry>
          <glossterm>Annotation</glossterm>

          <glossdef>
            <para>A Java annotation is a special form of syntactic meta data
            that can be added to Java source code. This feature is available
            in Java 5+.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>CBSE</glossterm>

          <glossdef>
            <para>Component Based Software Engineering</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>Component</glossterm>

          <glossdef>
            <para>A component is a software unit (class, module) which
            provides an implementation for exact modeling concept. It is
            context-independent both in the conceptual and technical
            domain.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>Compound</glossterm>

          <glossdef>
            <para>A Compound is a complex component containing other simple
            and compound components.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>Model</glossterm>

          <glossdef>
            <para>A compound assembly of components to that has a application
            use case. In general is being used to express relevant system
            aspects in a mathematical/algorithmic form.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>Model Base</glossterm>

          <glossdef>
            <para>A family of related model components.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>JAR (Java Archive)</glossterm>

          <glossdef>
            <para>Java archive. A jar file (*.jar) contains a directory
            structure of Java files and other resources. It can be
            compressed.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>JVM</glossterm>

          <glossdef>
            <para>Java Virtual Machine. The execution environment for Java
            Byte code.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>Interface</glossterm>

          <glossdef>
            <para>An interface declares a certain behavior of a class. It is a
            type that specifies but never implement methods.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>Meta Data</glossterm>

          <glossdef>
            <para>Context information about data such as physical unit of a
            variable, its valid range constraints, etc.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>Unit</glossterm>

          <glossdef>
            <para>Predefined unit to express or measure a quality.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>CLASSPATH</glossterm>

          <glossdef>
            <para>A classpath is an environment variable that list a set of
            directories containing Java .jar or .class files that are being
            used in an application.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>Java Virtual Machine (JVM)</glossterm>

          <glossdef>
            <para>The JVM executes the bytecode (*.class) produces by a java
            compiler</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>POJO</glossterm>

          <glossdef>
            <para>Plain Old Java Object</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>IEF</glossterm>

          <glossdef>
            <para>Initialize/Execute/Finalize, a shortcut describing the
            structural concept of components.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>SHA</glossterm>

          <glossdef>
            <para>Secure Hash Algorithm</para>
          </glossdef>
        </glossentry>
      </glosslist></para>
  </appendix>

  <appendix>
    <title>Annotation Reference</title>

    <section>
      <title>Annotation Types</title>

      <para>Annotations are used to specify resources within a class that
      relate to its use as a modeling component for OMS3. Such annotations may
      have different relevance and importance to different aspects of the use
      of component use. The same annotations can also play different roles
      depending on their context. There are three main annotation
      categories:</para>

      <variablelist>
        <varlistentry>
          <term>Mandatory Execution Annotations</term>

          <listitem>
            <para>Such meta data is essential information for component
            execution (in addition to the documentation purpose). Thee
            describe method invocation points and data flow between
            components. This is required meta data.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Supporting Execution Annotations</term>

          <listitem>
            <para>Such meta data supports the execution by providing
            additional information about the kind of data flow, physical
            units, and range constraints that might be used during execution.
            This is optional meta data.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Documentation Annotations</term>

          <listitem>
            <para>Those annotations are being used for documentations,
            presentation layers, databases, and other content management
            system. This is required meta data for component publication, but
            optional for execution.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>What are Annotations? Annotations are a Java feature since version
      1.5. They are an add-on to the Java language to allow for custom and
      domain specific markups of language elements. They do not affect
      directly the class semantics, but they do affect the way classes are
      treated by tools, such as a modeling framework. Annotations can be seen
      as extension of the Java Classes with meta information that can be
      obtained up from sources files, compiled classes, or loaded classes at
      runtime. They respect also languages scopes and are supported by Java
      IDEs with code completion and syntax highlighting.</para>

      <para>The table below shows all modeling annotations categorized by
      language elements they are describing.</para>

      <table>
        <title>Component Annotations Overview</title>

        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center"> Class</entry>

              <entry align="center">Field </entry>

              <entry align="center">Method</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>@Description</code></entry>

              <entry><code>@Description</code></entry>

              <entry><code>@Execute
              <superscript>1)</superscript></code></entry>
            </row>

            <row>
              <entry><code>@Author</code></entry>

              <entry><code>@In <superscript>1)</superscript></code></entry>

              <entry><code>@Initialize</code></entry>
            </row>

            <row>
              <entry><code>@Bibliography</code></entry>

              <entry><code>@Out <superscript>1)</superscript></code></entry>

              <entry><code>@Finalize</code></entry>
            </row>

            <row>
              <entry><code>@Status</code></entry>

              <entry><code>@Unit</code></entry>

              <entry></entry>
            </row>

            <row>
              <entry><code>@VersionInfo</code></entry>

              <entry><code>@Range</code></entry>

              <entry></entry>
            </row>

            <row>
              <entry><code>@Keywords</code></entry>

              <entry><code>@Role</code></entry>

              <entry></entry>
            </row>

            <row>
              <entry><code>@Label</code></entry>

              <entry><code>@Bound</code></entry>

              <entry></entry>
            </row>

            <row>
              <entry><code>@SourceInfo</code></entry>

              <entry><code>@Label</code></entry>

              <entry></entry>
            </row>

            <row>
              <entry><code>@License</code></entry>

              <entry></entry>

              <entry></entry>
            </row>

            <row>
              <entry><code>@Documentation</code></entry>

              <entry></entry>

              <entry></entry>
            </row>

            <row>
              <entry><code>@DLL <superscript>2)</superscript></code></entry>

              <entry></entry>

              <entry></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <note>
        <para><superscript>1)</superscript> Required annotation for a
        component.</para>

        <para><superscript>2)</superscript> Interface annotation for Native
        Language integration</para>
      </note>

      <para>Annotation names always start with the '<code>@</code>' character,
      indicating the difference to a regular class. The <code>@</code> (at)
      sign was chosen because 'AT' can be seen as abbreviation for 'Annotation
      Type'. Annotations can only appear once for a given language element.
      For example it is illegal to use the <code>@Author</code> annotation
      twice for a component. Instead, the name field of an
      <code>@Author</code> should list the two names, separated by some
      delimiter.</para>

      <para>The following sections introduce all modeling annotations in
      detail, examples are given.</para>

      <section>
        <title>@Description</title>

        <para>The <code>@Description</code> annotation provides for component
        summary information, such as a brief paragraph about its purpose,
        scientific background, etc. It is being used for automatic capturing
        the purpose of a component by archiving tools, online presentation or
        documentation tools, or to supplement database integration. The
        component selection during the process of model building and
        repository management can be supported by this annotation which should
        not exceed a few sentences. If more context information need to be
        provided, the <code>@Documentation</code> annotation should be used in
        addition.</para>

        <variablelist>
          <varlistentry>
            <term>Synopsis</term>

            <listitem>
              <para><code>@Description(&lt;String&gt;)</code></para>

              <para><code>arg</code> - the description paragraph</para>

              <para>The description can be localized for different languages.
              Add the ISO language code
              (http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt) to
              provide description in a different language. Description for
              multiple languages is supported.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Type</term>

            <listitem>
              <para>Documentation Annotation</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Scope</term>

            <listitem>
              <para>Class, Field</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Example</term>

            <listitem>
              <programlisting><emphasis role="bold"> @Description
   ("Circle Area Calculation.")</emphasis>

 public class CircleArea {
    ...
    <emphasis role="bold">@Description("Radius")</emphasis>
    @In public double r;    
    ...
 }
..</programlisting>

              <programlisting><emphasis role="bold"> @Description
   (en="Circle Area Calculation.",
    de="Berechnung der Kreisflaeche")</emphasis>

 public class CircleArea {
    ...
    <emphasis role="bold">@Description("Radius")</emphasis>
    @In public double r;    
    ...
 }
..</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>

        <para></para>
      </section>

      <section>
        <title>@Documentation</title>

        <para>The <code>@Documentation</code> annotation serves as a connector
        or link to more detailed background documentation about the component.
        It allows to reference other documents via a URL. Usually those
        documents reside on a public server or local hard drive as PDF, HTML,
        Docbook, or an other text document. The reference is provided as using
        different URL protocols such as <code>http</code>://...,
        <code>https</code>://..., <code>file</code>://...</para>

        <variablelist>
          <varlistentry>
            <term>Synopsis</term>

            <listitem>
              <para><code>@Documentation(&lt;URL&gt;)</code></para>

              <para><code>arg</code> - URL reference to more detailed
              documentation.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Type</term>

            <listitem>
              <para>Documentation Annotation</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Scope</term>

            <listitem>
              <para>Class</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Example</term>

            <listitem>
              <programlisting><emphasis role="bold"> @Documentation
   ("http://myserver.com/docs/CricleArea.pdf")</emphasis>
 public class CircleArea {
    ...
 }</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>

        <para></para>
      </section>

      <section>
        <title>@Author</title>

        <para>The optional <code>@Author</code> annotation provides
        information about the authorship of the component. The annotation has
        sub the fields <code>name</code>, <code>org</code>, and
        <code>contact</code> provide more details about the name, the
        affiliated organization, and some contact information such as an email
        address, or a link to a home page.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@Author(name=&lt;String&gt;, org=&lt;String&gt;,
                contact=&lt;String&gt;)</code></para>

                <para><code>name</code> - the name of the authors(s)</para>

                <para><code>org</code> - organization name (optional)</para>

                <para><code>contact</code> - contract information such as
                email or address (optional)</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Documentation Annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Class</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting><emphasis role="bold"> @Author
   (name="Joe Scientist", 
    org="Research Org", 
    contact="joe.scientist@research-org.edu")</emphasis>

 public class HamonET {
     ...
 }</programlisting>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para></para>
      </section>

      <section>
        <title>@Status</title>

        <para>This annotation enriches a component with some development and
        deployment status information. A status is a component quality
        indicator. A developer can specify the level of completeness or
        maturity of a component with this tag.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@Status(&lt;Enum&gt;)</code></para>

                <para>arg - <code>Status.DRAFT (Initial development status,
                private prototype)</code></para>

                <para><code> Status.SHARED, (component worth sharing, still in
                development)</code></para>

                <para><code> Status.TESTED, (component is tested in a model,
                test datasets and unit tests available)</code></para>

                <para><code> Status.VERIFIED, (component is implemented
                properly, complete)</code></para>

                <para><code> Status.VALIDATED, (Component fulfills
                requirements, validation tests available </code></para>

                <para><code> Status.CERTIFIED (Component accepted and
                certified by authorty)</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Documentation Annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Class</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting> @Description
    ("Circle Area Calculation.")
<emphasis role="bold"> @Status
    (Status.TESTED)</emphasis>
 public class CircleArea {  
    ...
 }</programlisting>
              </listitem>
            </varlistentry>
          </variablelist>This annotation might be consumed by tools that
        publish the component to a component repository, it should control the
        publication process. Another use case would be the pre-run check of a
        deployed model that all of its components are certified by a
        authority.</para>

        <para></para>
      </section>

      <section>
        <title>@VersionInfo</title>

        <para>The <code>@VersionInfo</code> annotation takes a argument that
        represents the version of this component. A developer might use
        version control system supported keyword substitution for this. The
        example below shows the use of the Subversion keywords
        <code>$Id</code> to provide revision number, modification time, and
        developer name as version information record. Major version control
        systems (CVS, Subversion,...) either have a built-in support for this
        feature or it can be used in conjunction with external tools
        (Mercurial, GIT). Therefore this annotation should not only contain an
        arbitrary version number, but a full version record instead is good
        common practice.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@VersionInfo(&lt;String&gt;)</code></para>

                <para><code>arg - Version information record</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Documentation Annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Class</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting> <emphasis role="bold">@VersionInfo
    ("$Id: ET.java 20 2008-07-25 22:31:07Z od $") </emphasis>
 public class ET {
   ...
 }</programlisting>
              </listitem>
            </varlistentry>
          </variablelist> Component repositories can use and present this
        information, archiving tools or documentation generators might pick
        this up too.</para>
      </section>

      <section>
        <title>@SourceInfo</title>

        <para>The <code>@SourceInfo</code> annotation captures information
        about the source. This should be some hint about source availability,
        maybe the source location or some contact information. The example
        below shows the use of Subversion's keyword substitution for the head
        URL of a source file. It can also point to a specific tagged version
        with a repository.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@SourceInfo(&lt;String&gt;)</code></para>

                <para><code>arg - source URL reference</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Documentation Annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Class</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting><emphasis role="bold"> @SourceInfo
    ("$HeadURL: http://www.test.org/repo/ET.java $") </emphasis>
 public class ET {
    ...
 }</programlisting>
              </listitem>
            </varlistentry>
          </variablelist><code>@SourceInfo</code> is optional. Component
        repositories or documentation generators can use and present this
        information</para>

        <para></para>
      </section>

      <section>
        <title>@Keywords</title>

        <para>A component an be tagged with the <code>@Keywords</code>
        annotation to characterize/categorize it. It does have the same
        purpose like a keyword list in a scientific paper. This is optional
        meta data and can be used to index, search, and retrieve archived and
        stored components. It is optional meta data.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@Keywords(&lt;String&gt;)</code></para>

                <para><code>arg - list of kerwords separated by
                comma</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Documentation Annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Class</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting> @Description
    ("Circle Area Calculation.")
 <emphasis role="bold">@Keywords
    ("Geometry, 2D")</emphasis>
 public class CircleArea {  
    ...
 }</programlisting>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para></para>
      </section>

      <section>
        <title>@License</title>

        <para>The <code>@License</code> annotation to specify the license for
        a component. It is optional meta data. If not present it is assumed
        the component is in the public domain and there are no restrictions
        for its reuse. The license can be in lined text, however it is
        recommended to use a URL to point to the license text.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@License(&lt;String&gt;)</code></para>

                <para><code>arg - the license text or a URL to its
                location</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Documentation Annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Class</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting> @Description("Circle Area Calculation.")
 <emphasis role="bold">@License("http://www.gnu.org/licenses/gpl-2.0.html")</emphasis>
 public class CircleArea {  
    ...
 }</programlisting>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para></para>
      </section>

      <section>
        <title>@Label</title>

        <para>Labels relate to ontologies (label is an OWL annotation).
        Labeling a field or component maybe provides for alternative names.
        They can be used to relate components or fields to another naming
        convention, terminology, or ontologies.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@Label(&lt;String&gt;)</code></para>

                <para><code>arg - an alternative name </code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Documentation Annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Class, Field</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting> public class Calc {
    <emphasis role="bold"> @Label("latitude")  </emphasis>
     @In public double lat; 
      ...
 }</programlisting>
              </listitem>
            </varlistentry>
          </variablelist>Labels are optional.</para>

        <para></para>
      </section>

      <section>
        <title>@In</title>

        <para>The <code>@In</code> annotation on a field specifies it as input
        to the component. The field <emphasis role="bold">must</emphasis> be
        public. It indicates a read (or input access) from within the
        <code>Execute</code> method to the field. There are no arguments for
        this annotation.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@In</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>execution, documentation annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Field</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting> ...
 <emphasis role="bold">@In</emphasis> public double latitude;
 ...</programlisting>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para>This annotation is a <emphasis>required</emphasis> annotation
        for execution to enable data flow between components.
        <code>@Out</code> fields of one component might be connected to an
        <code>@In</code> field of a second component.</para>
      </section>

      <section>
        <title>@Out</title>

        <para>The @Out annotation on a field specifies it as output of the
        component. The field <emphasis role="bold">must</emphasis> be public
        and the <code>Execute</code> method will write to it. It is used to
        connect to an <code>@In</code> field of another component. There are
        no arguments for this annotation.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@Out</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>execution, documentation annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Field</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting>  ...
  <emphasis role="bold">@Out</emphasis> public double daylen;
  ...</programlisting>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para>This annotation is a <emphasis>required</emphasis> annotation
        for execution to enable data flow between components.
        <code>@Out</code> fields of one component might be connected to an
        <code>@In</code> field of a second component.</para>
      </section>

      <section>
        <title>@Range</title>

        <para>The <code>@Range</code> annotation is supporting an
        <code>@In</code> or an <code>@Out</code> field. If present, it defines
        a min/max range in which the value of the field is considered valid.
        It is up to the execution runtime to handle the range information.
        Violating a ranges might lead to execution abortion if it is a serious
        problem or just a warning message. Another use of the range
        information would be in component testing, see Section ???.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@Range(min=&lt;double&gt;,
                max=&lt;double&gt;)</code></para>

                <para><code>min</code> - the minimum value,
                (default=<code>Double.MIN</code>)</para>

                <para><code>max</code> - the maximum value,
                (default=<code>Double.MAX</code>)</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Execution Annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Field</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting> ...
 <emphasis role="bold">@Range (min=-90, max=90)</emphasis>
 @In public double latitude;
 ...</programlisting>

                <para>In the example above the latitude value can only be in
                the range of -90 to +90 degree. A value out of this range
                would probably break any equation that is using latitude. The
                range use above is similar to a pre-execution check.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </section>

      <section>
        <title>@Role</title>

        <para>The <code>@Role</code> annotation gives an <code>@In</code> or
        <code>@Out</code> tagged field a certain meaning within the modeling
        domain. It allows someone to understand the meaning of a data field
        within the modeling context. A @Role annotation categorizes a field.
        Such categories might be "Parameter", "Variable", "Output", "Input",
        "Simulated" and others. The Role annotation takes the category as a
        String parameter. There are predefined categories defined in @Role,
        however categories can be defined by the component developer.</para>

        <para>If the @Role annotation is not provided, the default
        <code>Role.VARIABLE</code> it is assumed.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@Role(&lt;String&gt;)</code></para>

                <para><code>arg - the role that this field is playing in
                context of the component.</code></para>

                <para><code>predefined:</code></para>

                <para><code> Role.PARAMETER, Role.VARIABLE, Role.SIMULATED,
                Role.OBSERVED, Role.STATE, Role.OUTPUT</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Documentation Annotation, Testing</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Field</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting> <emphasis role="bold">@Role(Role.PARAMETER)</emphasis>
 @In public double latitude;
</programlisting>

                <para>This example tags 'latitude' as Parameter.</para>

                <programlisting> <emphasis role="bold">@Role(Role.OUTPUT_FILE + Role.PARAMETER) </emphasis>
 @In public File input;</programlisting>

                <para>Roles can be combined too. Now the 'input' field is a
                parameter and an output file.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </section>

      <section>
        <title>@Unit</title>

        <para>A <code>@Unit</code> annotation binds a physical unit to a
        component field that is tagged as <code>@In</code> or
        <code>@Out</code>. Units are usually attached to scalars and arrays
        fields. This information allows the frameworks to perform unit
        checking/validation and unit conversion. There are several open source
        unit conversion libraries available that could be used to perform unit
        conversion. An example unit conversion implementation is given in
        Section ???.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@Unit(&lt;String&gt;)</code></para>

                <para><code>arg - the physical unit of the field</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Documentation Annotation, execution support</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Field</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting> public class Calc {   

    <emphasis role="bold">@Unit("degree")  </emphasis>
    @In public double latitude; 
    ...
 }</programlisting>

                <para>.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </section>

      <section>
        <title>@Bound</title>

        <para>A <code>@Bound</code> defines a binding to another field. It
        allows to express dependencies between fields. An array field could be
        bound to another field that holds the size for that particular
        array.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@Bound(&lt;String&gt;)</code></para>

                <para><code>arg - the name of the field that this field is
                bould to.</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Documentation Annotation, execution support.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Field</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting> public class ET { 

  <emphasis role="bold">  @Bound("nsim")</emphasis>         // 'jh_coeff' is bound to 'nsim'
    @In public double[] jh_coeff;
    ...
    @In public int nsim;    
    ...
 }</programlisting>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </section>

      <section>
        <title>@Execute</title>

        <para>The method that is tagged with the <code>@Execute</code>
        annotation provides the implementation logic of the component. In this
        method the component Input is being transformed to output. The
        execution method can have any name, it has to be non-static,
        <code>public</code>, <code>void</code> return type, no
        arguments.</para>

        <para>This is <emphasis>required</emphasis> meta data for a
        component.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@Execute</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Execution Annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Method</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting> public class Component {  
       
    <emphasis role="bold">@Execute        </emphasis>                         
    public void executemethod() {                
        // execute code here    
    }
 }</programlisting>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para></para>
      </section>

      <section>
        <title>@Initialize</title>

        <para>Within the <code>@Initialize</code> method the internal state of
        a component is initialized. For example opening a file for reading, or
        a creating a data base connection would be something that should be
        done within <code>@Initialize</code></para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@Initialize</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Execution Annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Method</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting> public class Component {         

   <emphasis role="bold"> @Initialize</emphasis>
    public void start() {                
       // initialization code     
    }
 }

</programlisting>

                <para></para>
              </listitem>
            </varlistentry>
          </variablelist>Name the initialize method any name you want, but
        annotate it with<code> @Initialize</code> The initialize methods has
        to be non-static, <code>public</code>, <code>void</code>, and has no
        arguments. This method gets called once after component instantiation
        and before the first execution. This is optional meta data.</para>
      </section>

      <section>
        <title>@Finalize</title>

        <para>This method provides the notion of a final cleanup after model
        execution (e.g. Closing a DB connection). Usually the
        <code>@Finalize</code> method and the <code>@Initialize</code> method
        are both present.</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@Finalize</code></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Execution Annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Method</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting>public class Component {    
     
   <emphasis role="bold"> @Finalize</emphasis>
    public void cleanup() {                
        // execute code here    
    }
}</programlisting>
              </listitem>
            </varlistentry>
          </variablelist>The <code>@Finalize</code> method gets called after
        the final <code>@Execute</code> and the termination of the
        model.</para>
      </section>

      <section>
        <title>@DLL</title>

        <para>The <code>@DLL</code> Annotation simplifies the integration of
        native Libraries written in C++, C, and FORTRAN. It takes an argument
        that corresponds to the name of the DLL (Windows), Shared Object
        (Linux/Unix), or Library (OSX).</para>

        <para>If for example the argument is</para>

        <para><variablelist>
            <varlistentry>
              <term>Synopsis</term>

              <listitem>
                <para><code>@DLL(&lt;String&gt;)</code></para>

                <para><code>arg</code> - the core name of the DLL (without lib
                prefix in Linux, no file extension).</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Type</term>

              <listitem>
                <para>Interface Annotation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Scope</term>

              <listitem>
                <para>Interface&lt;T extends Library&gt;</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Example</term>

              <listitem>
                <programlisting>import oms3.annotation.*;

<emphasis role="bold"> @DLL("F90Dyn")</emphasis>
 interface F95Test extends com.sun.jna.Library {
    // java interface method to FORTRAN
    int <emphasis role="bold">foomult</emphasis>(int a, int b);
 } 

 // Bind 'F90Dyn.dll' to the interface 'F95Test'
 F95Test lib = <emphasis role="bold">Libraries.bindLibrary</emphasis>(F95Test.class);
</programlisting>

                <para>Note: This annotation is supported by the</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </section>
    </section>

    <section>
      <title>Meta Data Representation</title>

      <para>There are various strategies for attaching meta data annotations
      to components.</para>

      <section>
        <title>Embedded Annotations</title>

        <para>Embedded Annotations are the preferred method for annotating
        modeling components. They are placed directly into the source code.
        Therefore it is easy to keep code and meta data in sync during
        development.</para>

        <blockquote>
          <para><programlisting>import oms3.annotations.*;

 public class Daylen {

    static final int[] DAYS = {
        15, 45, 74, 105, 135, 166, 196, 227, 258, 288, 319, 349
    };
     
    @Range(min=6, max=18)
    @Out public double daylen;
 
    @In public Calendar currentTime;
 
    @Role(“Parameter”)    
    @Range(min=-90, max=90)
    @In public double latitude;
 
    @Execute 
    public void execute() {
        int month  = currentTime.get(Calendar.MONTH);
        double dayl = DAYS[month] - 80.;
        if (dayl &lt; 0.0)
            dayl = 285. + DAYS[month];
        
        double decr = 23.45 * Math.sin(dayl/365.*6.2832)*0.017453;
        double alat = latitude*0.017453;
        double csh = (-0.02908 - Math.sin(decr) * Math.sin(alat))  
                         /(Math.cos(decr) * Math.cos(alat));
        daylen = 24.0 * (1.570796 - Math.atan(csh / 
                         Math.sqrt(1. - csh * csh))) / Math.PI;
    }
 }
</programlisting></para>
        </blockquote>

        <para></para>
      </section>

      <section>
        <title>Attached Annotations</title>

        <para>The following Listing show a alternative implementation of the
        <code>Daylen</code> component. It was split into two parts, (i) a pure
        computational component class <code>Daylen.java</code> and (ii) the
        component meta data class <code>DaylenCompInfo.java</code> . Only the
        latter has meta data dependencies to <code>OMS3</code>.</para>

        <para></para>

        <blockquote>
          <para><emphasis>DaylenCompInfo.java</emphasis></para>

          <programlisting>  public abstract class DaylenCompInfo {

    @Range(min=6, max=18)
    @Out public double daylen;

    @In public Calendar currentTime;
    
    @Role(“Parameter”)  
    @Range(min=-90, max=90)
    @In public double latitude;
  
    @Execute 
    public abstract void execute();

 }</programlisting>
        </blockquote>

        <para>As a rule, an attached component meta data class has the same
        name like the component but ends with <code>CompInfo</code>. This
        class has to be public and abstract. It duplicates all the relevant
        fields and methods that should be annotated for OMS3. The methods
        should all be abstract. It is important to use the same spelling for
        fields and methods.</para>

        <para></para>

        <blockquote>
          <para><emphasis>Daylen.java</emphasis></para>
        </blockquote>

        <blockquote>
          <programlisting> public class Daylen {

    static final int[] DAYS = {
        15, 45, 74, 105, 135, 166, 196, 227, 258, 288, 319, 349
    };

    public double daylen;
    public Calendar currentTime;
    public double latitude;

    public void execute() {
        int month  = currentTime.get(Calendar.MONTH);
        double dayl = DAYS[month] - 80.;
        if (dayl &lt; 0.0)
            dayl = 285. + DAYS[month];
        
        double decr = 23.45 * Math.sin(dayl/365.*6.2832)*0.017453;
        double alat = latitude*0.017453;
        double csh = (-0.02908 - Math.sin(decr) * Math.sin(alat))  
                         /(Math.cos(decr) * Math.cos(alat));
        daylen = 24.0 * (1.570796 - Math.atan(csh / 
                         Math.sqrt(1. - csh * csh))) / Math.PI;
    }
 }

</programlisting>
        </blockquote>

        <para>There are pro and cons for using embedded and attached component
        meta data. External meta data enables clean and neutral computational
        components parts with no framework dependency. However, two separate
        files have to be managed and have to kept in sync while doing
        component development.</para>
      </section>

      <section>
        <title>Attached XML</title>

        <para>[tbd]</para>
      </section>
    </section>
  </appendix>

  <appendix>
    <title>Recommended Practices</title>

    <para>This Chapter discusses general best practices with respect to model
    development. Those practices may or may with respect to easy language
    interoperability, ...</para>

    <section>
      <title>FORTRAN Coding Conventions</title>

      <para>This document addresses coding conventions for OMS components and
      scientific code written in Java and the FORTRAN programming
      language.</para>

      <para>The purpose of this document is to ensure that new FORTRAN code
      will be as portable and robust as possible, as well as consistent
      throughout the system. It builds upon commonly shared experience to
      avoid error-prone practices and gathers guidelines that are known to
      make codes more robust.</para>

      <para>This document covers items in order of decreasing importance (see
      below), deemed to be important for any code. It is recognized in the
      spirit of this standard that certain suggestions which make code easier
      to read for some people (e.g. lining up attributes, or using all lower
      case or mixed case) are subjective and therefore should not have the
      same weight as techniques and practices that are known to improve code
      quality. For this reason, the standards within this document are divided
      into three components; Standards, Guidelines and Recommendations:</para>

      <variablelist>
        <varlistentry>
          <term>Required</term>

          <listitem>
            <para>Aimed at ensuring portability, readability and robustness.
            Compliance with this category is mandatory.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Recommended</term>

          <listitem>
            <para>Good practices. Compliance with this category is strongly
            encouraged. The case for deviations will need to be argued by the
            programmer.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Encouraged</term>

          <listitem>
            <para>Compliance with this category is optional, but is encouraged
            for consistency purposes.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Depending on the projects, programmer may opt to adhere to all
      three levels or just the two first. All projects must adhere at least to
      the mandatory standards.</para>

      <section>
        <title>General Good Practices</title>

        <para>These usually help in the robustness of the code (by checking
        interface compatibility for example) and in the readability,
        maintainability and portability. They are reminded here:</para>

        <itemizedlist>
          <listitem>
            <para>Encapsulation: Use of modules for procedures, functions,
            data.</para>
          </listitem>

          <listitem>
            <para>Use Dynamic Memory allocation for optimal memory
            usage.</para>
          </listitem>

          <listitem>
            <para>Derived types or structures which generally lead to stable
            interfaces, optimal memory usage, compactness, etc.</para>
          </listitem>

          <listitem>
            <para>Optional and keyword arguments in using routines.</para>
          </listitem>

          <listitem>
            <para>Functions/subroutines/operators overloading
            capability.</para>
          </listitem>

          <listitem>
            <para>Intrinsic functions: bits, arrays manipulations, kinds
            definitions, etc.</para>
          </listitem>
        </itemizedlist>

        <para></para>
      </section>

      <section>
        <title>Interoperability and Portability</title>

        <para><emphasis role="bold">Required</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Source code must conform to the ISO FORTRAN 95
            standard.</para>
          </listitem>

          <listitem>
            <para>No use shall be made of compiler-dependent error specifier
            values (e.g. IOSTAT or STAT values).</para>
          </listitem>

          <listitem>
            <para>No compiler- or platform-dependent extensions shall be
            used.</para>
          </listitem>

          <listitem>
            <para>Source code must compiled and run under gfortran that is
            part of the GNU Compiler Collection.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Recommended</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Note that STOP is a F90/95 standard. EXIT(N) is an extension
            and should be avoided. It is recognized that STOP does not
            necessarily return an error code. If an error code must be passed
            to a script for instance, then the extension EXIT could be used
            but within a central place, so that to limit its occurrences
            within the code to a single place.</para>
          </listitem>

          <listitem>
            <para>Precision: Parameterizations should not rely on
            vendor-supplied flags to supply a default floating point precision
            or integer size. The F90/95 KIND feature should be used
            instead.</para>
          </listitem>

          <listitem>
            <para>Do not use tab characters in the code to ensure it will look
            as intended when ported. They are not part of the FORTRAN
            characters set.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Encouraged</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>For applications requiring interaction with
            independently-developed frameworks, the use of KIND type for all
            variables declaration is encouraged to facilitate the
            integration.</para>
          </listitem>
        </itemizedlist>

        <para></para>
      </section>

      <section>
        <title>Readability</title>

        <para><emphasis role="bold">Required</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Use free format syntax</para>
          </listitem>

          <listitem>
            <para>Use consistent indentation across the code. Each level of
            indentation should use at least two spaces.</para>
          </listitem>

          <listitem>
            <para>Use modules to organize source code.</para>
          </listitem>

          <listitem>
            <para>FORTRAN keywords (e.g., DATA) shall not be used as variable
            names.</para>
          </listitem>

          <listitem>
            <para>Use meaningful, understandable names for variables and
            parameters. Recognized abbreviations are acceptable as a means of
            preventing variable names getting too long.</para>
          </listitem>

          <listitem>
            <para>Each externally-called function, subroutine, should contain
            a header. The content and style of the header should be consistent
            across the system, and should include the functionality of the
            function, as well as the description of the arguments, the
            author(s) names. A header could be replaced by a limited number of
            descriptive comments for small subroutines.</para>
          </listitem>

          <listitem>
            <para>Magic numbers should be avoided; physical constants (e.g.,
            pi, gas constants) should never be hardwired into the executable
            portion of a code; use PARAMETER statements instead.</para>
          </listitem>

          <listitem>
            <para>Hard-coded numbers should be avoided when passed through
            argument lists since a compiler flag, which defines a default
            precision for constants, cannot be guaranteed.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Recommended</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Use construct names to name loops, to increase readability,
            especially in nested loops.</para>
          </listitem>

          <listitem>
            <para>Similarly, use construct names in subroutines, functions,
            main programs, modules, operator, interface, etc.</para>
          </listitem>

          <listitem>
            <para>Include comments to describe the input, output and local
            variables of all procedures. Grouping comments for similar
            variables is acceptable when their names are explicit
            enough.</para>
          </listitem>

          <listitem>
            <para>Use comments as required to delineate significant functional
            sections of code.</para>
          </listitem>

          <listitem>
            <para>Do not use FORTRAN statements and intrinsic function names
            as symbolic names.</para>
          </listitem>

          <listitem>
            <para>Use named parameters instead of “magic numbers”; REAL,
            PARAMETER :: PI=3.14159, ONE=1.0</para>
          </listitem>

          <listitem>
            <para>Do not use GOTO statements. These are hard to maintain and
            complicate understanding the code. If absolutely necessary to use
            GOTO (if using other constructs complicates the code structure),
            thoroughly document the use of the GOTO.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Encouraged</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>When writing new code, adhere to the style standards within
            your own coding style. When modifying an old code, adhere to the
            style of the existing code to keep consistency.</para>
          </listitem>

          <listitem>
            <para>Use the same indentation for comments as for the rest of the
            code.</para>
          </listitem>

          <listitem>
            <para>Functions, procedures, data that are naturally linked should
            be grouped in modules.</para>
          </listitem>

          <listitem>
            <para>Limit to 80 the number of characters per line (maximum
            allowed under ISO is 132)</para>
          </listitem>

          <listitem>
            <para>Use of operators &lt;, &gt;, &lt;=, &gt;=, ==, /= is
            encouraged (for readability) instead of .lt., .gt., .le., .ge.,
            .eq., .ne.</para>
          </listitem>

          <listitem>
            <para>Modules should be named the same name as the files they
            reside in: To simplify the makefiles that compile them.
            Consequently, multiple modules in a single file are to be avoided
            where possible.</para>
          </listitem>

          <listitem>
            <para>Use blanks to improve the appearance of the code, to
            separate syntactic elements (on either side of equal signs, etc)
            in type declaration statements</para>
          </listitem>

          <listitem>
            <para>Always use the :: notation, even if there are no
            attributes.</para>
          </listitem>

          <listitem>
            <para>Line up vertically: attributes, variables, comments within
            the variables declaration section.</para>
          </listitem>

          <listitem>
            <para>Remove unused variables</para>
          </listitem>

          <listitem>
            <para>Remove code that was used for debugging once this is
            complete.</para>
          </listitem>
        </itemizedlist>

        <para></para>
      </section>

      <section>
        <title>Robustness</title>

        <para><emphasis role="bold">Required</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Use Implicit NONE in all codes: main programs, modules, etc.
            To ensure correct size and type declarations of
            variables/arrays.</para>
          </listitem>

          <listitem>
            <para>Use PRIVATE in modules before explicitly listing data,
            functions, procedures to be PUBLIC. This ensures encapsulation of
            modules and avoids potential naming conflicts. Exception to
            previous statement is when a module is entirely dedicated to
            PUBLIC data/functions (e.g. a module dedicated to
            constants).</para>
          </listitem>

          <listitem>
            <para>Initialize all variables. Do not assume machine default
            value assignments.</para>
          </listitem>

          <listitem>
            <para>Do not initialize variables of one type with values of
            another.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Recommended</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Do not use the operators == and /= with floating-point
            expressions as operands. Check instead the departure of the
            difference from a pre-defined numerical accuracy threshold (e.g.
            epsilon comparison).</para>
          </listitem>

          <listitem>
            <para>In mixed mode expressions and assignments (where variables
            of different types are mixed), the type conversions should be
            written explicitly (not assumed). Do not compare expressions of
            different types for instance. Explicitly perform the type
            conversion first.</para>
          </listitem>

          <listitem>
            <para>No include files should be used. Use modules instead, with
            USE statements in calling programs.</para>
          </listitem>

          <listitem>
            <para>Structures (derived types) should be defined within their
            own module. Procedures, Functions to manipulate these structures
            should also be defined within this module, to form an object-like
            entity.</para>
          </listitem>

          <listitem>
            <para>Procedures should be logically flat (should focus on a
            particular functionality, not several ones)</para>
          </listitem>

          <listitem>
            <para>Module PUBLIC variables (global variables) should be used
            with care and mostly for static or infrequently varying
            data.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Encouraged</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Use parentheses at all times to control evaluation order in
            expressions.</para>
          </listitem>

          <listitem>
            <para>Use of structures is encouraged for a more stable interface
            and a more compact design. Refer to structure contents with the %
            sign (e.g. <code>Absorbents%WaterVapor</code>).</para>
          </listitem>
        </itemizedlist>

        <para></para>
      </section>

      <section>
        <title>Arrays</title>

        <para><emphasis role="bold">Required</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Subscript expressions should be of type integer only.</para>
          </listitem>

          <listitem>
            <para>When arrays are passed as arguments, code should not assume
            any particular passing mechanism.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Recommended</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Use of arrays is encouraged as well as intrinsic functions
            to manipulate them.</para>
          </listitem>

          <listitem>
            <para>Use of assumed shapes is fine in passing vectors/arrays to
            functions/arrays.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Encouraged</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Declare DIMENSION for all non-scalars</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Dynamic Memory Allocation / Pointers</title>

        <para><emphasis role="bold">Required</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Use of allocatable arrays is preferred to using pointers,
            when possible. To minimize risks of memory leaks and heap
            fragmentation.</para>
          </listitem>

          <listitem>
            <para>Use of pointers is allowed when declaring an array in a
            subroutine and making it available to a calling program.</para>
          </listitem>

          <listitem>
            <para>Always initialize pointer variables in their declaration
            statement using the NULL() intrinsic. INTEGER, POINTER :: x=&gt;
            NULL()</para>
          </listitem>

          <listitem>
            <para>The preferable mechanism for dynamic memory allocation is
            automatic arrays, as opposed to ALLOCATABLE or POINTER arrays for
            which memory must be explicitly allocated and deallocated; space
            allocated using ALLOCATABLE or POINTER must be explicitly freed
            using the DEALLOCATE statement.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Recommended</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Always deallocate allocated pointers and arrays. This is
            especially important inside subroutines and inside loops.</para>
          </listitem>

          <listitem>
            <para>Always test the success of a dynamic memory allocation and
            deallocation - the ALLOCATE and DEALLOCATE statements have an
            optional argument to allow this.</para>
          </listitem>

          <listitem>
            <para>In a given program unit do not repeatedly ALLOCATE space,
            DEALLOCATE it and then ALLOCATE a larger block of space - this
            will almost certainly generate large amounts of unusable
            memory.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Encouraged</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Use of dynamic memory allocation is encouraged. It makes
            code generic and avoids declaring with maximum dimensions.</para>
          </listitem>

          <listitem>
            <para>For simplicity, use Automatic arrays in subroutines whenever
            possible, instead of allocatable arrays.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Looping</title>

        <para><emphasis role="bold">Required</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Do not use GOTO to exit/cycle loops, use instead EXIT or
            CYCLE statements.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Recommended</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>No numbered DO loops such as (DO 10 ...10 CONTINUE).</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Functions/Procedures</title>

        <para><emphasis role="bold">Required</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>The SAVE statement is discouraged; use module variables for
            state saving.</para>
          </listitem>

          <listitem>
            <para>Do not use an entry in a function subprogram.</para>
          </listitem>

          <listitem>
            <para>Functions must not have pointer results.</para>
          </listitem>

          <listitem>
            <para>The names of intrinsic functions (e.g., SUM) shall not be
            used for user-defined functions.</para>
          </listitem>

          <listitem>
            <para>Procedures that return a single value should be functions;
            note that single values could also be user-defined types.</para>
          </listitem>

          <listitem>
            <para>All communication with the module should be through the
            argument list or it should access its module variables.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Recommended</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>All dummy arguments, except pointers, should include the
            INTENT clause in their declaration</para>
          </listitem>

          <listitem>
            <para>Limit use of type specific intrinsic functions (e.g., AMAX,
            DMAX - use MAX in all cases).</para>
          </listitem>

          <listitem>
            <para>Avoid statically dimensioned array arguments in a
            function/subroutine.</para>
          </listitem>

          <listitem>
            <para>Check for invalid argument values.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Encouraged</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Error conditions. When an error condition occurs inside a
            function/procedure, a message describing what went wrong should be
            printed. The name of the routine in which the error occurred must
            be included. It is acceptable to terminate execution within a
            package, but the developer may instead wish to return an error
            flag through the argument list.</para>
          </listitem>

          <listitem>
            <para>Functions/procedures that perform the same function but for
            different types/sizes of arguments, should be overloaded, to
            minimize duplication and ease the maintainability.</para>
          </listitem>

          <listitem>
            <para>When explicit interfaces are needed, use modules, or contain
            the subroutines in the calling programs (through CONTAINS
            statement), for simplicity.</para>
          </listitem>

          <listitem>
            <para>Do not use external routines as these need interface blocks
            that would need to be updated each time the interface of the
            external routine is changed.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>I/O</title>

        <para><emphasis role="bold">Required</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>I/O statements on external files should contain the status
            specifier parameters err=, end=, iostat=, as appropriate.</para>
          </listitem>

          <listitem>
            <para>All global variables, if present, should be set at the
            initialization stage.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Recommended</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Avoid using NAMELIST I/O if possible.</para>
          </listitem>

          <listitem>
            <para>Use write rather than print statements for non-terminal
            I/O.</para>
          </listitem>

          <listitem>
            <para>Use Character parameters or explicit format specifiers
            inside the Read or Write statement. DO not use labeled format
            statements (outdated).</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>FORTRAN Features that are obsolescent and/or
        discouraged</title>

        <para><emphasis role="bold">Required</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>No Common blocks. Modules are a better way to declare/store
            static data, with the added ability to mix data of various types,
            and to limit access to contained variables through use of the ONLY
            and PRIVATE clauses.</para>
          </listitem>

          <listitem>
            <para>No assigned and computed GO TOs - use the CASE construct
            instead</para>
          </listitem>

          <listitem>
            <para>No arithmetic IF statements - use the block IF construct
            instead</para>
          </listitem>

          <listitem>
            <para>Avoid DATA, ASSIGN Labeled DO BACKSPACE Blank COMMON, BLOCK
            DATA</para>
          </listitem>

          <listitem>
            <para>Use REAL instead of DOUBLE PRECISION</para>
          </listitem>

          <listitem>
            <para>Branch to END IF outside the block IF</para>
          </listitem>

          <listitem>
            <para>DO non-integer Control</para>
          </listitem>

          <listitem>
            <para>Hollerith Constants</para>
          </listitem>

          <listitem>
            <para>PAUSE</para>
          </listitem>

          <listitem>
            <para>multiple RETURN</para>
          </listitem>

          <listitem>
            <para>Alternate RETURN</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Recommended</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Do not make use of the equivalence statement, especially for
            variables of different types. Use pointers or derived types
            instead.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Encouraged</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>No implicitly changing the shape of an array when passing it
            into a subroutine. Although actually forbidden in the standard it
            was very common practice in FORTRAN 77 to pass 'n' dimensional
            arrays into a subroutine where they would, say, be treated as a 1
            dimensional array. This practice, though banned in FORTRAN 90, is
            still possible possible with external routines for which no
            Interface block has been supplied. This only works because of
            assumptions made about how the data is stored.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Source Files</title>

        <para><emphasis role="bold">Required</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Document the function interface: argument name, type, unit,
            description, constraint,defaults.</para>
          </listitem>

          <listitem>
            <para>The INCLUDE statement shall not be used; use the USE
            statement instead.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Recommended</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Try to limit source column length, including comments, to 80
            columns (or follow language specific limits).</para>
          </listitem>

          <listitem>
            <para>A component should not exceed 300-500 effective lines of
            code, be efficient with your coding.</para>
          </listitem>

          <listitem>
            <para>Use blank lines (or lines with a standard character in
            column 1) to separate statement blocks to improve code
            readability.</para>
          </listitem>

          <listitem>
            <para>Apply consistent indentation method for code.</para>
          </listitem>

          <listitem>
            <para>Module/subprogram names shall be lower case; the name of a
            file containing a module/subprogram shall be the module/subprogram
            name with the suffix *.f90."</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Encouraged</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Clearly separate declaration of argument variables from
            declaration of local variables.</para>
          </listitem>

          <listitem>
            <para>Use descriptive and unique names for variables and
            subprograms (so as to improve the code readability and facilitate
            global string search);</para>
          </listitem>

          <listitem>
            <para>try to limit name lengths to 12-15 characters.</para>
          </listitem>

          <listitem>
            <para>Indent continuation lines to ensure that, for example, parts
            of a multi-line equation line up in a readable manner.</para>
          </listitem>

          <listitem>
            <para>Start comment text with a standard character (e.g. !, C,
            etc.); if a stand-alone line then start comment character in the
            first column.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>General Coding Guidelines</title>

        <itemizedlist>
          <listitem>
            <para>Reduce or eliminate global variable usage.</para>
          </listitem>

          <listitem>
            <para>Attempt to limit the number of arguments in argument list -
            long lists make it hard to reuse.</para>
          </listitem>

          <listitem>
            <para>Limit of only one return point per component.</para>
          </listitem>

          <listitem>
            <para>Use exceptions as error indicators if supported.</para>
          </listitem>

          <listitem>
            <para>Components should be specific to one and only one
            purpose.</para>
          </listitem>

          <listitem>
            <para>Components with side effects are not allowed (e.g. Don't mix
            I/O code with computational code).</para>
          </listitem>

          <listitem>
            <para>Program against a standard (e.g., ANSI C, C++, Java, FORTRAN
            77/90/95) -</para>
          </listitem>

          <listitem>
            <para>Make sure your code compiles under different compilers and
            platforms.</para>
          </listitem>

          <listitem>
            <para>Use preprocessor directives for adaptation to different
            architectures/compilers/OS.</para>
          </listitem>

          <listitem>
            <para>Make I/O specific components separate from computational
            components.</para>
          </listitem>

          <listitem>
            <para>Avoid static allocation of data (compile time
            allocation).</para>
          </listitem>

          <listitem>
            <para>Be most specific with your data types.</para>
          </listitem>

          <listitem>
            <para>Avoid using custom data types for argument types.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </appendix>

  <appendix>
    <title>License</title>

    <para>OMS3 is licensed under the Open Software License ("OSL") version
    3.0:</para>

    <para>1) <emphasis role="bold">Grant of Copyright License</emphasis>.
    Licensor grants You a worldwide, royalty-free, non-exclusive,
    sublicensable license, for the duration of the copyright, to do the
    following:</para>

    <blockquote>
      <para>a) to reproduce the Original Work in copies, either alone or as
      part of a collective work;</para>

      <para>b) to translate, adapt, alter, transform, modify, or arrange the
      Original Work, thereby creating derivative works ("Derivative Works")
      based upon the Original Work;</para>

      <para>c) to distribute or communicate copies of the Original Work and
      Derivative Works to the public, with the proviso that copies of Original
      Work or Derivative Works that You distribute or communicate shall be
      licensed under this Open Software License;</para>

      <para>d) to perform the Original Work publicly; and e) to display the
      Original Work publicly.</para>
    </blockquote>

    <para>2) <emphasis role="bold">Grant of Patent License</emphasis>.
    Licensor grants You a worldwide, royalty-free, non-exclusive,
    sublicensable license, under patent claims owned or controlled by the
    Licensor that are embodied in the Original Work as furnished by the
    Licensor, for the duration of the patents, to make, use, sell, offer for
    sale, have made, and import the Original Work and Derivative Works.</para>

    <para>3) <emphasis role="bold">Grant of Source Code License</emphasis>.
    The term "Source Code" means the preferred form of the Original Work for
    making modifications to it and all available documentation describing how
    to modify the Original Work. Licensor agrees to provide a machine-readable
    copy of the Source Code of the Original Work along with each copy of the
    Original Work that Licensor distributes. Licensor reserves the right to
    satisfy this obligation by placing a machine-readable copy of the Source
    Code in an information repository reasonably calculated to permit
    inexpensive and convenient access by You for as long as Licensor continues
    to distribute the Original Work.</para>

    <para>4) <emphasis role="bold">Exclusions From License Grant</emphasis>.
    Neither the names of Licensor, nor the names of any contributors to the
    Original Work, nor any of their trademarks or service marks, may be used
    to endorse or promote products derived from this Original Work without
    express prior permission of the Licensor. Except as expressly stated
    herein, nothing in this License grants any license to Licensor's
    trademarks, copyrights, patents, trade secrets or any other intellectual
    property. No patent license is granted to make, use, sell, offer for sale,
    have made, or import embodiments of any patent claims other than the
    licensed claims defined in Section 2. No license is granted to the
    trademarks of Licensor even if such marks are included in the Original
    Work. Nothing in this License shall be interpreted to prohibit Licensor
    from licensing under terms different from this License any Original Work
    that Licensor otherwise would have a right to license.</para>

    <para>5)<emphasis role="bold"> External Deployment.</emphasis> The term
    "External Deployment" means the use, distribution, or communication of the
    Original Work or Derivative Works in any way such that the Original Work
    or Derivative Works may be used by anyone other than You, whether those
    works are distributed or communicated to those persons or made available
    as an application intended for use over a network. As an express condition
    for the grants of license hereunder, You must treat any External
    Deployment by You of the Original Work or a Derivative Work as a
    distribution under section 1(c).</para>

    <para>6) <emphasis role="bold">Attribution Rights.</emphasis> You must
    retain, in the Source Code of any Derivative Works that You create, all
    copyright, patent, or trademark notices from the Source Code of the
    Original Work, as well as any notices of licensing and any descriptive
    text identified therein as an "Attribution Notice." You must cause the
    Source Code for any Derivative Works that You create to carry a prominent
    Attribution Notice reasonably calculated to inform recipients that You
    have modified the Original Work.</para>

    <para>7) <emphasis role="bold">Warranty of Provenance and Disclaimer of
    Warranty.</emphasis> Licensor warrants that the copyright in and to the
    Original Work and the patent rights granted herein by Licensor are owned
    by the Licensor or are sublicensed to You under the terms of this License
    with the permission of the contributor(s) of those copyrights and patent
    rights. Except as expressly stated in the immediately preceding sentence,
    the Original Work is provided under this License on an "AS IS" BASIS and
    WITHOUT WARRANTY, either express or implied, including, without
    limitation, the warranties of non-infringement, merchantability or fitness
    for a particular purpose. THE ENTIRE RISK AS TO THE QUALITY OF THE
    ORIGINAL WORK IS WITH YOU. This DISCLAIMER OF WARRANTY constitutes an
    essential part of this License. No license to the Original Work is granted
    by this License except under this disclaimer.</para>

    <para>8) <emphasis role="bold">Limitation of Liability.</emphasis> Under
    no circumstances and under no legal theory, whether in tort (including
    negligence), contract, or otherwise, shall the Licensor be liable to
    anyone for any indirect, special, incidental, or consequential damages of
    any character arising as a result of this License or the use of the
    Original Work including, without limitation, damages for loss of goodwill,
    work stoppage, computer failure or malfunction, or any and all other
    commercial damages or losses. This limitation of liability shall not apply
    to the extent applicable law prohibits such limitation.</para>

    <para>9)<emphasis role="bold"> Acceptance and Termination.</emphasis> If,
    at any time, You expressly assented to this License, that assent indicates
    your clear and irrevocable acceptance of this License and all of its terms
    and conditions. If You distribute or communicate copies of the Original
    Work or a Derivative Work, You must make a reasonable effort under the
    circumstances to obtain the express assent of recipients to the terms of
    this License. This License conditions your rights to undertake the
    activities listed in Section 1, including your right to create Derivative
    Works based upon the Original Work, and doing so without honoring these
    terms and conditions is prohibited by copyright law and international
    treaty. Nothing in this License is intended to affect copyright exceptions
    and limitations (including "fair use" or "fair dealing"). This License
    shall terminate immediately and You may no longer exercise any of the
    rights granted to You by this License upon your failure to honor the
    conditions in Section 1(c).</para>

    <para>10) <emphasis role="bold">Termination for Patent Action.
    </emphasis>This License shall terminate automatically and You may no
    longer exercise any of the rights granted to You by this License as of the
    date You commence an action, including a cross-claim or counterclaim,
    against Licensor or any licensee alleging that the Original Work infringes
    a patent. This termination provision shall not apply for an action
    alleging patent infringement by combinations of the Original Work with
    other software or hardware.</para>

    <para>11) <emphasis role="bold">Jurisdiction, Venue and Governing
    Law.</emphasis> Any action or suit relating to this License may be brought
    only in the courts of a jurisdiction wherein the Licensor resides or in
    which Licensor conducts its primary business, and under the laws of that
    jurisdiction excluding its conflict-of-law provisions. The application of
    the United Nations Convention on Contracts for the International Sale of
    Goods is expressly excluded. Any use of the Original Work outside the
    scope of this License or after its termination shall be subject to the
    requirements and penalties of copyright or patent law in the appropriate
    jurisdiction. This section shall survive the termination of this
    License.</para>

    <para>12) <emphasis role="bold">Attorneys' Fees</emphasis>. In any action
    to enforce the terms of this License or seeking damages relating thereto,
    the prevailing party shall be entitled to recover its costs and expenses,
    including, without limitation, reasonable attorneys' fees and costs
    incurred in connection with such action, including any appeal of such
    action. This section shall survive the termination of this License.</para>

    <para>13) <emphasis role="bold">Miscellaneous. </emphasis>If any provision
    of this License is held to be unenforceable, such provision shall be
    reformed only to the extent necessary to make it enforceable.</para>

    <para>14) <emphasis role="bold">Definition of "You" in This License.
    </emphasis>"You" throughout this License, whether in upper or lower case,
    means an individual or a legal entity exercising rights under, and
    complying with all of the terms of, this License. For legal entities,
    "You" includes any entity that controls, is controlled by, or is under
    common control with you. For purposes of this definition, "control" means
    (i) the power, direct or indirect, to cause the direction or management of
    such entity, whether by contract or otherwise, or (ii) ownership of fifty
    percent (50%) or more of the outstanding shares, or (iii) beneficial
    ownership of such entity.</para>

    <para>15) <emphasis role="bold">Right to Use. </emphasis>You may use the
    Original Work in all ways not otherwise restricted or conditioned by this
    License or by law, and Licensor promises not to interfere with or be
    responsible for such uses by You.</para>

    <para>16) <emphasis role="bold">Modification of This License.</emphasis>
    This License is Copyright © 2005 Lawrence Rosen. Permission is granted to
    copy, distribute, or communicate this License without modification.
    Nothing in this License permits You to modify this License as applied to
    the Original Work or to Derivative Works. However, You may modify the text
    of this License and copy, distribute or communicate your modified version
    (the "Modified License") and apply it to other original works of
    authorship subject to the following conditions: (i) You may not indicate
    in any way that your Modified License is the "Open Software License" or
    "OSL" and you may not use those names in the name of your Modified
    License; (ii) You must replace the notice specified in the first paragraph
    above with the notice "Licensed under &lt;insert your license name
    here&gt;" or with a notice of your own that is not confusingly similar to
    the notice in this License; and (iii) You may not claim that your original
    works are open source software unless your Modified License has been
    approved by Open Source Initiative (OSI) and You comply with its license
    review and certification process.</para>
  </appendix>

  <index></index>
</book>
